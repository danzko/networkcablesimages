this.recline=this.recline||{},this.recline.Backend=this.recline.Backend||{},this.recline.Backend.CSV=this.recline.Backend.CSV||{},function(a){function f(a){return"\n"!==a.charAt(a.length-1)?a:a.substring(0,a.length-1)}a.fetch=function(b){var c=$.Deferred();if(b.file){var d=new FileReader,e=b.encoding||"UTF-8";d.onload=function(d){var e=a.parseCSV(d.target.result,b);c.resolve({records:e,metadata:{filename:b.file.name},useMemoryStore:!0})},d.onerror=function(a){alert("Failed to load file. Code: "+a.target.error.code)},d.readAsText(b.file,e)}else if(b.data){var f=a.parseCSV(b.data,b);c.resolve({records:f,useMemoryStore:!0})}else b.url&&$.get(b.url).done(function(d){var e=a.parseCSV(d,b);c.resolve({records:e,useMemoryStore:!0})});return c.promise()},a.parseCSV=function(a,d){a=f(a);var p,q,d=d||{},g=d.trim===!1?!1:!0,h=d.separator||",",i=d.delimiter||'"',j="",k=!1,l=!1,m="",n=[],o=[];for(q=function(a){return l!==!0&&(""===a?a=null:g===!0&&(a=e(a)),b.test(a)?a=parseInt(a,10):c.test(a)&&(a=parseFloat(a,10))),a},p=0;p<a.length;p+=1)j=a.charAt(p),k!==!1||j!==h&&"\n"!==j?j!==i?m+=j:k?a.charAt(p+1)===i?(m+=i,p+=1):k=!1:(k=!0,l=!0):(m=q(m),n.push(m),"\n"===j&&(o.push(n),n=[]),m="",l=!1);return m=q(m),n.push(m),o.push(n),o};var b=/^\d+$/,c=/^\d*\.\d+$|^\d+\.\d*$/,e=function(){return String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^\s*/,"").replace(/\s*$/,"")}}()}(this.recline.Backend.CSV),this.recline=this.recline||{},this.recline.Backend=this.recline.Backend||{},this.recline.Backend.DataProxy=this.recline.Backend.DataProxy||{},function(a,b){b.__type__="dataproxy",b.dataproxy_url="http://jsonpdataproxy.appspot.com",b.timeout=5e3,b.fetch=function(d){var e={url:d.url,"max-results":d.size||d.rows||1e3,type:d.format||""},f=a.ajax({url:b.dataproxy_url,data:e,dataType:"jsonp"}),g=a.Deferred();return c(f).done(function(a){a.error&&g.reject(a.error),g.resolve({records:a.data,fields:a.fields,useMemoryStore:!0})}).fail(function(a){g.reject(a)}),g.promise()};var c=function(c){var d=a.Deferred(),e=setTimeout(function(){d.reject({message:"Request Error: Backend did not respond after "+b.timeout/1e3+" seconds"})},b.timeout);return c.done(function(a){clearTimeout(e),d.resolve(a)}).fail(function(a){clearTimeout(e),d.reject(a)}),d.promise()}}(jQuery,this.recline.Backend.DataProxy),this.recline=this.recline||{},this.recline.Backend=this.recline.Backend||{},this.recline.Backend.ElasticSearch=this.recline.Backend.ElasticSearch||{},function(a,b){b.__type__="elasticsearch",b.Wrapper=function(a,b){var d=this;this.endpoint=a,this.options=_.extend({dataType:"json"},b),this.mapping=function(){var a=d.endpoint+"/_mapping",b=c({url:a,dataType:this.options.dataType});return b},this.get=function(a){var b=this.endpoint+"/"+a;return c({url:b,dataType:"json"})},this.upsert=function(a){var b=JSON.stringify(a);return url=this.endpoint,a.id&&(url+="/"+a.id),c({url:url,type:"POST",data:b,dataType:"json"})},this.delete=function(a){return url=this.endpoint,url+="/"+a,c({url:url,type:"DELETE",dataType:"json"})},this._normalizeQuery=function(a){var b=this,c=a&&a.toJSON?a.toJSON():_.extend({},a),d={constant_score:{query:{}}};return d.constant_score.query=c.q?{query_string:{query:c.q}}:{match_all:{}},c.filters&&c.filters.length&&(d.constant_score.filter={and:[]},_.each(c.filters,function(a){d.constant_score.filter.and.push(b._convertFilter(a))})),d},this._convertFilter=function(a){var b={};return b[a.type]={},"term"===a.type?b.term[a.field]=a.term.toLowerCase():"geo_distance"===a.type&&(b.geo_distance[a.field]=a.point,b.geo_distance.distance=a.distance,b.geo_distance.unit=a.unit),b},this.query=function(a){var b=a&&a.toJSON?a.toJSON():_.extend({},a),d=this._normalizeQuery(a);delete b.q,delete b.filters,b.query=d;var e={source:JSON.stringify(b)},f=this.endpoint+"/_search",g=c({url:f,data:e,dataType:this.options.dataType});return g}},b.esOptions={},b.fetch=function(c){var d=new b.Wrapper(c.url,b.esOptions),e=a.Deferred();return d.mapping().done(function(a){if(!a)return e.reject({message:"Elastic Search did not return a mapping"}),void 0;var b=_.keys(a)[0],c=_.map(a[b].properties,function(a,b){return a.id=b,a});e.resolve({fields:c})}).fail(function(a){e.reject(a)}),e.promise()},b.save=function(c,d){var e=new b.Wrapper(d.url,b.esOptions);if(c.creates.length+c.updates.length+c.deletes.length>1){var f=a.Deferred();return msg="Saving more than one item at a time not yet supported",alert(msg),f.reject(msg),f.promise()}return c.creates.length>0?e.upsert(c.creates[0]):c.updates.length>0?e.upsert(c.updates[0]):c.deletes.length>0?e.delete(c.deletes[0].id):void 0},b.query=function(c,d){var e=a.Deferred(),f=new b.Wrapper(d.url,b.esOptions),g=f.query(c);return g.done(function(a){var b={total:a.hits.total};b.hits=_.map(a.hits.hits,function(a){return"id"in a._source||!a._id||(a._source.id=a._id),a._source}),a.facets&&(b.facets=a.facets),e.resolve(b)}).fail(function(a){var b={title:"Failed: "+a.status+" code",message:a.responseText};e.reject(b)}),e.promise()};var c=function(b,c){var d={};c&&(d={beforeSend:function(a){_.each(c,function(b,c){a.setRequestHeader(c,b)})}});var b=_.extend(d,b);return a.ajax(b)}}(jQuery,this.recline.Backend.ElasticSearch),this.recline=this.recline||{},this.recline.Backend=this.recline.Backend||{},this.recline.Backend.GDocs=this.recline.Backend.GDocs||{},function(a,b){b.__type__="gdocs",b.fetch=function(c){var d=a.Deferred(),e=b.getSpreadsheetAPIUrl(c.url);return a.getJSON(e,function(a){result=b.parseData(a);var c=_.map(result.fields,function(a){return{id:a}});d.resolve({records:result.records,fields:c,useMemoryStore:!0})}),d.promise()},b.parseData=function(a){var b={};arguments.length>1&&(b=arguments[1]);var c={fields:[],records:[]},d={};if(b.colTypes&&(d=b.colTypes),a.feed.entry.length>0)for(var e in a.feed.entry[0])if("gsx"==e.substr(0,3)){var f=e.substr(4);c.fields.push(f)}var g=/^([\d\.\-]+)\%$/;return c.records=_.map(a.feed.entry,function(a){var b={};return _.each(c.fields,function(c){var e="gsx$"+c,f=a[e].$t;if("percent"==d[c]&&g.test(f)){var h=g.exec(f),i=parseFloat(h);f=i/100}b[c]=f}),b}),c},b.getSpreadsheetAPIUrl=function(a){if(-1!=a.indexOf("feeds/list"))return a;var b=/.*spreadsheet\/ccc?.*key=([^#?&+]+).*/,c=a.match(b);if(c){var d=c[1],e=1,f="https://spreadsheets.google.com/feeds/list/"+d+"/"+e+"/public/values?alt=json";return f}alert("Failed to extract gdocs key from "+a)}}(jQuery,this.recline.Backend.GDocs),this.recline=this.recline||{},this.recline.Backend=this.recline.Backend||{},this.recline.Backend.Memory=this.recline.Backend.Memory||{},function(a,b){b.__type__="memory",b.Store=function(b,c){var d=this;this.data=b,c?this.fields=c:b&&(this.fields=_.map(b[0],function(a,b){return{id:b}})),this.update=function(a){_.each(d.data,function(b,c){a.id===b.id&&(d.data[c]=a)})},this.delete=function(a){var b=_.reject(d.data,function(b){return a.id===b.id});this.data=b},this.save=function(b){var d=this,e=a.Deferred();return _.each(b.updates,function(a){d.update(a)}),_.each(b.deletes,function(a){d.delete(a)}),e.resolve(),e.promise()},this.query=function(b){var c=a.Deferred(),d=b.size||this.data.length,e=b.from||0,f=this.data;f=this._applyFilters(f,b),f=this._applyFreeTextQuery(f,b),_.each(b.sort,function(a){var b=_.keys(a)[0];f=_.sortBy(f,function(a){var c=a[b];return c}),"desc"==a[b].order&&f.reverse()});var g=this.computeFacets(f,b),h={total:f.length,hits:f.slice(e,e+d),facets:g};return c.resolve(h),c.promise()},this._applyFilters=function(a,b){return _.each(b.filters,function(b){"term"===b.type&&(a=_.filter(a,function(a){return a[b.field]==b.term}))}),a},this._applyFreeTextQuery=function(a,b){if(b.q){var c=b.q.split(" ");a=_.filter(a,function(a){var b=!0;return _.each(c,function(c){var e=!1;_.each(d.fields,function(b){var d=a[b.id];d=null!==d?d.toString():"",e=e||d.toLowerCase()===c.toLowerCase()}),b=b&&e}),b})}return a},this.computeFacets=function(a,b){var c={};return b.facets?(_.each(b.facets,function(a,b){c[b]=new recline.Model.Facet({id:b}).toJSON(),c[b].termsall={}}),_.each(a,function(a){_.each(b.facets,function(b,d){var e=b.terms.field,f=a[e],g=c[d];f?g.termsall[f]=g.termsall[f]?g.termsall[f]+1:1:g.missing=g.missing+1})}),_.each(b.facets,function(a,b){var d=c[b],e=_.map(d.termsall,function(a,b){return{term:b,count:a}});d.terms=_.sortBy(e,function(a){return-a.count}),d.terms=d.terms.slice(0,10)}),c):c},this.transform=function(a){var b=costco.mapDocs(this.data,a);return _.each(b.updates,function(a,b){d.data[b]=a}),this.save(b)}}}(jQuery,this.recline.Backend.Memory);var costco=function(){function evalFunction(funcString){try{eval("var editFunc = "+funcString)}catch(e){return{errorMessage:e+""}}return editFunc}function previewTransform(a,b,c){for(var d=[],e=mapDocs($.extend(!0,{},a),b),f=0;f<e.docs.length;f++){var g=a[f],h=e.docs[f];h||(h={}),c?d.push({before:g[c],after:h[c]}):d.push({before:g,after:h})}return d}function mapDocs(a,b){var c=[],d=[],e=[],f=_.map(a,function(a){try{var f=b(_.clone(a))}catch(g){return e.push(a),void 0}return null===f?(f={_deleted:!0},c.push(f),d.push(a)):f&&!_.isEqual(f,a)&&c.push(f),f});return{updates:c,docs:f,deletes:d,failed:e}}return{evalFunction:evalFunction,previewTransform:previewTransform,mapDocs:mapDocs}}();this.recline=this.recline||{},this.recline.Model=this.recline.Model||{},function(a,b){b.Dataset=Backbone.Model.extend({constructor:function(){Backbone.Model.prototype.constructor.apply(this,arguments)},initialize:function(){_.bindAll(this,"query"),this.backend=null,this.get("backend")?this.backend=this._backendFromString(this.get("backend")):this.get("records")&&(this.backend=recline.Backend.Memory),this.fields=new b.FieldList,this.records=new b.RecordList,this._changes={deletes:[],updates:[],creates:[]},this.facets=new b.FacetList,this.recordCount=null,this.queryState=new b.Query,this.queryState.bind("change",this.query),this.queryState.bind("facet:add",this.query),this._store=this.backend,this.backend==recline.Backend.Memory&&this.fetch()},fetch:function(){function d(a){var d=b._normalizeRecordsAndFields(a.records,a.fields);a.useMemoryStore&&(b._store=new recline.Backend.Memory.Store(d.records,d.fields)),b.set(a.metadata),b.fields.reset(d.fields),b.query().done(function(){c.resolve(b)}).fail(function(a){c.reject(a)})}var b=this,c=a.Deferred();return this.backend!==recline.Backend.Memory?this.backend.fetch(this.toJSON()).done(d).fail(function(a){c.reject(a)}):d({records:this.get("records"),fields:this.get("fields"),useMemoryStore:!0}),c.promise()},_normalizeRecordsAndFields:function(a,b){if(!b&&a&&a.length>0&&(a[0]instanceof Array?(b=a[0],a=a.slice(1)):b=_.map(_.keys(a[0]),function(a){return{id:a}})),b&&b.length>0&&"string"==typeof b[0]){var c={};b=_.map(b,function(a){var d=a.replace(/^\s+|\s+$/g,"");for(""===d&&(d="_noname_",a=d);d in c;)c[a]+=1,d=a+c[a];return a in c||(c[a]=0),{id:d}})}return a&&a.length>0&&a[0]instanceof Array&&(a=_.map(a,function(a){var c={};return _.each(b,function(b,d){c[b.id]=a[d]}),c})),{fields:b,records:a}},save:function(){return this._store.save(this._changes,this.toJSON())},transform:function(a){var b=this;return this._store.transform?(this.trigger("recline:flash",{message:"Updating all visible docs. This could take a while...",persist:!0,loader:!0}),this._store.transform(a).done(function(){b.query(),b.trigger("recline:flash",{message:"Records updated successfully"})}),void 0):(alert("Transform is not supported with this backend: "+this.get("backend")),void 0)},query:function(b){var c=this,d=a.Deferred();this.trigger("query:start"),b&&this.queryState.set(b,{silent:!0});var e=this.queryState.toJSON();return this._store.query(e,this.toJSON()).done(function(a){c._handleQueryResult(a),c.trigger("query:done"),d.resolve(c.records)}).fail(function(a){c.trigger("query:fail",a),d.reject(a)}),d.promise()},_handleQueryResult:function(a){var c=this;c.recordCount=a.total;var d=_.map(a.hits,function(a){var d=new b.Record(a);return d.fields=c.fields,d.bind("change",function(a){c._changes.updates.push(a.toJSON())}),d.bind("destroy",function(a){c._changes.deletes.push(a.toJSON())}),d});if(c.records.reset(d),a.facets){var e=_.map(a.facets,function(a,c){return a.id=c,new b.Facet(a)});c.facets.reset(e)}},toTemplateJSON:function(){var a=this.toJSON();return a.recordCount=this.recordCount,a.fields=this.fields.toJSON(),a},getFieldsSummary:function(){var c=this,d=new b.Query;d.set({size:0}),this.fields.each(function(a){d.addFacet(a.id)});var e=a.Deferred();return this._store.query(d.toJSON(),this.toJSON()).done(function(a){a.facets&&_.each(a.facets,function(a,d){a.id=d;var e=new b.Facet(a);c.fields.get(d).facets.reset(e)}),e.resolve(a)}),e.promise()},recordSummary:function(a){return a.summary()},_backendFromString:function(a){var b=a.split("."),c=window;for(ii=0;ii<b.length&&c;ii++)c=c[b[ii]];if(c)return c;var d=null;return recline&&recline.Backend&&_.each(_.keys(recline.Backend),function(b){b.toLowerCase()===a.toLowerCase()&&(d=recline.Backend[b])}),d}}),b.Dataset.restore=function(a){var b=null;if("memory"===a.backend)var c={records:[{stub:"this is a stub dataset because we do not restore memory datasets"}]};else var c={url:a.url,backend:a.backend};return b=new recline.Model.Dataset(c)},b.Record=Backbone.Model.extend({constructor:function(){Backbone.Model.prototype.constructor.apply(this,arguments)},initialize:function(){_.bindAll(this,"getFieldValue")},getFieldValue:function(a){return val=this.getFieldValueUnrendered(a),a.renderer&&(val=a.renderer(val,a,this.toJSON())),val},getFieldValueUnrendered:function(a){var b=this.get(a.id);return a.deriver&&(b=a.deriver(b,a,this)),b},summary:function(){var b=this,c='<div class="recline-record-summary">';return this.fields.each(function(a){"id"!=a.id&&(c+='<div class="'+a.id+'"><strong>'+a.get("label")+"</strong>: "+b.getFieldValue(a)+"</div>")}),c+="</div>"},fetch:function(){},save:function(){},destroy:function(){this.trigger("destroy",this)}}),b.RecordList=Backbone.Collection.extend({constructor:function(){Backbone.Collection.prototype.constructor.apply(this,arguments)},model:b.Record}),b.Field=Backbone.Model.extend({constructor:function(){Backbone.Model.prototype.constructor.apply(this,arguments)},defaults:{label:null,type:"string",format:null,is_derived:!1},initialize:function(a,c){if("0"in a)throw new Error("Looks like you did not pass a proper hash with id to Field constructor");null===this.attributes.label&&this.set({label:this.id}),c&&(this.renderer=c.renderer,this.deriver=c.deriver),this.renderer||(this.renderer=this.defaultRenderers[this.get("type")]),this.facets=new b.FacetList},defaultRenderers:{object:function(a){return JSON.stringify(a)},geo_point:function(a){return JSON.stringify(a)},"float":function(a,b){var d=b.get("format");return"percentage"===d?a+"%":a},string:function(a,b){var d=b.get("format");if("markdown"===d){if("undefined"!=typeof Showdown){var e=new Showdown.converter;return out=e.makeHtml(a)}return a}return"plain"==d?a:(a&&"string"==typeof a&&(a=a.replace(/(https?:\/\/[^ ]+)/g,'<a href="$1">$1</a>')),a)}}}),b.FieldList=Backbone.Collection.extend({constructor:function(){Backbone.Collection.prototype.constructor.apply(this,arguments)},model:b.Field}),b.Query=Backbone.Model.extend({constructor:function(){Backbone.Model.prototype.constructor.apply(this,arguments)},defaults:function(){return{size:100,from:0,q:"",facets:{},filters:[]}},_filterTemplates:{term:{type:"term",field:"",term:""},geo_distance:{distance:10,unit:"km",point:{lon:0,lat:0}}},addFilter:function(a){var b=JSON.parse(JSON.stringify(a));_.keys(a).length<=2&&(b=_.extend(this._filterTemplates[a.type],b));var c=this.get("filters");c.push(b),this.trigger("change:filters:new-blank")},updateFilter:function(){},removeFilter:function(a){var b=this.get("filters");b.splice(a,1),this.set({filters:b}),this.trigger("change")},addFacet:function(a){var b=this.get("facets");_.contains(_.keys(b),a)||(b[a]={terms:{field:a}},this.set({facets:b},{silent:!0}),this.trigger("facet:add",this))},addHistogramFacet:function(a){var b=this.get("facets");b[a]={date_histogram:{field:a,interval:"day"}},this.set({facets:b},{silent:!0}),this.trigger("facet:add",this)}}),b.Facet=Backbone.Model.extend({constructor:function(){Backbone.Model.prototype.constructor.apply(this,arguments)},defaults:function(){return{_type:"terms",total:0,other:0,missing:0,terms:[]}}}),b.FacetList=Backbone.Collection.extend({constructor:function(){Backbone.Collection.prototype.constructor.apply(this,arguments)},model:b.Facet}),b.ObjectState=Backbone.Model.extend({}),Backbone.sync=function(a,b,c){return b.backend.sync(a,b,c)}}(jQuery,this.recline.Model),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){b.Graph=Backbone.View.extend({tagName:"div",className:"recline-graph",template:'   <div class="panel graph">     <div class="js-temp-notice alert alert-block">       <h3 class="alert-heading">Hey there!</h3>       <p>There\'s no graph here yet because we don\'t know what fields you\'d like to see plotted.</p>       <p>Please tell us by <strong>using the menu on the right</strong> and a graph will automatically appear.</p>     </div>   </div> </div> ',initialize:function(c){var d=this;this.el=a(this.el),_.bindAll(this,"render","redraw"),this.needToRedraw=!1,this.model.bind("change",this.render),this.model.fields.bind("reset",this.render),this.model.fields.bind("add",this.render),this.model.records.bind("add",this.redraw),this.model.records.bind("reset",this.redraw),this.bind("view:show",function(){this.needToRedraw&&d.redraw()});var e=_.extend({group:null,series:[],graphType:"lines-and-points"},c.state);this.state=new recline.Model.ObjectState(e),this.editor=new b.GraphControls({model:this.model,state:this.state.toJSON()}),this.editor.state.bind("change",function(){d.state.set(d.editor.state.toJSON()),d.redraw()}),this.elSidebar=this.editor.el,this.render()},render:function(){var c=this.model.toTemplateJSON(),d=Mustache.render(this.template,c);return a(this.el).html(d),this.$graph=this.el.find(".panel.graph"),this},redraw:function(){var b=!jQuery.expr.filters.hidden(this.el[0]);if(!b||0===this.model.records.length)return this.needToRedraw=!0,void 0;if(this.state.get("group")&&this.state.get("series")){this.$graph.width(this.el.width()-20);var c=this.createSeries(),d=this.getGraphOptions(this.state.attributes.graphType);this.plot=a.plot(this.$graph,c,d),this.setupTooltips()}},getGraphOptions:function(a){var b=this,c=function(a){if(b.model.records.models[a]){var c=b.model.records.models[a].get(b.state.attributes.group);return"number"==typeof c?a:c}return a},d={};"date"===this.model.fields.get(this.state.get("group")).get("type")&&(d.mode="time",d.timeformat="%y-%b");var e={lines:{series:{lines:{show:!0}},xaxis:d},points:{series:{points:{show:!0}},xaxis:d,grid:{hoverable:!0,clickable:!0}},"lines-and-points":{series:{points:{show:!0},lines:{show:!0}},xaxis:d,grid:{hoverable:!0,clickable:!0}},bars:{series:{lines:{show:!1},bars:{show:!0,barWidth:1,align:"center",fill:!0,horizontal:!0}},grid:{hoverable:!0,clickable:!0},yaxis:{tickSize:1,tickLength:1,tickFormatter:c,min:-.5,max:b.model.records.length-.5}}};return e[a]},setupTooltips:function(){function c(b,c,d){a('<div id="flot-tooltip">'+d+"</div>").css({position:"absolute",display:"none",top:c+5,left:b+5,border:"1px solid #fdd",padding:"2px","background-color":"#fee",opacity:.8}).appendTo("body").fadeIn(200)}var b=this,d=null;this.$graph.bind("plothover",function(e,f,g){if(g){if(d!=g.datapoint){d=g.datapoint,a("#flot-tooltip").remove();var h=g.datapoint[0],i=g.datapoint[1];if("bars"===b.state.attributes.graphType){var j=h;h=i,i=j}h=b.model.records.models[h]?b.model.records.models[h].get(b.state.attributes.group):h.toFixed(2),i=i.toFixed(2);var k=b.model.fields.get(b.state.attributes.group),l="date"===k.get("type");l&&(h=new Date(parseInt(h)).toLocaleDateString());var m=_.template("<%= group %> = <%= x %>, <%= series %> = <%= y %>",{group:b.state.attributes.group,x:h,series:g.series.label,y:i});c(g.pageX,g.pageY,m)}}else a("#flot-tooltip").remove(),d=null})},createSeries:function(){var a=this,b=[];return _.each(this.state.attributes.series,function(c){var d=[];_.each(a.model.records.models,function(b,e){var f=a.model.fields.get(a.state.attributes.group),g=b.getFieldValue(f),h="date"===f.get("type");h&&(g=moment(g).toDate());var i=a.model.fields.get(c),j=b.getFieldValue(i);"string"==typeof g&&(g=parseFloat(g),isNaN(g)&&(g=e)),"bars"==a.state.attributes.graphType?d.push([j,g]):d.push([g,j])}),b.push({data:d,label:c})}),b}}),b.GraphControls=Backbone.View.extend({className:"editor",template:'   <div class="editor">     <form class="form-stacked">       <div class="clearfix">         <label>Graph Type</label>         <div class="input editor-type">           <select>           <option value="lines-and-points">Lines and Points</option>           <option value="lines">Lines</option>           <option value="points">Points</option>           <option value="bars">Bars</option>           </select>         </div>         <label>Group Column (x-axis)</label>         <div class="input editor-group">           <select>           <option value="">Please choose ...</option>           {{#fields}}           <option value="{{id}}">{{label}}</option>           {{/fields}}           </select>         </div>         <div class="editor-series-group">         </div>       </div>       <div class="editor-buttons">         <button class="btn editor-add">Add Series</button>       </div>       <div class="editor-buttons editor-submit" comment="hidden temporarily" style="display: none;">         <button class="editor-save">Save</button>         <input type="hidden" class="editor-id" value="chart-1" />       </div>     </form>   </div> ',templateSeriesEditor:'     <div class="editor-series js-series-{{seriesIndex}}">       <label>Series <span>{{seriesName}} (y-axis)</span>         [<a href="#remove" class="action-remove-series">Remove</a>]       </label>       <div class="input">         <select>         {{#fields}}         <option value="{{id}}">{{label}}</option>         {{/fields}}         </select>       </div>     </div>   ',events:{"change form select":"onEditorSubmit","click .editor-add":"_onAddSeries","click .action-remove-series":"removeSeries"},initialize:function(b){this.el=a(this.el),_.bindAll(this,"render"),this.model.fields.bind("reset",this.render),this.model.fields.bind("add",this.render),this.state=new recline.Model.ObjectState(b.state),this.render()},render:function(){var a=this,b=this.model.toTemplateJSON(),c=Mustache.render(this.template,b);this.el.html(c),this.state.get("graphType")&&this._selectOption(".editor-type",this.state.get("graphType")),this.state.get("group")&&this._selectOption(".editor-group",this.state.get("group"));var d=[""];return this.state.get("series").length>0&&(d=this.state.get("series")),_.each(d,function(b,c){a.addSeries(c),a._selectOption(".editor-series.js-series-"+c,b)}),this},_selectOption:function(b,c){var d=this.el.find(b+" select > option");d&&d.each(function(){return this.value==c?(a(this).attr("selected","selected"),!1):void 0})},onEditorSubmit:function(){this.el.find(".editor-group select");var e=this.el.find(".editor-series select"),f=e.map(function(){return a(this).val()}),g={series:a.makeArray(f),group:this.el.find(".editor-group select").val(),graphType:this.el.find(".editor-type select").val()};this.state.set(g)},addSeries:function(a){var b=_.extend({seriesIndex:a,seriesName:String.fromCharCode(a+64+1)},this.model.toTemplateJSON()),c=Mustache.render(this.templateSeriesEditor,b);return this.el.find(".editor-series-group").append(c),this},_onAddSeries:function(a){a.preventDefault(),this.addSeries(this.state.get("series").length)},removeSeries:function(b){b.preventDefault();var c=a(b.target);c.parent().parent().remove(),this.onEditorSubmit()}})}(jQuery,recline.View),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){b.Grid=Backbone.View.extend({tagName:"div",className:"recline-grid-container",initialize:function(b){this.el=a(this.el),_.bindAll(this,"render","onHorizontalScroll"),this.model.records.bind("add",this.render),this.model.records.bind("reset",this.render),this.model.records.bind("remove",this.render),this.tempState={};var d=_.extend({hiddenFields:[]},b.state);this.state=new recline.Model.ObjectState(d)},events:{},setColumnSort:function(a){var b=[{}];b[0][this.tempState.currentColumn]={order:a},this.model.query({sort:b})},hideColumn:function(){var a=this.state.get("hiddenFields");a.push(this.tempState.currentColumn),this.state.set({hiddenFields:a}),this.state.trigger("change"),this.render()},showColumn:function(b){var c=_.without(this.state.get("hiddenFields"),a(b.target).data("column"));this.state.set({hiddenFields:c}),this.render()},onHorizontalScroll:function(b){var c=a(b.target).scrollLeft();this.el.find(".recline-grid thead tr").scrollLeft(c)},template:'     <div class="table-container">     <table class="recline-grid table-striped table-condensed" cellspacing="0">       <thead class="fixed-header">         <tr>           {{#fields}}             <th class="column-header {{#hidden}}hidden{{/hidden}}" data-field="{{id}}" style="width: {{width}}px; max-width: {{width}}px; min-width: {{width}}px;" title="{{label}}">               <span class="column-header-name">{{label}}</span>             </th>           {{/fields}}           <th class="last-header" style="width: {{lastHeaderWidth}}px; max-width: {{lastHeaderWidth}}px; min-width: {{lastHeaderWidth}}px; padding: 0; margin: 0;"></th>         </tr>       </thead>       <tbody class="scroll-content"></tbody>     </table>     </div>   ',toTemplateJSON:function(){var b=this.model.toJSON();return b.notEmpty=this.fields.length>0,b.fields=_.map(this.fields,function(a){return a.toJSON()}),b.lastHeaderWidth=this.scrollbarDimensions.width-2,b},render:function(){var c=this;this.fields=this.model.fields.filter(function(a){return-1==_.indexOf(c.state.get("hiddenFields"),a.id)}),this.scrollbarDimensions=this.scrollbarDimensions||this._scrollbarSize();var d=this.fields.length,e=c.el.width()-20-10*d-this.scrollbarDimensions.width,f=parseInt(Math.max(50,e/d)),g=Math.max(e-d*f,0);_.each(this.fields,function(a,b){0==b?a.set({width:f+g}):a.set({width:f})});var h=Mustache.render(this.template,this.toTemplateJSON());this.el.html(h),this.model.records.forEach(function(d){var e=a("<tr />");c.el.find("tbody").append(e);var f=new b.GridRow({model:d,el:e,fields:c.fields});f.render()});var i=this.el.find("tbody")[0];return i.scrollHeight<=i.offsetHeight&&this.el.find("th.last-header").hide(),this.el.find(".recline-grid").toggleClass("no-hidden",0===c.state.get("hiddenFields").length),this.el.find(".recline-grid tbody").scroll(this.onHorizontalScroll),this},_scrollbarSize:function(){var b=a("<div style='position:absolute; top:-10000px; left:-10000px; width:100px; height:100px; overflow:scroll;'></div>").appendTo("body"),c={width:b.width()-b[0].clientWidth+1,height:b.height()-b[0].clientHeight};return b.remove(),c}}),b.GridRow=Backbone.View.extend({initialize:function(b){_.bindAll(this,"render"),this._fields=b.fields,this.el=a(this.el),this.model.bind("change",this.render)},template:'       {{#cells}}       <td data-field="{{field}}" style="width: {{width}}px; max-width: {{width}}px; min-width: {{width}}px;">         <div class="data-table-cell-content">           <a href="javascript:{}" class="data-table-cell-edit" title="Edit this cell">&nbsp;</a>           <div class="data-table-cell-value">{{{value}}}</div>         </div>       </td>       {{/cells}}     ',events:{"click .data-table-cell-edit":"onEditClick","click .data-table-cell-editor .okButton":"onEditorOK","click .data-table-cell-editor .cancelButton":"onEditorCancel"},toTemplateJSON:function(){var b=this.model,c=this._fields.map(function(a){return{field:a.id,width:a.get("width"),value:b.getFieldValue(a)}});return{id:this.id,cells:c}},render:function(){this.el.attr("data-id",this.model.id);var b=Mustache.render(this.template,this.toTemplateJSON());return a(this.el).html(b),this},cellEditorTemplate:'     <div class="menu-container data-table-cell-editor">       <textarea class="data-table-cell-editor-editor" bind="textarea">{{value}}</textarea>       <div id="data-table-cell-editor-actions">         <div class="data-table-cell-editor-action">           <button class="okButton btn primary">Update</button>           <button class="cancelButton btn danger">Cancel</button>         </div>       </div>     </div>   ',onEditClick:function(b){var c=this.el.find(".data-table-cell-editor-editor");c.length>0&&c.parents(".data-table-cell-value").html(c.text()).siblings(".data-table-cell-edit").removeClass("hidden"),a(b.target).addClass("hidden");var d=a(b.target).siblings(".data-table-cell-value");d.data("previousContents",d.text());var e=Mustache.render(this.cellEditorTemplate,{value:d.text()});d.html(e)},onEditorOK:function(b){var d=a(b.target);d.parents("tr").attr("data-id");var f=d.parents("td").attr("data-field"),g=d.parents(".data-table-cell-editor").find(".data-table-cell-editor-editor").val(),h={};h[f]=g,this.model.set(h),this.trigger("recline:flash",{message:"Updating row...",loader:!0}),this.model.save().then(function(){this.trigger("recline:flash",{message:"Row updated successfully",category:"success"})}).fail(function(){this.trigger("recline:flash",{message:"Error saving row",category:"error",persist:!0})})},onEditorCancel:function(b){var c=a(b.target).parents(".data-table-cell-value");c.html(c.data("previousContents")).siblings(".data-table-cell-edit").removeClass("hidden")}})}(jQuery,recline.View),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){b.Map=Backbone.View.extend({tagName:"div",className:"recline-map",template:'     <div class="panel map"></div> ',latitudeFieldNames:["lat","latitude"],longitudeFieldNames:["lon","longitude"],geometryFieldNames:["geojson","geom","the_geom","geometry","spatial","location","geo","lonlat"],initialize:function(c){var d=this;this.el=a(this.el),this.model.fields.bind("change",function(){d._setupGeometryField(),d.render()}),this.model.records.bind("add",function(a){d.redraw("add",a)}),this.model.records.bind("change",function(a){d.redraw("remove",a),d.redraw("add",a)}),this.model.records.bind("remove",function(a){d.redraw("remove",a)}),this.model.records.bind("reset",function(){d.redraw("reset")}),this.bind("view:show",function(){d.map&&(d.map.invalidateSize(),d._zoomPending&&d.state.get("autoZoom")&&(d._zoomToFeatures(),d._zoomPending=!1)),d.visible=!0}),this.bind("view:hide",function(){d.visible=!1});var e=_.extend({geomField:null,lonField:null,latField:null,autoZoom:!0},c.state);this.state=new recline.Model.ObjectState(e),this.menu=new b.MapMenu({model:this.model,state:this.state.toJSON()}),this.menu.state.bind("change",function(){d.state.set(d.menu.state.toJSON()),d.redraw()}),this.elSidebar=this.menu.el,this.mapReady=!1,this.render(),this.redraw()},render:function(){return htmls=Mustache.render(this.template,this.model.toTemplateJSON()),a(this.el).html(htmls),this.$map=this.el.find(".panel.map"),this},redraw:function(a,b){var c=this;a=a||"refresh",c._geomReady()||c._setupGeometryField(),c.mapReady||c._setupMap(),this._geomReady()&&this.mapReady&&("reset"==a||"refresh"==a?(this.features.clearLayers(),this._add(this.model.records.models)):"add"==a&&b?this._add(b):"remove"==a&&b&&this._remove(b),this.state.get("autoZoom")&&(this.visible?this._zoomToFeatures():this._zoomPending=!0))},_geomReady:function(){return Boolean(this.state.get("geomField")||this.state.get("latField")&&this.state.get("lonField"))},_add:function(a){var b=this;a instanceof Array||(a=[a]);var c=0,d=0;_.every(a,function(a){c+=1;var e=b._getGeometryFromRecord(a);if("undefined"==typeof e||null===e)return!0;if(e instanceof Object){html="";for(key in a.attributes)b.state.get("geomField")&&key==b.state.get("geomField")||(html+="<div><strong>"+key+"</strong>: "+a.attributes[key]+"</div>");e.properties={popupContent:html},e.properties.cid=a.cid;
try{b.features.addGeoJSON(e)}catch(f){d+=1;var g="Wrong geometry value";f.message&&(g+=" ("+f.message+")"),10>=d&&b.trigger("recline:flash",{message:g,category:"error"})}}else d+=1,10>=d&&b.trigger("recline:flash",{message:"Wrong geometry value",category:"error"});return!0})},_remove:function(a){var b=this;a instanceof Array||(a=[a]),_.each(a,function(a){for(key in b.features._layers)b.features._layers[key].cid==a.cid&&b.features.removeLayer(b.features._layers[key])})},_getGeometryFromRecord:function(b){if(this.state.get("geomField")){var c=b.get(this.state.get("geomField"));if("string"==typeof c)try{c=a.parseJSON(c)}catch(d){}if("string"==typeof c){c=c.replace("(","").replace(")","");var e=c.split(","),f=parseFloat(e[0]),g=parseFloat(e[1]);return isNaN(g)||isNaN(parseFloat(f))?null:{type:"Point",coordinates:[g,f]}}return c&&c.slice?{type:"Point",coordinates:[c[0],c[1]]}:c&&c.lat?{type:"Point",coordinates:[c.lon||c.lng,c.lat]}:c}if(this.state.get("lonField")&&this.state.get("latField")){var g=b.get(this.state.get("lonField")),f=b.get(this.state.get("latField"));if(!isNaN(parseFloat(g))&&!isNaN(parseFloat(f)))return{type:"Point",coordinates:[g,f]}}return null},_setupGeometryField:function(){this._geomReady()||(this.state.set({geomField:this._checkField(this.geometryFieldNames),latField:this._checkField(this.latitudeFieldNames),lonField:this._checkField(this.longitudeFieldNames)}),this.menu.state.set(this.state.toJSON()))},_checkField:function(a){for(var c=this.model.fields.pluck("id"),d=0;d<a.length;d++)for(var e=0;e<c.length;e++)if(c[e].toLowerCase()==a[d].toLowerCase())return c[e];return null},_zoomToFeatures:function(){var a=this.features.getBounds();a?this.map.fitBounds(a):this.map.setView(new L.LatLng(0,0),2)},_setupMap:function(){this.map=new L.Map(this.$map.get(0));var a="http://otile{s}.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.png",b='Map data &copy; 2011 OpenStreetMap contributors, Tiles Courtesy of <a href="http://www.mapquest.com/" target="_blank">MapQuest</a> <img src="http://developer.mapquest.com/content/osm/mq_logo.png">',c=new L.TileLayer(a,{maxZoom:18,attribution:b,subdomains:"1234"});this.map.addLayer(c),this.features=new L.GeoJSON,this.features.on("featureparse",function(a){a.properties&&a.properties.popupContent&&a.layer.bindPopup(a.properties.popupContent),a.properties&&a.properties.cid&&(a.layer.cid=a.properties.cid)}),this.features.getBounds=function(){var a=new L.LatLngBounds;return this._iterateLayers(function(b){b instanceof L.Marker?a.extend(b.getLatLng()):b.getBounds&&(a.extend(b.getBounds().getNorthEast()),a.extend(b.getBounds().getSouthWest()))},this),"undefined"!=typeof a.getNorthEast()?a:null},this.map.addLayer(this.features),this.map.setView(new L.LatLng(0,0),2),this.mapReady=!0},_selectOption:function(b,c){var d=a("."+b+" > select > option");d&&d.each(function(){return this.value==c?(a(this).attr("selected","selected"),!1):void 0})}}),b.MapMenu=Backbone.View.extend({className:"editor",template:'     <form class="form-stacked">       <div class="clearfix">         <div class="editor-field-type">             <label class="radio">               <input type="radio" id="editor-field-type-latlon" name="editor-field-type" value="latlon" checked="checked"/>               Latitude / Longitude fields</label>             <label class="radio">               <input type="radio" id="editor-field-type-geom" name="editor-field-type" value="geom" />               GeoJSON field</label>         </div>         <div class="editor-field-type-latlon">           <label>Latitude field</label>           <div class="input editor-lat-field">             <select>             <option value=""></option>             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}             </select>           </div>           <label>Longitude field</label>           <div class="input editor-lon-field">             <select>             <option value=""></option>             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}             </select>           </div>         </div>         <div class="editor-field-type-geom" style="display:none">           <label>Geometry field (GeoJSON)</label>           <div class="input editor-geom-field">             <select>             <option value=""></option>             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}             </select>           </div>         </div>       </div>       <div class="editor-buttons">         <button class="btn editor-update-map">Update</button>       </div>       <div class="editor-options" >         <label class="checkbox">           <input type="checkbox" id="editor-auto-zoom" checked="checked" />           Auto zoom to features</label>       </div>       <input type="hidden" class="editor-id" value="map-1" />       </div>     </form> ',events:{"click .editor-update-map":"onEditorSubmit","change .editor-field-type":"onFieldTypeChange","click #editor-auto-zoom":"onAutoZoomChange"},initialize:function(b){this.el=a(this.el),_.bindAll(this,"render"),this.model.fields.bind("change",this.render),this.state=new recline.Model.ObjectState(b.state),this.state.bind("change",this.render),this.render()},render:function(){return htmls=Mustache.render(this.template,this.model.toTemplateJSON()),a(this.el).html(htmls),this._geomReady()&&this.model.fields.length&&(this.state.get("geomField")?(this._selectOption("editor-geom-field",this.state.get("geomField")),this.el.find("#editor-field-type-geom").attr("checked","checked").change()):(this._selectOption("editor-lon-field",this.state.get("lonField")),this._selectOption("editor-lat-field",this.state.get("latField")),this.el.find("#editor-field-type-latlon").attr("checked","checked").change())),this.state.get("autoZoom")?this.el.find("#editor-auto-zoom").attr("checked","checked"):this.el.find("#editor-auto-zoom").removeAttr("checked"),this},_geomReady:function(){return Boolean(this.state.get("geomField")||this.state.get("latField")&&this.state.get("lonField"))},onEditorSubmit:function(a){return a.preventDefault(),this.el.find("#editor-field-type-geom").attr("checked")?this.state.set({geomField:this.el.find(".editor-geom-field > select > option:selected").val(),lonField:null,latField:null}):this.state.set({geomField:null,lonField:this.el.find(".editor-lon-field > select > option:selected").val(),latField:this.el.find(".editor-lat-field > select > option:selected").val()}),!1},onFieldTypeChange:function(a){"geom"==a.target.value?(this.el.find(".editor-field-type-geom").show(),this.el.find(".editor-field-type-latlon").hide()):(this.el.find(".editor-field-type-geom").hide(),this.el.find(".editor-field-type-latlon").show())},onAutoZoomChange:function(){this.state.set({autoZoom:!this.state.get("autoZoom")})},_selectOption:function(b,c){var d=this.el.find("."+b+" > select > option");d&&d.each(function(){return this.value==c?(a(this).attr("selected","selected"),!1):void 0})}})}(jQuery,recline.View),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){b.MultiView=Backbone.View.extend({template:'   <div class="recline-data-explorer">     <div class="alert-messages"></div>         <div class="header">       <div class="navigation">         <div class="btn-group" data-toggle="buttons-radio">         {{#views}}         <a href="#{{id}}" data-view="{{id}}" class="btn">{{label}}</a>         {{/views}}         </div>       </div>       <div class="recline-results-info">         <span class="doc-count">{{recordCount}}</span> records      </div>       <div class="menu-right">         <div class="btn-group" data-toggle="buttons-checkbox">           <a href="#" class="btn active" data-action="filters">Filters</a>           <a href="#" class="btn active" data-action="fields">Fields</a>         </div>       </div>       <div class="query-editor-here" style="display:inline;"></div>       <div class="clearfix"></div>     </div>     <div class="data-view-sidebar"></div>     <div class="data-view-container"></div>   </div>   ',events:{"click .menu-right a":"_onMenuClick","click .navigation a":"_onSwitchView"},initialize:function(c){var d=this;this.el=a(this.el),this._setupState(c.state),this.pageViews=c.views?c.views:[{id:"grid",label:"Grid",view:new b.SlickGrid({model:this.model,state:this.state.get("view-grid")})},{id:"graph",label:"Graph",view:new b.Graph({model:this.model,state:this.state.get("view-graph")})},{id:"map",label:"Map",view:new b.Map({model:this.model,state:this.state.get("view-map")})},{id:"timeline",label:"Timeline",view:new b.Timeline({model:this.model,state:this.state.get("view-timeline")})},{id:"transform",label:"Transform",view:new b.Transform({model:this.model})}],this.render(),this._bindStateChanges(),this._bindFlashNotifications(),this.state.get("readOnly")&&this.setReadOnly(),this.state.get("currentView")?this.updateNav(this.state.get("currentView")):this.updateNav(this.pageViews[0].id),this.model.bind("query:start",function(){d.notify({loader:!0,persist:!0})}),this.model.bind("query:done",function(){d.clearNotifications(),d.el.find(".doc-count").text(d.model.recordCount||"Unknown")}),this.model.bind("query:fail",function(a){d.clearNotifications();var b="";"string"==typeof a?b=a:"object"==typeof a?(a.title&&(b=a.title+": "),a.message&&(b+=a.message)):b="There was an error querying the backend",d.notify({message:b,category:"error",persist:!0})}),this.model.queryState.set(d.state.get("query"),{silent:!0}),this.model.fetch().fail(function(a){d.notify({message:a.message,category:"error",persist:!0})})},setReadOnly:function(){this.el.addClass("recline-read-only")},render:function(){var b=this.model.toTemplateJSON();b.views=this.pageViews;var c=Mustache.render(this.template,b);a(this.el).html(c);var d=this.el.find(".data-view-container"),e=this.el.find(".data-view-sidebar");_.each(this.pageViews,function(a){d.append(a.view.el),a.view.elSidebar&&e.append(a.view.elSidebar)});var f=new recline.View.Pager({model:this.model.queryState});this.el.find(".recline-results-info").after(f.el);var g=new recline.View.QueryEditor({model:this.model.queryState});this.el.find(".query-editor-here").append(g.el);var h=new recline.View.FilterEditor({model:this.model});this.$filterEditor=h.el,e.append(h.el);var i=new recline.View.Fields({model:this.model});this.$fieldsView=i.el,e.append(i.el)},updateNav:function(a){this.el.find(".navigation a").removeClass("active");var b=this.el.find('.navigation a[data-view="'+a+'"]');b.addClass("active"),_.each(this.pageViews,function(b){b.id===a?(b.view.el.show(),b.view.elSidebar&&b.view.elSidebar.show(),b.view.trigger("view:show")):(b.view.el.hide(),b.view.elSidebar&&b.view.elSidebar.hide(),b.view.trigger("view:hide"))})},_onMenuClick:function(b){b.preventDefault();var c=a(b.target).attr("data-action");"filters"===c?this.$filterEditor.toggle():"fields"===c?this.$fieldsView.toggle():"transform"===c&&this.transformView.el.toggle()},_onSwitchView:function(b){b.preventDefault();var c=a(b.target).attr("data-view");this.updateNav(c),this.state.set({currentView:c})},_setupState:function(a){var c=this,d=b.parseHashQueryString(),e=d.reclineQuery;e=e?JSON.parse(e):c.model.queryState.toJSON();var f=d["view-graph"]||d.graph;f=f?JSON.parse(f):{};var g=_.extend({query:e,"view-graph":f,backend:this.model.backend.__type__,url:this.model.get("url"),currentView:null,readOnly:!1},a);this.state=new recline.Model.ObjectState(g)},_bindStateChanges:function(){var a=this;this.model.queryState.bind("change",function(){a.state.set({query:a.model.queryState.toJSON()})}),_.each(this.pageViews,function(b){if(b.view.state&&b.view.state.bind){var c={};c["view-"+b.id]=b.view.state.toJSON(),a.state.set(c),b.view.state.bind("change",function(){var c={};c["view-"+b.id]=b.view.state.toJSON(),a.state.set(c,{silent:!0}),a.state.trigger("change")})}})},_bindFlashNotifications:function(){var a=this;_.each(this.pageViews,function(b){b.view.bind("recline:flash",function(b){a.notify(b)})})},notify:function(b){var c=_.extend({message:"Loading",category:"warning",loader:!1},b);if(c.loader)var d='         <div class="alert alert-info alert-loader">           {{message}}           <span class="notification-loader">&nbsp;</span>         </div>';else var d='         <div class="alert alert-{{category}} fade in" data-alert="alert"><a class="close" data-dismiss="alert" href="#">\xd7</a>           {{message}}         </div>';var e=a(Mustache.render(d,c));e=a(e).appendTo(a(".recline-data-explorer .alert-messages")),b.persist||setTimeout(function(){a(e).fadeOut(1e3,function(){a(this).remove()})},1e3)},clearNotifications:function(){var b=a(".recline-data-explorer .alert-messages .alert");b.fadeOut(1500,function(){a(this).remove()})}}),b.MultiView.restore=function(a){var c=recline.Model.Dataset.restore(a),d=new b.MultiView({model:c,state:a});return d};var c=/^([^?]+)(\?.*)?/;b.parseHashUrl=function(a){var b=c.exec(a);return null===b?{}:{path:b[1],query:b[2]||""}},b.parseQueryString=function(a){if(!a)return{};var c,b={},d=function(a){return unescape(a.replace(/\+/g," "))},e=/([^&=]+)=?([^&]*)/g;for(a&&a.length&&"?"===a[0]&&(a=a.slice(1));c=e.exec(a);)b[d(c[1])]=d(c[2]);return b},b.parseHashQueryString=function(){return q=b.parseHashUrl(window.location.hash).query,b.parseQueryString(q)},b.composeQueryString=function(b){var c="?",d=[];return a.each(b,function(a,b){"object"==typeof b&&(b=JSON.stringify(b)),d.push(a+"="+encodeURIComponent(b))}),c+=d.join("&")},b.getNewHashForQueryString=function(a){var c=b.composeQueryString(a);return window.location.hash?window.location.hash.split("?")[0].slice(1)+c:c},b.setHashQueryString=function(a){window.location.hash=b.getNewHashForQueryString(a)}}(jQuery,recline.View),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){b.SlickGrid=Backbone.View.extend({tagName:"div",className:"recline-slickgrid",initialize:function(b){var c=this;this.el=a(this.el),this.el.addClass("recline-slickgrid"),_.bindAll(this,"render"),this.model.records.bind("add",this.render),this.model.records.bind("reset",this.render),this.model.records.bind("remove",this.render);var d=_.extend({hiddenColumns:[],columnsOrder:[],columnsSort:{},columnsWidth:[],fitColumns:!1},b.state);this.state=new recline.Model.ObjectState(d),this.bind("view:show",function(){c.rendered||(c.grid||c.render(),c.grid.init(),c.rendered=!0),c.visible=!0}),this.bind("view:hide",function(){c.visible=!1})},events:{},render:function(){var a=this,b={enableCellNavigation:!0,enableColumnReorder:!0,explicitInitialization:!0,syncColumnCellResize:!0,forceFitColumns:this.state.get("fitColumns")},c=[],d=function(b,c,d,e,f){var g=a.model.fields.get(e.id);return g.renderer?g.renderer(d,g,f):d};_.each(this.model.fields.toJSON(),function(b){var e={id:b.id,name:b.label,field:b.id,sortable:!0,minWidth:80,formatter:d},f=_.find(a.state.get("columnsWidth"),function(a){return a.column==b.id});f&&(e.width=f.width),c.push(e)});var e=c.filter(function(b){return-1==_.indexOf(a.state.get("hiddenColumns"),b.id)});this.state.get("columnsOrder")&&(e=e.sort(function(b,c){return _.indexOf(a.state.get("columnsOrder"),b.id)>_.indexOf(a.state.get("columnsOrder"),c.id)?1:-1}),c=c.sort(function(b,c){return _.indexOf(a.state.get("columnsOrder"),b.id)>_.indexOf(a.state.get("columnsOrder"),c.id)?1:-1}));for(var f=[],g=c.length-1;g>=0;g--)-1==_.indexOf(_.pluck(e,"id"),c[g].id)&&f.push(c.splice(g,1)[0]);c=c.concat(f);var h=[];this.model.records.each(function(b){var c={};a.model.fields.each(function(a){c[a.id]=b.getFieldValueUnrendered(a)}),h.push(c)}),this.grid=new Slick.Grid(this.el,h,e,b);var i=this.model.queryState.get("sort");if(i){var j=_.keys(i[0])[0],k=!("desc"==i[0][j].order);this.grid.setSortColumn(j,k)}return this.grid.onSort.subscribe(function(b,c){var d=c.sortAsc?"asc":"desc",e=[{}];e[0][c.sortCol.field]={order:d},a.model.query({sort:e})}),this.grid.onColumnsReordered.subscribe(function(){a.state.set({columnsOrder:_.pluck(a.grid.getColumns(),"id")})}),this.grid.onColumnsResized.subscribe(function(b,c){var d=c.grid.getColumns(),e=c.grid.getOptions().defaultColumnWidth,f=[];_.each(d,function(a){a.width!=e&&f.push({column:a.id,width:a.width})}),a.state.set({columnsWidth:f})}),new Slick.Controls.ColumnPicker(c,this.grid,_.extend(b,{state:this.state})),a.visible?(a.grid.init(),a.rendered=!0):a.rendered=!1,this}})}(jQuery,recline.View),function(a){function b(b,c,d){function h(){c.onHeaderContextMenu.subscribe(i),d=a.extend({},g,d),e=a('<ul class="dropdown-menu slick-contextmenu" style="display:none;position:absolute;z-index:20;" />').appendTo(document.body),e.bind("mouseleave",function(){a(this).fadeOut(d.fadeSpeed)}),e.bind("click",j)}function i(g){g.preventDefault(),e.empty(),f=[];for(var i,j,k=0;k<b.length;k++)i=a("<li />").appendTo(e),j=a('<input type="checkbox" />').data("column-id",b[k].id).attr("id","slick-column-vis-"+b[k].id),f.push(j),null!=c.getColumnIndex(b[k].id)&&j.attr("checked","checked"),j.appendTo(i),a("<label />").text(b[k].name).attr("for","slick-column-vis-"+b[k].id).appendTo(i);a("<li/>").addClass("divider").appendTo(e),i=a("<li />").data("option","autoresize").appendTo(e),j=a('<input type="checkbox" />').data("option","autoresize").attr("id","slick-option-autoresize"),j.appendTo(i),a("<label />").text("Force fit columns").attr("for","slick-option-autoresize").appendTo(i),c.getOptions().forceFitColumns&&j.attr("checked","checked"),e.css("top",g.pageY-10).css("left",g.pageX-10).fadeIn(d.fadeSpeed)}function j(e){if("autoresize"==a(e.target).data("option")){var g;if(a(e.target).is("li")){var h=a(e.target).find("input").first();g=!h.is(":checked"),h.attr("checked",g)}else g=e.target.checked;return g?(c.setOptions({forceFitColumns:!0}),c.autosizeColumns()):c.setOptions({forceFitColumns:!1}),d.state.set({fitColumns:g}),void 0}if(a(e.target).is("li")&&!a(e.target).hasClass("divider")||a(e.target).is("input")){if(a(e.target).is("li")){var h=a(e.target).find("input").first();h.attr("checked",!h.is(":checked"))}var i=[],j=[];if(a.each(f,function(c){a(this).is(":checked")?i.push(b[c]):j.push(b[c].id)}),!i.length)return a(e.target).attr("checked","checked"),void 0;c.setColumns(i),d.state.set({hiddenColumns:j})}}var e,f,g={fadeSpeed:250};h()}a.extend(!0,window,{Slick:{Controls:{ColumnPicker:b}}})}(jQuery),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){"undefined"!=typeof VMM&&(VMM.debug=!1),b.Timeline=Backbone.View.extend({tagName:"div",template:'     <div class="recline-timeline">       <div id="vmm-timeline-id"></div>     </div>   ',startFieldNames:["date","startdate","start","start-date"],endFieldNames:["end","endDate"],elementId:"#vmm-timeline-id",initialize:function(b){var c=this;this.el=a(this.el),this.timeline=new VMM.Timeline,this._timelineIsInitialized=!1,this.bind("view:show",function(){c._timelineIsInitialized===!1&&c._initTimeline()}),this.model.fields.bind("reset",function(){c._setupTemporalField()}),this.model.records.bind("all",function(){c.reloadData()});var d=_.extend({startField:null,endField:null},b.state);this.state=new recline.Model.ObjectState(d),this._setupTemporalField(),this.render(),a(this.elementId).length>0&&this._initTimeline()},render:function(){var a={},b=Mustache.render(this.template,a);this.el.html(b)},_initTimeline:function(){var a=this.el.find(this.elementId),b=Math.max(this.el.width(),this.el.find(".recline-timeline").width());b&&a.width(b);var c={},d=this._timelineJSON();this.timeline.init(d,this.elementId,c),this._timelineIsInitialized=!0},reloadData:function(){if(this._timelineIsInitialized){var a=this._timelineJSON();this.timeline.reload(a)}},convertRecord:function(a,b){return this._convertRecord(a,b)},_convertRecord:function(a){var c=this._parseDate(a.get(this.state.get("startField"))),d=this._parseDate(a.get(this.state.get("endField")));if(c){var e={startDate:c,endDate:d,headline:String(a.get("title")||""),text:a.get("description")||a.summary()};return e}return null},_timelineJSON:function(){var a=this,b={timeline:{type:"default",headline:"",date:[]}};if(this.model.records.each(function(c){var d=a.convertRecord(c,a.fields);d&&b.timeline.date.push(d)}),0===b.timeline.date.length){var c={startDate:"2000,1,1",headline:"No data to show!"};b.timeline.date.push(c)}return b},_parseDate:function(a){if(!a)return null;var b=a.trim();return b=b.replace(/(\d)th/g,"$1"),b=b.replace(/(\d)st/g,"$1"),b=b.trim()?moment(b):null,"Invalid Date"==b.toDate()?null:(b=b.subtract("minutes",b.zone()),b.toDate())},_setupTemporalField:function(){this.state.set({startField:this._checkField(this.startFieldNames),endField:this._checkField(this.endFieldNames)})},_checkField:function(a){for(var b=this.model.fields.pluck("id"),c=0;c<a.length;c++)for(var d=0;d<b.length;d++)if(b[d].toLowerCase()==a[c].toLowerCase())return b[d];return null}})}(jQuery,recline.View),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){b.Transform=Backbone.View.extend({className:"recline-transform",template:'     <div class="script">       <h2>         Transform Script         <button class="okButton btn btn-primary">Run on all records</button>       </h2>       <textarea class="expression-preview-code"></textarea>     </div>     <div class="expression-preview-parsing-status">       No syntax error.     </div>     <div class="preview">       <h3>Preview</h3>       <div class="expression-preview-container"></div>     </div>   ',events:{"click .okButton":"onSubmit","keydown .expression-preview-code":"onEditorKeydown"},initialize:function(){this.el=a(this.el),this.render()},render:function(){var a=Mustache.render(this.template);this.el.html(a);var b=this.el.find(".expression-preview-code");if(this.model.fields.length>0)var c=this.model.fields.models[0].id;else var c="unknown";b.val("function(doc) {\n  doc['"+c+"'] = doc['"+c+"'];\n  return doc;\n}"),b.keydown()},onSubmit:function(){var c=this.el.find(".expression-preview-code").val(),d=costco.evalFunction(c);return d.errorMessage?(this.trigger("recline:flash",{message:"Error with function! "+d.errorMessage}),void 0):(this.model.transform(d),void 0)},editPreviewTemplate:'       <table class="table table-condensed table-bordered before-after">       <thead>       <tr>         <th>Field</th>         <th>Before</th>         <th>After</th>       </tr>       </thead>       <tbody>       {{#row}}       <tr>         <td>           {{field}}         </td>         <td class="before {{#different}}different{{/different}}">           {{before}}         </td>         <td class="after {{#different}}different{{/different}}">           {{after}}         </td>       </tr>       {{/row}}       </tbody>       </table>   ',onEditorKeydown:function(a){var b=this;window.setTimeout(function(){var c=b.el.find(".expression-preview-parsing-status"),d=costco.evalFunction(a.target.value);if(d.errorMessage)c.text(d.errorMessage);else{c.text("No syntax error.");var e=b.model.records.map(function(a){return a.toJSON()}),f=costco.previewTransform(e,d),g=b.el.find(".expression-preview-container"),h=b.model.fields.toJSON(),i=_.map(f.slice(0,4),function(a){return _.map(h,function(b){return{field:b.id,before:a.before[b.id],after:a.after[b.id],different:!_.isEqual(a.before[b.id],a.after[b.id])}})});g.html(""),_.each(i,function(a){var c=Mustache.render(b.editPreviewTemplate,{row:a});g.append(c)})}},1,!0)}})}(jQuery,recline.View),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){b.FacetViewer=Backbone.View.extend({className:"recline-facet-viewer well",template:'     <a class="close js-hide" href="#">&times;</a>     <div class="facets row">       <div class="span1">         <h3>Facets</h3>       </div>       {{#facets}}       <div class="facet-summary span2 dropdown" data-facet="{{id}}">         <a class="btn dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-chevron-down"></i> {{id}} {{label}}</a>         <ul class="facet-items dropdown-menu">         {{#terms}}           <li><a class="facet-choice js-facet-filter" data-value="{{term}}">{{term}} ({{count}})</a></li>         {{/terms}}         {{#entries}}           <li><a class="facet-choice js-facet-filter" data-value="{{time}}">{{term}} ({{count}})</a></li>         {{/entries}}         </ul>       </div>       {{/facets}}     </div>   ',events:{"click .js-hide":"onHide","click .js-facet-filter":"onFacetFilter"},initialize:function(){_.bindAll(this,"render"),this.el=a(this.el),this.model.facets.bind("all",this.render),this.model.fields.bind("all",this.render),this.render()},render:function(){var a={facets:this.model.facets.toJSON(),fields:this.model.fields.toJSON()};a.facets=_.map(a.facets,function(a){return"date_histogram"===a._type&&(a.entries=_.map(a.entries,function(a){return a.term=new Date(a.time).toDateString(),a})),a});var b=Mustache.render(this.template,a);this.el.html(b),this.model.facets.length>0?this.el.show():this.el.hide()},onHide:function(a){a.preventDefault(),this.el.hide()},onFacetFilter:function(b){var c=a(b.target),d=c.closest(".facet-summary").attr("data-facet"),e=c.attr("data-value");this.model.queryState.addTermFilter(d,e)}})}(jQuery,recline.View),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){b.Fields=Backbone.View.extend({className:"recline-fields-view",template:'     <div class="accordion fields-list well">     <h3>Fields <a href="#" class="js-show-hide">+</a></h3>     {{#fields}}       <div class="accordion-group field">         <div class="accordion-heading">           <i class="icon-file"></i>           <h4>             {{label}}             <small>               {{type}}               <a class="accordion-toggle" data-toggle="collapse" href="#collapse{{id}}"> &raquo; </a>             </small>           </h4>         </div>         <div id="collapse{{id}}" class="accordion-body collapse in">           <div class="accordion-inner">             {{#facets}}             <div class="facet-summary" data-facet="{{id}}">               <ul class="facet-items">               {{#terms}}                 <li class="facet-item"><span class="term">{{term}}</span> <span class="count">[{{count}}]</span></li>               {{/terms}}               </ul>             </div>             {{/facets}}             <div class="clear"></div>           </div>         </div>       </div>     {{/fields}}     </div>   ',events:{"click .js-show-hide":"onShowHide"},initialize:function(){var c=this;this.el=a(this.el),_.bindAll(this,"render"),this.model.fields.bind("reset",function(){c.model.fields.each(function(a){a.facets.unbind("all",c.render),a.facets.bind("all",c.render)}),c.model.getFieldsSummary(),c.render()}),this.render()},render:function(){var b={fields:[]};this.model.fields.each(function(a){var c=a.toJSON();c.facets=a.facets.toJSON(),b.fields.push(c)});var c=Mustache.render(this.template,b);this.el.html(c),this.el.find(".collapse").collapse("hide")},onShowHide:function(b){b.preventDefault();var c=a(b.target);this.el.find(".accordion-body").addClass("collapse"),"+"===c.text()?(this.el.find(".collapse").collapse("show"),c.text("-")):(this.el.find(".collapse").collapse("hide"),c.text("+"))}})}(jQuery,recline.View),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){b.FilterEditor=Backbone.View.extend({className:"recline-filter-editor well",template:'     <div class="filters">       <h3>Filters</h3>       <a href="#" class="js-add-filter">Add filter</a>       <form class="form-stacked js-add" style="display: none;">         <fieldset>           <label>Filter type</label>           <select class="filterType">             <option value="term">Term (text)</option>             <option value="geo_distance">Geo distance</option>           </select>           <label>Field</label>           <select class="fields">             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}           </select>           <button type="submit" class="btn">Add</button>         </fieldset>       </form>       <form class="form-stacked js-edit">         {{#filters}}           {{{filterRender}}}         {{/filters}}         {{#filters.length}}         <button type="submit" class="btn">Update</button>         {{/filters.length}}       </form>     </div>   ',filterTemplates:{term:'       <div class="filter-{{type}} filter">         <fieldset>           <legend>             {{field}} <small>{{type}}</small>             <a class="js-remove-filter" href="#" title="Remove this filter">&times;</a>           </legend>           <input type="text" value="{{term}}" name="term" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />         </fieldset>       </div>     ',geo_distance:'       <div class="filter-{{type}} filter">         <fieldset>           <legend>             {{field}} <small>{{type}}</small>             <a class="js-remove-filter" href="#" title="Remove this filter">&times;</a>           </legend>           <label class="control-label" for="">Longitude</label>           <input type="text" value="{{point.lon}}" name="lon" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />           <label class="control-label" for="">Latitude</label>           <input type="text" value="{{point.lat}}" name="lat" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />           <label class="control-label" for="">Distance (km)</label>           <input type="text" value="{{distance}}" name="distance" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />         </fieldset>       </div>     '},events:{"click .js-remove-filter":"onRemoveFilter","click .js-add-filter":"onAddFilterShow","submit form.js-edit":"onTermFiltersUpdate","submit form.js-add":"onAddFilter"},initialize:function(){this.el=a(this.el),_.bindAll(this,"render"),this.model.fields.bind("all",this.render),this.model.queryState.bind("change",this.render),this.model.queryState.bind("change:filters:new-blank",this.render),this.render()},render:function(){var b=this,c=a.extend(!0,{},this.model.queryState.toJSON());c.filters=_.map(c.filters,function(a,b){return a.id=b,a}),c.fields=this.model.fields.toJSON(),c.filterRender=function(){return Mustache.render(b.filterTemplates[this.type],this)};var d=Mustache.render(this.template,c);this.el.html(d)},onAddFilterShow:function(b){b.preventDefault();var c=a(b.target);c.hide(),this.el.find("form.js-add").show()},onAddFilter:function(b){b.preventDefault();var c=a(b.target);c.hide();var d=c.find("select.filterType").val(),e=c.find("select.fields").val();this.model.queryState.addFilter({type:d,field:e}),this.render()},onRemoveFilter:function(b){b.preventDefault();var c=a(b.target),d=c.closest(".filter").attr("data-filter-id");this.model.queryState.removeFilter(d)},onTermFiltersUpdate:function(b){var c=this;b.preventDefault();var d=c.model.queryState.get("filters"),e=a(b.target);_.each(e.find("input"),function(b){var c=a(b),e=c.attr("data-filter-type");c.attr("data-filter-field");var g=parseInt(c.attr("data-filter-id")),h=c.attr("name"),i=c.val();"term"===e?d[g].term=i:"geo_distance"===e&&("distance"===h?d[g].distance=parseFloat(i):d[g].point[h]=parseFloat(i))}),c.model.queryState.set({filters:d}),c.model.queryState.trigger("change")}})}(jQuery,recline.View),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){b.Pager=Backbone.View.extend({className:"recline-pager",template:'     <div class="pagination">       <ul>         <li class="prev action-pagination-update"><a href="">&laquo;</a></li>         <li class="active"><a><input name="from" type="text" value="{{from}}" /> &ndash; <input name="to" type="text" value="{{to}}" /> </a></li>         <li class="next action-pagination-update"><a href="">&raquo;</a></li>       </ul>     </div>   ',events:{"click .action-pagination-update":"onPaginationUpdate","change input":"onFormSubmit"},initialize:function(){_.bindAll(this,"render"),this.el=a(this.el),this.model.bind("change",this.render),this.render()
},onFormSubmit:function(a){a.preventDefault();var b=parseInt(this.el.find('input[name="from"]').val()),c=parseInt(this.el.find('input[name="to"]').val())-b;this.model.set({size:c,from:b})},onPaginationUpdate:function(b){b.preventDefault();var c=a(b.target),d=0;d=c.parent().hasClass("prev")?this.model.get("from")-Math.max(0,this.model.get("size")):this.model.get("from")+this.model.get("size"),this.model.set({from:d})},render:function(){var a=this.model.toJSON();a.to=this.model.get("from")+this.model.get("size");var b=Mustache.render(this.template,a);this.el.html(b)}})}(jQuery,recline.View),this.recline=this.recline||{},this.recline.View=this.recline.View||{},function(a,b){b.QueryEditor=Backbone.View.extend({className:"recline-query-editor",template:'     <form action="" method="GET" class="form-inline">       <div class="input-prepend text-query">         <span class="add-on"><i class="icon-search"></i></span>         <input type="text" name="q" value="{{q}}" class="span2" placeholder="Search data ..." class="search-query" />       </div>       <button type="submit" class="btn">Go &raquo;</button>     </form>   ',events:{"submit form":"onFormSubmit"},initialize:function(){_.bindAll(this,"render"),this.el=a(this.el),this.model.bind("change",this.render),this.render()},onFormSubmit:function(a){a.preventDefault();var b=this.el.find(".text-query input").val();this.model.set({q:b})},render:function(){var a=this.model.toJSON(),b=Mustache.render(this.template,a);this.el.html(b)}})}(jQuery,recline.View);