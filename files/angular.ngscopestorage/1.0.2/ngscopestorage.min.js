!function(e,t){"use strict";function r(){function r(e){if("object"!=typeof e)throw new TypeError(n+"- set_scope must get a object.");if(!e&&!t.isDefined(e))throw new SyntaxError(n+"- set_scope must get a value");f=e}function o(e){if("string"!=typeof e)throw new TypeError(n+"- set_ctrlName must get a string.");if(!e&&!t.isDefined(e))throw new SyntaxError(n+"- set_ctrlName must get a value");c=e}function i(e){if("string"!=typeof e)throw new TypeError(n+"- set_prefix must get a string.");if(""===e)throw new SyntaxError(n+"- set_prefix must`nt get an empty string");g=e}function s(t){if("string"!=typeof t)throw new TypeError(n+"- set_storageType must get a string.");if(""===t&&"localstorage"!==t&&"sessionStorage"!==t)throw new SyntaxError(n+"- set_storageType must`nt get an empty string");u=t,p=e[u]}function a(e){for(var t in e)(-1!=t.indexOf(g)||t.indexOf(c))&&e.removeItem(t)}var f=null,c=null,g="vms",u="localStorage",p=e[u];this.$get=[function(){function e(){a(p),u.prefix=g+":"+c+"::"}function n(e){e.forEach(function(e){var t=e.name;f[t]=e.object[t],p.setItem(g+":"+c+"::"+t,f[t])}),f.$apply()}var u={};u.config=function(n){r(n.scope),o(n.ctrlName),t.isDefined(n.prefix)&&i(n.prefix),t.isDefined(n.storageType)&&s(n.storageType),e()};var m=function(e){n(e)};return Object.observe(u,m),u}]}const n="ngScopeStorage";var o=t.module("ngScopeStorage",[]);o.provider("$vms",r)}(window,window.angular);
//# sourceMappingURL=data:application/json;base64,
