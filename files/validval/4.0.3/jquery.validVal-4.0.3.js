/*	 *	jQuery validVal version 4.0.3 *	demo's and documentation: *	validval.frebsite.nl * *	Copyright (c) 2011 Fred Heusschen *	www.frebsite.nl * *	Dual licensed under the MIT and GPL licenses. *	http://en.wikipedia.org/wiki/MIT_License *	http://en.wikipedia.org/wiki/GNU_General_Public_License */(function( $ ) {	if ( $.fn.validVal ) {		return;	}	$.fn.validVal = $.fn.validval = function( o, c ) {		if ( this.length > 1 ) {			return this.each(function() {				$(this).validVal( o, c );			});		}		var form, opts, clss, inputSelector;		form = this;		opts = $.extend( true, {}, $.fn.validVal.defaults, o );		clss = $.extend( true, {}, $.fn.validVal.classes, c );		inputSelector = 'input:not(:button|:submit|:reset), textarea, select';		//	collect validations		opts.validations = {};		if ( $.fn.validVal.customValidations ) {			opts.validations = $.extend( opts.validations, $.fn.validVal.customValidations );		}		if ( opts.customValidations ) {			opts.validations = $.extend( opts.validations, opts.customValidations );		}		opts.validations = $.extend( opts.validations, $.fn.validVal.defaultValidations );		//	destroy if re-created		if ( form.data( 'vv_isValidVal' ) ) {			form.trigger( 'destroy.vv' );		}		form.data( 'vv_isValidVal', true );		//	bind events		form.bind(			'addField.vv',			function( event, el ) {				event.stopPropagation();				var original_value, validations;				var $ff = $( el );				if ( $ff.data( 'vv_isValidVal' ) ) {					$ff.trigger( 'destroy.vv' );				}				$ff.data( 'vv_isValidVal', true );				//	DEPRECATED				var alt = $ff.attr( 'alt' );				if ( $ff.hasClass( 'corresponding' ) && !$ff.hasClass( 'pattern' ) && alt && alt.length > 0 ) {					deprecated( 'name in "alt"-attribute', 'class "corresponding:name"' );					$ff.removeClass( 'corresponding' );					$ff.removeAttr( 'alt' );					if ( opts.supportHtml5 ) {						$ff.data( 'vv-corresponding', alt );					} else {						$ff.addClass( 'corresponding:' + alt );					}				}				if ( $ff.hasClass( 'required' ) && !$ff.hasClass( 'pattern' ) && alt && alt.length > 0 ) {					deprecated( 'grouping required elements in the "alt"-attribute', 'class "required:group"' );					$ff.removeClass( 'required' );					$ff.removeAttr( 'alt' );					if ( opts.supportHtml5 ) {						$ff.data( 'vv-requiredgroup', alt );					} else {						$ff.addClass( 'required:' + alt );					}				}				//////////////				validations = [];				original_value = vv_get_original_value( $ff );				//	refactor HTML5 usage				if ( opts.supportHtml5 ) {					var valids = vv_data_string( $ff, 'validations' );					if ( valids.length ) {						validations.push( valids );					}					//	placeholder attribute					if ( vv_test_html5_attr( $ff, 'placeholder' ) && $ff.attr( 'placeholder' ).length > 0 ) {						$ff.data( 'vv-placeholder', $ff.attr( 'placeholder' ) );						vv_removeAttr( $ff, 'placeholder', opts );						validations.push( 'placeholder' );					}					//	pattern attribute					if ( vv_test_html5_attr( $ff, 'pattern' ) && $ff.attr( 'pattern' ).length > 0 )	{						$ff.data( 'vv-pattern', $ff.attr( 'pattern' ) );						vv_removeAttr( $ff, 'pattern', opts );						validations.push( 'pattern' );					}					//	corresponding data					if ( vv_data_string( $ff, 'corresponding' ).length ) {						validations.push( 'corresponding' );					}					//	required group data					if ( vv_data_string( $ff, 'requiredgroup' ).length ) {						validations.push( 'required' );					}					// attributes					var atr = [ 'required', 'autofocus' ];					for ( var a = 0, l = atr.length; a < l; a++ ) {						if ( vv_test_html5_attr( $ff, atr[ a ] ) ) {							validations.push( atr[ a ] );							vv_removeAttr( $ff, atr[ a ], opts );						}					}					//	type-values					var typ = [ 'number', 'email', 'url' ];					for ( var t = 0, l = typ.length; t < l; t++ ) {						if ( vv_test_html5_type( $ff, typ[ t ] ) ) {							validations.push( typ[ t ] );//							$ff.attr( 'type', 'text' );						}					}				}				//	refactor non-HTML5 usage				var classes = $ff.attr( 'class' );				if ( classes && classes.length ) {					//	placeholder					if ( $ff.hasClass( 'placeholder' ) ) {						vv_removeClass( $ff, 'placeholder', opts );						$ff.data( 'vv-placeholder', original_value );						validations.push( 'placeholder' );						original_value = '';					}					//	corresponding					var corsp = 'corresponding:',						start = classes.indexOf( corsp );					if ( start != -1 ) {						var corrcls = classes.substr( start ).split( ' ' )[ 0 ],							corresp = corrcls.substr(  corsp.length );						if ( corresp.length ) {							$ff.removeClass( corrcls );							$ff.data( 'vv-corresponding', corresp );							validations.push( 'corresponding' );						}					}					//	pattern						//	still using alt-attribute...					if ( $ff.hasClass( 'pattern' ) ) {						vv_removeClass( $ff, 'pattern', opts );						$ff.data( 'vv-pattern', vv_get_original_value_from_value( $ff, 'alt' ) );						vv_removeAttr( $ff, 'alt', opts );						validations.push( 'pattern' );					}					//	required group					var requi = 'required:',						start = classes.indexOf( requi );					if ( start != -1 ) {						var requcls = classes.substr( start ).split( ' ' )[ 0 ],							requird = requcls.substr(  requi.length );						if ( requird.length ) {							$ff.removeClass( requcls );							$ff.data( 'vv-requiredgroup', requird );							validations.push( 'required' );						}					}				}				//	add all remaining classes				var classes = $ff.attr( 'class' );				if ( classes && classes.length ) {					validations.push( classes );				}				//	store validations				$ff.data( 'vv-validations', validations.join( ' ' ) );				//	save original value				$ff.data( 'vv_original-value', original_value );				//	bind events				$ff.bind( 					'focus.vv',					function( event ) {						event.stopPropagation();						vv_clear_placeholdervalue( $ff );						$ff.addClass( vv_get_class( 'focus' ) );					}				).bind( 					'blur.vv',					function( event ) {						event.stopPropagation();						$ff.removeClass( vv_get_class( 'focus' ) );						$ff.trigger( 'validate', opts.validate.onBlur );						vv_restore_placeholdervalue( $ff );					}				).bind( 					'keyup.vv',					function( event ) {						event.stopPropagation();						$ff.trigger( 'validate', opts.validate.onKeyup );					}				).bind(					'validate.vv',					function( event, onEvent ) {						event.stopPropagation();						if ( onEvent === false ) {							return;						}						if ( typeof opts.fields.onValidate == 'function' ) {							opts.fields.onValidate.call( $ff[0], form, opts.language );						}						$ff.data( 'vv_isValid', 'valid' );							if ( $ff.is( ':hidden' ) && !opts.validate.hiddenFields ) {							return;						}						if ( $ff.is( ':disabled' ) && !opts.validate.disabledFields ) {							return;						}						var val = vv_trim( $ff.val() );						for ( var v in opts.validations ) {							var f = opts.validations[ v ];							if ( vv_has_validation( $ff, v ) && typeof f == 'function' ) {								if ( !f.call( $ff[0], val ) ) {									$ff.data( 'vv_isValid', 'NOT' );									break;								}							}						}						if ( $ff.data( 'vv_isValid' ) == 'valid' ) {							if ( onEvent !== 'invalid' ) {								vv_set_valid( $ff, form, opts );							}						} else {							if ( onEvent !== 'valid' ) {								vv_set_invalid( $ff, form, opts );							}						}					}				).bind(					'destroy.vv',					function( event ) {						event.stopPropagation();						$ff.unbind( '.vv' );						$ff.data( 'vv_isValidVal', false );					}				);				//	placeholder				if ( vv_is_placeholderfield( $ff ) ) {					if ( $ff.val() == '' ) {						$ff.val( $ff.data( 'vv-placeholder' ) );					}					if ( vv_has_placeholdervalue( $ff ) ) {						$ff.addClass( vv_get_class( 'inactive' ) );					}					if ( $ff.is( 'select' ) ) {						$ff.find( 'option:eq(' + $ff.data( 'vv_placeholder_option_number' ) + ')' ).addClass( vv_get_class( 'inactive' ) );								$ff.bind(							'change.vv',							function( event ) {								event.stopPropagation();								if ( vv_has_placeholdervalue( $ff ) ) {									$ff.addClass( vv_get_class( 'inactive' ) );								} else {									$ff.removeClass( vv_get_class( 'inactive' ) );								}							}						);					}				}				//	corresponding				if ( vv_is_correspondingfield( $ff ) ) {					$('[name="' + $ff.data( 'vv-corresponding' ) + '"]').bind(						'blur.vv',						function( event ) {							event.stopPropagation();							vv_clear_placeholdervalue( $ff );							$ff.trigger( 'validate.vv', opts.validate.onBlur );							vv_restore_placeholdervalue( $ff );						}					);				}				//	autotabbing				if ( vv_has_validation( $ff, 'autotab' ) ) {					var max, tab, $next;					max = $ff.attr( 'maxlength' );					tab = $ff.attr( 'tabindex' );					$next = $('[tabindex="' + ( parseInt( tab ) + 1 ) + '"]');					if ( $ff.is( 'select' ) ) {						if ( tab ) {							$ff.bind(								'change.vv',								function( event ) {									event.stopPropagation();									if ( $next.length ) {										$next.focus();									}								}							);						}					} else {						if ( max && tab ) {							$ff.bind(								'keyup.vv',								function( event ) {									event.stopPropagation();									if ( $ff.val().length == max ) {										//	prevent some keys from autotabbing										var kC = event.keyCode;										switch( kC ) {											case 9:		//	tab											case 13: 	//	enter											case 16:	//	shift											case 17:	//	control											case 37:	//	left											case 38:	//	up											case 39:	//	right											case 40:	//	down											case 46:	//	delete												return false;										}																			if ( $next.length ) {											$next.focus();										}										$ff.trigger( 'blur' );									}								}							);						}					}				}				//	autofocus				if ( vv_has_validation( $ff, 'autofocus' ) && !$ff.is( ':disabled' ) ) {					$ff.focus();				}			}		);		form.bind(			'destroy.vv',			function( event ) {				event.stopPropagation();				form.unbind( '.vv' );				$(inputSelector, form).trigger( 'destroy.vv' );				form.data( 'vv_isValidVal', false );			}		);		$(inputSelector, form).each(function() {			form.trigger( 'addField.vv', $(this) );		}).filter( 'select, :checkbox, :radio' ).bind(			'change.vv',			function( event ) {				event.stopPropagation();				$(this).trigger( 'blur.vv' );			}		);		//	DEPRECATED		form.submitform = function() {			deprecated( 'method "submitform"', 'custom event "submitForm"' );			return form.triggerHandler( 'submitForm.vv' );		};		//////////////		form.bind(			'submitForm.vv',			function( event ) {				event.stopPropagation();				if ( typeof opts.form.onValidate == 'function' ) {					opts.form.onValidate.call( form[0], opts.language );				}				var miss_arr = [],					data_obj = {};				$(inputSelector, form).each(function() {					var $ff = $(this);					vv_clear_placeholdervalue( $ff );					$ff.trigger( 'validate.vv', opts.validate.onSubmit );					var v = $ff.val();					vv_restore_placeholdervalue( $ff );					if ( $ff.data( 'vv_isValid' ) == 'valid' ) {						if ( $ff.is( ':radio' ) || $ff.is( ':checkbox' ) ) {							if ( !$ff.is( ':checked' ) ) {								v = '';							}						}						if (typeof v == 'undefined' || v == null) {	                        v = '';	                    }						if ( v.length > 0 ) {							data_obj[ $ff.attr( 'name' ) ] = v;						}					} else {						if ( opts.validate.onSubmit !== false ) {														miss_arr.push( $ff );						}					}				});				if ( miss_arr.length > 0 ) {					//	DEPRECATED					if ( typeof opts.invalidFormFunc == 'function' ) {						deprecated( 'callback function "invalidFormFunc"', '"form.onInvalid"' );						opts.invalidFormFunc.call( form[0], miss_arr, opts.language );						opts.form.onInvalid = false;					}					//////////////					if ( typeof opts.form.onInvalid == 'function' ) {						opts.form.onInvalid.call( form[0], miss_arr, opts.language );					}					return false;				} else {					$('input:text', form).each(function() {						var $ff = $(this);						vv_clear_placeholdervalue( $ff );					});					//	DEPRECATED					if ( typeof opts.onSubmit == 'function' ) {						deprecated( 'callback function "onSubmit"', '"form.onValid"' );						opts.onSubmit.call( form[0], opts.language );						opts.form.onValid = false;					}					//////////////					if ( typeof opts.form.onValid == 'function' ) {						opts.form.onValid.call( form[0], opts.language );					}					return data_obj;				}			}		);		//	DEPRECATED		form.resetform = function() {			deprecated( 'method "resetform"', 'custom event "resetForm"' );			return form.triggerHandler( 'resetForm.vv' );		};		//////////////		form.bind(			'resetForm.vv',			function( event ) {				event.stopPropagation();				//	DEPRECATED				if ( typeof opts.onReset == 'function' ) {					deprecated( 'callback function "onReset"', '"form.onReset"' );					opts.onReset.call( form[0], opts.language );					opts.form.onReset = false;				}				//////////////				if ( typeof opts.form.onReset == 'function' ) {					opts.form.onReset.call( form[0], opts.language );				}				$(inputSelector, form).each(function() {					var $ff = $(this);					if ( vv_is_placeholderfield( $ff ) ) {						$ff.addClass( vv_get_class( 'inactive' ) );						$ff.val( $ff.data( 'vv-placeholder' ) );					} else {						$ff.val( $ff.data( 'vv_original-value' ) );					}					vv_set_valid( $ff, form, opts );				});				return false;			}		);		// bind to native submit/reset		if ( form.is( 'form' ) ) {			form.attr( 'novalidate', 'novalidate' );			form.bind(				'submit.vv',				function( event ) {					event.stopPropagation();					return form.triggerHandler( 'submitForm.vv' );				}			);			form.bind(				'reset.vv',				function( event ) {					event.stopPropagation();					return form.triggerHandler( 'resetForm.vv' );				}			);		}		return form;	};	$.fn.validVal.defaults = {		'supportHtml5': true,		'language': 'en',		'customValidations': {},		'validate': {			'onBlur': true,			'onSubmit': true,			'onKeyup': false,			'hiddenFields': false,			'disabledFields': false		},		'fields': {			'onValidate': null,			'onValid': function() {				var $f = $(this);				if ( $f.is( ':radio' ) || $f.is( ':checkbox' ) ) {					$f.parent().removeClass( vv_get_class( 'invalid' ) );				}				$f.removeClass( vv_get_class( 'invalid' ) );			},			'onInvalid': function() {				var $f = $(this);				if ( $f.is( ':radio' ) || $f.is( ':checkbox' ) ) {					$f.parent().addClass( vv_get_class( 'invalid' ) );				}				$f.addClass( vv_get_class( 'invalid' ) );			}		},		'form': {			'onReset': null,			'onValidate': null,			'onValid': null,			'onInvalid': function( fieldArr, language ) {				switch ( language ) {					case 'nl':						msg = 'Let op, niet alle velden zijn correct ingevuld.';						break;						case 'de':						msg = 'Achtung, nicht alle Felder sind korrekt ausgefuellt.';						break;						case 'es':						msg = 'Atención, no se han completado todos los campos correctamente.';						break;						case 'en':					default:						msg = 'Attention, not all the fields have been filled out correctly.';						break;				}				alert( msg );				fieldArr[0].focus();			}		},		'keepClasses': ['required'],		'keepAttributes': ['pattern']	};	$.fn.validVal.defaultValidations = {		'required': function( v ) {			var $f = $(this);			if ( $f.is( ':radio' ) || $f.is( ':checkbox' ) ) {				if ( $f.is( ':checkbox' ) ) {					var group = vv_data_string( $f, 'requiredgroup' );					if ( group.length ) {						$f = $( 'input:vv_requiredgroup(' + group + ')' );					}				} else {					var name = $f.attr( 'name' );					if ( name && name.length > 0 ) {						$f = $( 'input[name="' + name + '"]' );					}				}				if ( !$f.is( ':checked' ) ) {					return false;				}			} else if ( $f.is( 'select' ) ) {				if ( vv_is_placeholderfield( $f ) ) {					if ( vv_has_placeholdervalue( $f ) ) {						return false;					}				} else {					if ( v.length == 0 ) {						return false;					}				}				} else {				if ( v.length == 0 ) {					return false;				}			}		 	return true;		},		'Required': function( v ) {			return $.fn.validVal.defaultValidations.required.call( this, v );		},		'number': function( v ) {			v = vv_strip_whitespace( v );			if ( v.length == 0 ) {				return true;			}			if ( isNaN( v ) ) {				return false;			}			return true;		},		'email': function( v ) {			if ( v.length == 0 ) {				return true;			}			var r = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;	    	return r.test( v );		},		'url': function( v ) {	        if ( v.length == 0 ) {	        	return true;	        }	        if ( v.match(/^www\./) ) {	        	v = "http://" + v;	        }	        return v.match(/^(http\:\/\/|https\:\/\/)(.{4,})$/);		},		'pattern': function( v ) {			if ( v.length == 0 ) {				return true;			}			var $f = $(this),				p = $f.data( 'vv-pattern' );			if ( p.substr( 0, 1 ) == '/' ) {				p = p.substr( 1 );			}			if ( p.substr( p.length - 1 ) == '/' ) {				p = p.substr( 0, p.length -1 );			}	        return new RegExp( p ).test( v );		},		'corresponding': function( v ) {			if ( v != $('[name="' + $(this).data( 'vv-corresponding' ) + '"]').val() ) {				return false;			}			return true;		}	};	$.fn.validVal.classes = {		//	key		:  class		'focus'		: 'focus',		'invalid'	: 'invalid',		'inactive'	: 'inactive'	};	//	placeholder functions	function vv_is_placeholderfield( $f ) {		return vv_has_validation( $f, 'placeholder' );	}	function vv_has_placeholdervalue( $f ) {		if ( vv_trim( $f.val() ) == $f.data( 'vv-placeholder' ) ) {			return true;		}		return false;	}	function vv_clear_placeholdervalue( $f ) {		if ( vv_is_placeholderfield( $f ) ) {			if ( vv_has_placeholdervalue( $f ) && !$f.is( 'select' )  ) {				$f.val( '' );				$f.removeClass( vv_get_class( 'inactive' ) );			}		}	}	function vv_restore_placeholdervalue( $f ) {		if ( vv_is_placeholderfield( $f ) ) {			if ( vv_trim( $f.val() ) == '' && !$f.is( 'select' ) ) {				$f.val(  $f.data( 'vv-placeholder' ) );				$f.addClass( vv_get_class( 'inactive' ) );			}		}	}	//	pattern functions	function vv_is_patternfield( $f ) {		return vv_has_validation( $f, 'pattern' );	}		//	corresponding functions	function vv_is_correspondingfield( $f ) {		return vv_has_validation( $f, 'corresponding' );	}	//	valid/invalid	function vv_set_valid( $f, f, o ) {		//	DEPRECATED		if ( typeof o.validFieldFunc == 'function' ) {			deprecated( 'callback function "validFieldFunc"', '"fields.onValid"' );			o.validFieldFunc.call( $f[0], f, o.language );			o.fields.onValid = false;		}		//////////////		if ( typeof o.fields.onValid == 'function' ) {			o.fields.onValid.call( $f[0], f, o.language );		}	}	function vv_set_invalid( $f, f, o ) {		//	DEPRECATED		if ( typeof o.invalidFieldFunc == 'function' ) {			deprecated( 'callback function "invalidFieldFunc"', '"fields.onInvalid"' );			o.invalidFieldFunc.call( $f[0], f, o.language );			o.fields.onInvalid = false;		}		//////////////		if ( typeof o.fields.onInvalid == 'function' ) {			o.fields.onInvalid.call( $f[0], f, o.language );		}	}	//	HTML5 stuff	function vv_test_html5_attr( $f, a ) {		// non HTML5 browsers		if ( typeof $f.attr( a ) == 'undefined' ) 	{			return false;		}		// HTML5 browsers		if ( $f.attr( a ) === 'false' || $f.attr( a ) === false ) {			return false;		}		return true;	}	function vv_test_html5_type( $f, t ) {		// cool HTML5 browsers		if ( $f.attr( 'type' ) == t ) {			return true;		}		// non-HTML5 but still cool browsers		if ( $f.is( 'input[type="' + t + '"]' ) ) {			return true;		}		//	non-HTML5, non-cool browser		var res = vv_get_outerHtml( $f );		if ( res.indexOf( 'type="' + t + '"' ) != -1 || res.indexOf( 'type=\'' + t + '\'' ) != -1 || res.indexOf( 'type=' + t + '' ) != -1 ) {			return true;		}		return false;	}	//	misc	function vv_has_validation( $f, v ) {		var data = ' ' + $f.data( 'vv-validations' ) + ' ';		return data.indexOf( v ) != -1;	}	function vv_data_string( $f, d ) {		var val = $f.data( 'vv-' + d );		if ( typeof val != 'string' ) {			val = '';		}		return val;	}	function vv_removeAttr( $f, a, o ) {		if ( $.inArray( a, o.keepAttributes ) == -1 ) {			$f.removeAttr( a );		}	}	function vv_removeClass( $f, c, o ) {		if ( $.inArray( c, o.keepClasses ) == -1 ) {			$f.removeClass( c );		}	}	function vv_get_original_value( $f ) {		var val, lal, num, qal;		val = vv_get_outerHtml( $f );		lal = val.toLowerCase();		if ( $f.is( 'select' ) ) {			num = 0;			$f.find( '> option' ).each(function( n ) {				val = vv_get_outerHtml( $(this) );				qal = val.split( "'" ).join( '"' ).split( '"' ).join( '' );				qal = qal.substr( 0, qal.indexOf( '>' ) );				if ( qal.indexOf( 'selected=selected' ) > -1 ) {					num = n;				}			});			$f.data( 'vv_placeholder_option_number', num );			return vv_get_original_value_from_value( $f.find( '> option:nth(' + num + ')' ) );		} else if ( $f.is( 'textarea' ) ) {			val = val.substr( val.indexOf( '>' ) + 1 );			val = val.substr( 0, val.indexOf( '</text' ) );			return val;		} else {			return vv_get_original_value_from_value( $f );		}	}	function vv_get_original_value_from_value( $f, at ) {		if ( typeof at == 'undefined' ) {			at = 'value';		}		var val = vv_get_outerHtml( $f ),			lal = val.toLowerCase();		if ( lal.indexOf( at + '=' ) > -1 ) {			val = val.substr( lal.indexOf( at + '=' ) + ( at.length + 1 ) );			var quot = val.substr( 0, 1 );			if ( quot == '"' || quot == "'" ) {				val = val.substr( 1 );				val = val.substr( 0, val.indexOf( quot ) );			} else {				val = val.substr( 0, val.indexOf( ' ' ) );			}			return val;		} else {			return '';		}	}	function vv_get_outerHtml( $e ) {		return $( '<div></div>' ).append( $e.clone() ).html();	}	function vv_get_class( cl ) {		if ( typeof clss != 'undefined' && typeof clss[ cl ] != 'undefined' ) {			return clss[ cl ];		}		return cl;	}	function vv_trim( str ) {		if ( str === null ) {			return '';		}		if ( typeof str == 'object' ) {            for ( var a in str ) {                str[ a ] = vv_trim( str[ a ] );            }            return str;        }		if ( typeof str != 'string' ) {			return '';		}		if ( str.length == 0 ) {			return '';		}		return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');	}	function vv_strip_whitespace( str ) {		if ( str === null ) {			return '';		}		if ( typeof str == 'object' ) {            for ( var a in str ) {                str[ a ] = vv_strip_whitespace( str[ a ] );            }            return str;        }  		if ( typeof str != 'string' ) {  			return '';  		}  		if ( str.length == 0 ) {  			return '';  		}		str = vv_trim( str );		var r = [ ' ', '-', '+', '(', ')', '/', '\\' ];		for ( var i = 0, l = r.length; i < l; i++ ) {			str = str.split( r[ i ] ).join( '' );		}		return str;	}	//	debugging	function debug( msg ) {		if ( console && console.log ) {			console.log( 'validVal: ' + msg );		}	}	function deprecated( func, alt ) {		debug( func + ' is DEPRECATED, use ' + alt + ' instead.' );	}	$.expr[':'].vv_requiredgroup = function( elem, counter, params ) {		if ( !elem || !params || !params[ 3 ] ) {			return false;		}		var group = vv_data_string( $(elem), 'requiredgroup' );		if ( !group.length ) {			return false;		}		return group == params[ 3 ];	};})(jQuery);