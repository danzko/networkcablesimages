{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/stream.js"],"names":["Lazy","func","this","has_evaluated","value","Eager","Stream","head","tailPromise","wrapper","headValue","create","_continually","callback","iterate","_iterate","x","f","EagerStream","call","prototype","eval","empty","Error","tail","item","n","s","e","length","len","add","zip","y","append","stream","self","args","Array","slice","arguments","shift","streams","concat","filter","apply","map","concatmap","reduce","a","initial","aggregator","TypeError","sum","b","walk","force","scale","factor","h","t","take","howmany","takeWhile","condition","result","push","fromArray","drop","dropWhile","member","print","target","console","log","toString","continually","continuallyEager","repeat","element","makeOnes","makeNaturalNumbers","nats","make","restArguments","array","range","low","high","equals","stream1","stream2","iterateEager","cycle","promise_generator","index","module","exports"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\n\r\nfunction Lazy(func) {\r\n    this.has_evaluated = false;\r\n    this.func = func;\r\n    this.value = null;\r\n}\r\n\r\nLazy.prototype = {\r\n    eval: function() {\r\n        if ( this.has_evaluated ) {\r\n            return this.value;\r\n        }\r\n\r\n        this.value = this.func();\r\n        this.has_evaluated = true;\r\n        return this.value;\r\n    }\r\n};\r\n\r\nfunction Eager(func) {\r\n    this.func = func;\r\n}\r\n\r\nEager.prototype = {\r\n    eval: function() {\r\n        return this.func();\r\n    }\r\n}\r\n\r\nfunction Stream( head, tailPromise, wrapper ) {\r\n    if ( typeof wrapper == 'undefined' ) {\r\n        wrapper = Lazy;\r\n    }\r\n    \r\n    this.wrapper = wrapper;\r\n\r\n    if ( typeof head != 'undefined' ) {\r\n        this.headValue = head;\r\n    }\r\n    if ( typeof tailPromise == 'undefined' ) {\r\n        tailPromise = function () {\r\n            return this.create();\r\n        };\r\n    }\r\n\r\n    if ( typeof tailPromise == 'function' ) {\r\n        tailPromise = new wrapper(tailPromise);\r\n    }\r\n\r\n    this.tailPromise = tailPromise;\r\n}\r\n\r\n// TODO: write some unit tests\r\nStream.prototype = {\r\n    // This makes it easier to avoid passing around the explicit wrapper\r\n    // when making new streams below\r\n    create: function(head, tailPromise) {\r\n        return new Stream( head, tailPromise, this.wrapper );\r\n    },\r\n    empty: function() {\r\n        return typeof this.headValue == 'undefined';\r\n    },\r\n    head: function() {\r\n        if ( this.empty() ) {\r\n            throw new Error('Cannot get the head of the empty stream.');\r\n        }\r\n        return this.headValue;\r\n    },\r\n    tail: function() {\r\n        if ( this.empty() ) {\r\n            throw new Error('Cannot get the tail of the empty stream.');\r\n        }\r\n\r\n        return this.tailPromise.eval();\r\n    },\r\n    item: function( n ) {\r\n        if ( this.empty() ) {\r\n            throw new Error('Cannot use item() on an empty stream.');\r\n        }\r\n        var s = this;\r\n        while ( n != 0 ) {\r\n            --n;\r\n            try {\r\n                s = s.tail();\r\n            }\r\n            catch ( e ) {\r\n                throw new Error('Item index does not exist in stream.');\r\n            }\r\n        }\r\n        try {\r\n            return s.head();\r\n        }\r\n        catch ( e ) {\r\n            throw new Error('Item index does not exist in stream.');\r\n        }\r\n    },\r\n    length: function() {\r\n        // requires finite stream\r\n        var s = this;\r\n        var len = 0;\r\n\r\n        while ( !s.empty() ) {\r\n            ++len;\r\n            s = s.tail();\r\n        }\r\n        return len;\r\n    },\r\n    add: function( s ) {\r\n        return this.zip( function ( x, y ) {\r\n            return x + y;\r\n        }, s );\r\n    },\r\n    append: function ( stream ) {\r\n        if ( this.empty() ) {\r\n            return stream;\r\n        }\r\n        var self = this;\r\n        return this.create(\r\n            self.head(),\r\n            function () {\r\n                return self.tail().append( stream );\r\n            }\r\n        );\r\n    },\r\n    zip: function( /* arguments */ ) {\r\n        var args = Array.prototype.slice.call( arguments, 0 )\r\n        var f = args[0];\r\n        args.shift();\r\n        var streams = [this].concat( args );\r\n        var self = this;\r\n\r\n        // If any streams are empty, return an empty stream\r\n        if( streams.filter( function(x) { return x.empty(); } ).length > 0 ) {\r\n          return new Stream();\r\n        }\r\n\r\n        return new Stream(\r\n          f.apply( null, streams.map( function(x) { return x.head(); }) ),\r\n          function () {\r\n            var tail = self.tail();\r\n            return tail.zip.apply( tail, [f].concat(\r\n              args.map( function (x) { return x.tail(); } )\r\n            ) );\r\n          }\r\n        );\r\n    },\r\n    map: function( f ) {\r\n        if ( this.empty() ) {\r\n            return this;\r\n        }\r\n        var self = this;\r\n        return this.create( f( this.head() ), function () {\r\n            return self.tail().map( f );\r\n        } );\r\n    },\r\n    concatmap: function ( f ) {\r\n        return this.reduce( function ( a, x ) {\r\n            return a.append( f(x) );\r\n        }, this.create() );\r\n    },\r\n    reduce: function () {\r\n        var aggregator = arguments[0];\r\n        var initial, self;\r\n        if(arguments.length < 2) {\r\n            if(this.empty()) throw new TypeError(\"Array length is 0 and no second argument\");\r\n            initial = this.head();\r\n            self = this.tail();\r\n        }\r\n        else {\r\n            initial = arguments[1];\r\n            self = this;\r\n        }\r\n        // requires finite stream\r\n        if ( self.empty() ) {\r\n            return initial;\r\n        }\r\n        // TODO: iterate\r\n        return self.tail().reduce( aggregator, aggregator( initial, self.head() ) );\r\n    },\r\n    sum: function () {\r\n        // requires finite stream\r\n        return this.reduce( function ( a, b ) {\r\n            return a + b;\r\n        }, 0 );\r\n    },\r\n    walk: function( f ) {\r\n        // requires finite stream\r\n        this.map( function ( x ) {\r\n            f( x );\r\n            return x;\r\n        } ).force();\r\n    },\r\n    force: function() {\r\n        // requires finite stream\r\n        var stream = this;\r\n        while ( !stream.empty() ) {\r\n            stream = stream.tail();\r\n        }\r\n    },\r\n    scale: function( factor ) {\r\n        return this.map( function ( x ) {\r\n            return factor * x;\r\n        } );\r\n    },\r\n    filter: function( f ) {\r\n        if ( this.empty() ) {\r\n            return this;\r\n        }\r\n        var h = this.head();\r\n        var t = this.tail();\r\n        if ( f( h ) ) {\r\n            return this.create( h, function () {\r\n                return t.filter( f );\r\n            } );\r\n        }\r\n        return t.filter( f );\r\n    },\r\n    take: function ( howmany ) {\r\n        if ( this.empty() ) {\r\n            return this;\r\n        }\r\n        if ( howmany == 0 ) {\r\n            return this.create();\r\n        }\r\n        var self = this;\r\n        return this.create(\r\n            this.head(),\r\n            function () {\r\n                return self.tail().take( howmany - 1 );\r\n            }\r\n        );\r\n    },\r\n    takeWhile: function( condition ) {\r\n      if(this.empty()) return new Stream();\r\n      var self = this, result = [];\r\n\r\n      while( condition( self.head() ) ) {\r\n        result.push( self.head() );\r\n        self = self.tail();\r\n      }\r\n\r\n      return Stream.fromArray(result);\r\n    },\r\n    drop: function( n ){\r\n        var self = this; \r\n        \r\n        while ( n-- > 0 ) {\r\n          \r\n            if ( self.empty() ) {\r\n                return this.create();\r\n            }\r\n\r\n          self = self.tail();\r\n        }\r\n        \r\n        // create clone/a contructor which accepts a stream?\r\n        return this.create( self.headValue, self.tailPromise );\r\n    },\r\n    dropWhile: function( condition ) {\r\n      if(this.empty()) return new Stream();\r\n      var self = this;\r\n\r\n      while( condition( self.head() ) ) self = self.tail();\r\n      return new Stream( self.headValue, self.tailPromise );\r\n    },\r\n    member: function( x ){\r\n        var self = this;\r\n\r\n        while( !self.empty() ) {\r\n            if ( self.head() == x ) {\r\n                return true;\r\n            }\r\n\r\n            self = self.tail();\r\n        }\r\n\r\n        return false;\r\n    },\r\n    print: function( n ) {\r\n        var target;\r\n        if ( typeof n != 'undefined' ) {\r\n            target = this.take( n );\r\n        }\r\n        else {\r\n            // requires finite stream\r\n            target = this;\r\n        }\r\n        target.walk( function ( x ) {\r\n            console.log( x );\r\n        } );\r\n    },\r\n    toString: function() {\r\n        // requires finite stream\r\n        return '[stream head: ' + this.head() + '; tail: ' + this.tail() + ']';\r\n    }\r\n};\r\n\r\nfunction _continually( callback, wrapper ) {\r\n    return Stream.iterate( callback(), callback, wrapper );\r\n}\r\n\r\nStream.continually = function( callback ) {\r\n    return _continually( callback, Lazy );\r\n}\r\n\r\nStream.continuallyEager = function( callback ) {\r\n    return _continually( callback, Eager );\r\n}\r\n\r\nStream.repeat = function( element ) {\r\n    return Stream.continually( function() { return element; } );\r\n};\r\n\r\nStream.makeOnes = function() {\r\n    return new Stream( 1, Stream.makeOnes );\r\n};\r\n\r\nStream.makeNaturalNumbers = function() {\r\n    return new Stream( 1, function () {\r\n        var nats = Stream.makeNaturalNumbers();\r\n        return nats.add( Stream.makeOnes() );\r\n    } );\r\n};\r\n\r\nStream.make = function( /* arguments */ ) {\r\n    if ( arguments.length == 0 ) {\r\n        return new Stream();\r\n    }\r\n    var restArguments = Array.prototype.slice.call( arguments, 1 );\r\n    return new Stream( arguments[ 0 ], function () {\r\n        return Stream.make.apply( null, restArguments );\r\n    } );\r\n};\r\n\r\n// This is Eager-only, since keeping around a Lazy for each element would\r\n// just copy array needlessly\r\nStream.fromArray = function ( array ) {\r\n    if ( array.length == 0 ) {\r\n        return new Stream();\r\n    }\r\n    return new Stream( array[0], function() { return Stream.fromArray(array.slice(1), Eager ); }, Eager );\r\n};\r\n\r\nStream.range = function ( low, high ) {\r\n    if ( typeof low == 'undefined' ) {\r\n        low = 1;\r\n    }\r\n    if ( low == high ) {\r\n        return Stream.make( low );\r\n    }\r\n    // if high is undefined, there won't be an upper bound\r\n    return new Stream( low, function () {\r\n        return Stream.range( low + 1, high );\r\n    });\r\n};\r\n\r\nStream.equals = function ( stream1, stream2 ) {\r\n    if ( ! (stream1 instanceof Stream) ) return false;\r\n    if ( ! (stream2 instanceof Stream) ) return false;\r\n    if ( stream1.empty() && stream2.empty() ) {\r\n        return true;\r\n    }\r\n    if ( stream1.empty() || stream2.empty() ) {\r\n        return false;\r\n    }\r\n    if ( stream1.head() === stream2.head() ) {\r\n        return Stream.equals( stream1.tail(), stream2.tail() );\r\n    }\r\n};\r\n\r\nfunction _iterate( x, f, wrapper ) {\r\n  return new Stream( x, function () {\r\n    return _iterate( f( x ), f, wrapper );\r\n  }, wrapper );\r\n};\r\n\r\nStream.iterate = function( x, f ) {\r\n    return _iterate( x, f, Lazy );\r\n}\r\n\r\nStream.iterateEager = function( x, f ) {\r\n    return _iterate( x, f, Eager );\r\n}\r\n\r\n// Like fromArray, this is Eager-only since it would needlessly copy\r\n// parts of the array if Lazy was used\r\nStream.cycle = function( array ) {\r\n  var promise_generator = function( array, index) {\r\n    if( index >= array.length ) index = 0;\r\n    return function() {\r\n      return new Stream( array[index], promise_generator(array, index + 1 ), Eager );\r\n    };\r\n  };\r\n  return new Stream( array[0], promise_generator( array, 1 ), Eager );\r\n};\r\n\r\n/*\r\n * Since Lazy and Eager aren't exported to the outside, this is used to make\r\n * eager streams.\r\n */\r\nfunction EagerStream( head, tailPromise ) {\r\n    return Stream.call( this, head, tailPromise, Eager );\r\n}\r\n\r\nEagerStream.prototype = Stream.prototype;\r\n\r\nStream.Eager = EagerStream;\r\nmodule.exports = Stream;\r\n"]}