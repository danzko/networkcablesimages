{"version":3,"file":"esri-leaflet-gp.js","sources":["src/Tasks/Geoprocessing.js","src/Services/Geoprocessing.js","src/EsriLeafletGP.js"],"names":["exports","Task","esri_leaflet","extend","includes","L","Mixin","Events","params","resultParams","initialize","options","prototype","call","this","path","async","_service","metadata","error","results","executionType","fire","setParam","paramName","paramValue","_setGeometry","setOutputParam","outputParam","gpAsyncResultParam","geometry","processedInput","geometryType","features","LatLngBounds","push","esri","Util","boundsToExtent","geojsonTypeToArcGIS","type","getLatLng","LatLng","coordinates","lng","lat","GeoJSON","getLayers","feature","geojsonToArcGIS","toGeoJSON","console","warn","run","callback","context","_done","request","response","_currentJobId","jobId","checkJob","processGPOutput","pollJob","polledJob","jobStatus","processJobResult","processAsyncOutput","window","clearInterval","counter","bind","setInterval","asyncInterval","processedResponse","i","length","dataType","featureCollection","responseToFeatureCollection","value","baseURL","url","n","indexOf","serviceURL","slice","outputMapService","task","Service","createTask","service","VERSION"],"mappings":"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","sourcesContent":["/*\nto do:\nsetParam([])\n*/\n\nimport L from 'leaflet';\nimport { Task as BaseTask, Util } from 'esri-leaflet';\n\nexport var Task = BaseTask.extend({\n\n  includes: L.Mixin.Events,\n\n  // setters: {}, we don't use these because we don't know the ParamName OR value of custom GP services\n  params: {},\n  resultParams: {},\n\n  initialize: function (options) {\n    // don't replace parent initialize\n    BaseTask.prototype.initialize.call(this, options);\n\n    // if path isn't supplied in options, try and determine if its sync or async to set automatically\n    if (!this.options.path) {\n      // assume initially, that service is synchronous\n      this.options.async = false;\n      this.options.path = 'execute';\n\n      // the parameters below seem wonky to me, but work for both CORS and JSONP requests\n      this._service.metadata(function (error, results) {\n        if (!error) {\n          if (results.executionType === 'esriExecutionTypeSynchronous') {\n            this.options.async = false;\n            this.options.path = 'execute';\n          } else {\n            this.options.async = true;\n            this.options.path = 'submitJob';\n          }\n          this.fire('initialized');\n        } else {\n          // if check fails, hopefully its synchronous\n          this.options.async = false;\n          this.options.path = 'execute';\n          return;\n        }\n      }, this);\n    } else {\n      // if path is custom, hopefully its synchronous\n      if (this.options.async !== true && this.options.path !== 'submitJob') {\n        this.options.async = false;\n      }\n    }\n  },\n\n  // doc for various GPInput types can be found here\n  // http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/GP_Result/02r3000000q7000000/\n\n  // set booleans, numbers, strings\n  setParam: function (paramName, paramValue) {\n    if (typeof paramValue === 'boolean') {\n      this.params[paramName] = paramValue;\n      return;\n    } else if (typeof paramValue !== 'object') { // strings, numbers\n      this.params[paramName] = paramValue;\n      return;\n    } else {\n      // otherwise assume its latlng, marker, bounds or geojson\n      this._setGeometry(paramName, paramValue);\n    }\n  },\n\n  // not sure how best to handle passing more than one parameter at once\n  // setParams: function(inputArray) {\n  //   if (L.Util.isArray(inputArray)) {\n  //     for (var i = 0; i < inputArray.length; i++) {\n  //       this.setParam(inputArray[i]);\n  //     }\n  //   }\n  // },\n\n  // give developer opportunity to point out where the output is going to be available\n  setOutputParam: function (paramName) {\n    this.params.outputParam = paramName;\n  },\n\n  /* necessary because of the design requirement that resultParams be specified\n  for async elevation services in order to get Zs (unnecessarily confusing)*/\n  gpAsyncResultParam: function (paramName, paramValue) {\n    this.resultParams[paramName] = paramValue;\n  },\n\n  // we currently expect a single geometry or feature (ported from: Tasks.Query._setGeometry)\n  _setGeometry: function (paramName, geometry) {\n    var processedInput = {\n      'geometryType': '',\n      'features': []\n    };\n\n    // convert bounds to extent and finish\n    if (geometry instanceof L.LatLngBounds) {\n      // set geometry + type\n      processedInput.features.push({'geometry': L.esri.Util.boundsToExtent(geometry)});\n      processedInput.geometryType = L.esri.Util.geojsonTypeToArcGIS(geometry.type);\n    }\n\n    // convert L.Marker > L.LatLng\n    if (geometry.getLatLng) {\n      geometry = geometry.getLatLng();\n    }\n\n    // convert L.LatLng to a geojson point and continue;\n    if (geometry instanceof L.LatLng) {\n      geometry = {\n        type: 'Point',\n        coordinates: [geometry.lng, geometry.lat]\n      };\n    }\n\n    // handle L.GeoJSON, pull out the first geometry\n    if (geometry instanceof L.GeoJSON) {\n      // reassign geometry to the GeoJSON value  (we are assuming that only one feature is present)\n      geometry = geometry.getLayers()[0].feature.geometry;\n      processedInput.features.push({'geometry': Util.geojsonToArcGIS(geometry)});\n      processedInput.geometryType = Util.geojsonTypeToArcGIS(geometry.type);\n    }\n\n    // Handle L.Polyline and L.Polygon\n    if (geometry.toGeoJSON) {\n      geometry = geometry.toGeoJSON();\n    }\n\n    // handle GeoJSON feature by pulling out the geometry\n    if (geometry.type === 'Feature') {\n      // get the geometry of the geojson feature\n      geometry = geometry.geometry;\n    }\n\n    // confirm that our GeoJSON is a point, line or polygon\n    if (geometry.type === 'Point' || geometry.type === 'LineString' || geometry.type === 'Polygon') {\n      processedInput.features.push({'geometry': Util.geojsonToArcGIS(geometry)});\n      processedInput.geometryType = Util.geojsonTypeToArcGIS(geometry.type);\n    } else {\n      if (console && console.warn) {\n        console.warn('invalid geometry passed as GP input. Should be an L.LatLng, L.LatLngBounds, L.Marker or GeoJSON Point Line or Polygon object');\n      }\n    }\n\n    this.params[paramName] = processedInput;\n    return;\n  },\n\n  run: function (callback, context) {\n    this._done = false;\n\n    if (this.options.async === true) {\n      /* eslint-disable */\n      this._service.request(this.options.path, this.params, function (error, response) {\n        this._currentJobId = response.jobId;\n        this.checkJob(this._currentJobId, callback, context);\n      }, this);\n      /* eslint-enable */\n    } else {\n      return this._service.request(this.options.path, this.params, function (error, response) {\n        callback.call(context, error, (response && this.processGPOutput(response)), response);\n      }, this);\n    }\n  },\n\n  checkJob: function (jobId, callback, context) {\n    var pollJob = function () {\n      /* eslint-disable */\n      this._service.request('jobs/' + jobId, {}, function polledJob (error, response) {\n        if (response.jobStatus === 'esriJobSucceeded') {\n          if (!this._done) {\n            this._done = true;\n            // to do:\n            // refactor to make an array of async requests for output\n            this._service.request('jobs/' + jobId + '/results/' + this.params.outputParam, this.resultParams, function processJobResult (error, response) {\n              callback.call(context, error, (response && this.processAsyncOutput(response)), response);\n            }, this);\n          }\n          window.clearInterval(counter);\n        } else if (response.jobStatus === 'esriJobFailed') {\n          callback.call(context, 'Job Failed', null);\n          window.clearInterval(counter);\n        }\n      }, this);\n      /* eslint-enable */\n    }.bind(this);\n\n    var counter = window.setInterval(pollJob, this._service.options.asyncInterval * 1000);\n\n  },\n\n  processGPOutput: function (response) {\n    var processedResponse = {};\n\n    // grab syncronous results\n    if (this.options.async === false) {\n      // loop through results and pass back, parsing esri json\n      for (var i = 0; i < response.results.length; i++) {\n        /* jshint ignore:start */\n        processedResponse[response.results[i].paramName];\n        /* jshint ignore:end */\n        if (response.results[i].dataType === 'GPFeatureRecordSetLayer') {\n          var featureCollection = Util.responseToFeatureCollection(response.results[i].value);\n          processedResponse[response.results[i].paramName] = featureCollection;\n        } else {\n          processedResponse[response.results[i].paramName] = response.results[i].value;\n        }\n      }\n    } else { // grab async results slightly differently\n      processedResponse.jobId = this._currentJobId;\n      // var responseValue = response.value;\n    }\n\n    // if output is a raster layer, we also need to stub out a MapService url using jobid\n    if (this.options.async === true && response.dataType === 'GPRasterDataLayer') {\n      var baseURL = this.options.url;\n      var n = baseURL.indexOf('GPServer');\n      var serviceURL = baseURL.slice(0, n) + 'MapServer/';\n      processedResponse.outputMapService = serviceURL + 'jobs/' + this._currentJobId;\n    }\n\n    return processedResponse;\n  },\n\n  processAsyncOutput: function (response) {\n    var processedResponse = {};\n    processedResponse.jobId = this._currentJobId;\n\n    // if output is a raster layer, we also need to stub out a MapService url using jobid\n    if (this.options.async === true && response.dataType === 'GPRasterDataLayer') {\n      var baseURL = this.options.url;\n      var n = baseURL.indexOf('GPServer');\n      var serviceURL = baseURL.slice(0, n) + 'MapServer/';\n      processedResponse.outputMapService = serviceURL + 'jobs/' + this._currentJobId;\n    }\n\n    // if output is GPFeatureRecordSetLayer, convert to GeoJSON\n    if (response.dataType === 'GPFeatureRecordSetLayer') {\n      var featureCollection = Util.responseToFeatureCollection(response.value);\n      processedResponse[response.paramName] = featureCollection;\n    } else {\n      processedResponse[response.paramName] = response.value;\n    }\n\n    return processedResponse;\n  }\n\n});\n\nexport function task (options) {\n  return new Task(options);\n}\n\nexport default task;\n","import { Service as BaseService } from 'esri-leaflet';\nimport { Task } from '../Tasks/Geoprocessing';\n\nexport var Service = BaseService.extend({\n  options: {\n    asyncInterval: 1\n  },\n\n  createTask: function () {\n    return new Task(this, this.options);\n  }\n\n});\n\nexport function service (options) {\n  return new Service(options);\n}\n\nexport default service;\n","export var VERSION = '2.0.0';\n\nexport { Task, task } from './Tasks/Geoprocessing.js';\nexport { Service , service } from './Services/Geoprocessing.js';"]}