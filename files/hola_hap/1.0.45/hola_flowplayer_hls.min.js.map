{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/hola_flowplayer_hls.js","node_modules/@hola.org/flowplayer-hlsjs/flowplayer.hlsjs.js","node_modules/@hola.org/hls.js/lib/controller/abr-controller.js","node_modules/@hola.org/hls.js/lib/controller/buffer-controller.js","node_modules/@hola.org/hls.js/lib/controller/cap-level-controller.js","node_modules/@hola.org/hls.js/lib/controller/fps-controller.js","node_modules/@hola.org/hls.js/lib/controller/level-controller.js","node_modules/@hola.org/hls.js/lib/controller/stream-controller.js","node_modules/@hola.org/hls.js/lib/controller/timeline-controller.js","node_modules/@hola.org/hls.js/lib/crypt/aes.js","node_modules/@hola.org/hls.js/lib/crypt/aes128-decrypter.js","node_modules/@hola.org/hls.js/lib/crypt/decrypter.js","node_modules/@hola.org/hls.js/lib/demux/aacdemuxer.js","node_modules/@hola.org/hls.js/lib/demux/adts.js","node_modules/@hola.org/hls.js/lib/demux/demuxer-inline.js","node_modules/@hola.org/hls.js/lib/demux/demuxer-worker.js","node_modules/@hola.org/hls.js/lib/demux/demuxer.js","node_modules/@hola.org/hls.js/lib/demux/exp-golomb.js","node_modules/@hola.org/hls.js/lib/demux/id3.js","node_modules/@hola.org/hls.js/lib/demux/tsdemuxer.js","node_modules/@hola.org/hls.js/lib/errors.js","node_modules/@hola.org/hls.js/lib/event-handler.js","node_modules/@hola.org/hls.js/lib/events.js","node_modules/@hola.org/hls.js/lib/helper/aac.js","node_modules/@hola.org/hls.js/lib/helper/buffer-helper.js","node_modules/@hola.org/hls.js/lib/helper/level-helper.js","node_modules/@hola.org/hls.js/lib/hls.js","node_modules/@hola.org/hls.js/lib/loader/fragment-loader.js","node_modules/@hola.org/hls.js/lib/loader/key-loader.js","node_modules/@hola.org/hls.js/lib/loader/playlist-loader.js","node_modules/@hola.org/hls.js/lib/remux/mp4-generator.js","node_modules/@hola.org/hls.js/lib/remux/mp4-remuxer.js","node_modules/@hola.org/hls.js/lib/remux/passthrough-remuxer.js","node_modules/@hola.org/hls.js/lib/utils/attr-list.js","node_modules/@hola.org/hls.js/lib/utils/binary-search.js","node_modules/@hola.org/hls.js/lib/utils/browser.js","node_modules/@hola.org/hls.js/lib/utils/cea-608-parser.js","node_modules/@hola.org/hls.js/lib/utils/cues.js","node_modules/@hola.org/hls.js/lib/utils/logger.js","node_modules/@hola.org/hls.js/lib/utils/polyfill.js","node_modules/@hola.org/hls.js/lib/utils/url.js","node_modules/@hola.org/hls.js/lib/utils/xhr-loader.js","node_modules/events/events.js","node_modules/webworkify/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","hola_flowplayer_hls","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","Hls","default","provider","version","hls_version","provider_version","VERSION","ls","E","localStorage","engine_attached","engine_disabled","script_conf","attrs","register","manual_init","script","document","currentScript","querySelector","rpercent","indexOf","hasAttribute","getAttribute","isNaN","console","error","provider_name","disabled","getItem","info","autoinit","Math","random","extension","flowplayer","hlsjsConfig","hlsconf","common","extend","support","brwsr","browser","coreV6","win","mse","MediaSource","WebKitMediaSource","performance","isHlsType","typ","toLowerCase","hlsQualitiesSupport","conf","hlsQualities","clip","inlineVideo","engineImpl","player","root","videoTag","hls","recover","recoverMediaErrorDate","swapAudioCodecDate","bc","bean","doRecover","etype","isNetworkError","debug","log","removeClass","addClass","startLoad","now","recoverMediaError","swapAudioCodec","one","paused","poster","play","handleError","errorCode","src","url","errobj","video","addPoster","removePoster","maxLevel","dataQuality","quality","replace","removeAllQualityClasses","qualities","forEach","qClean","find","removeNode","qIndex","lastSelectedLevel","initQualitySelection","hlsQualitiesConf","data","selector","levels","qIndices","levelIndex","height","split","q","push","parseInt","Number","level","videoCodec","isTypeSupported","unshift","idx","label","width","min","bitrate","round","value","startLevel","loadLevel","createElement","class","appendChild","data-quality","on","selectors","active","choice","currentTarget","smooth","smoothSwitching","hasClass","nextLevel","currentLevel","toggleClass","engine","engineName","pick","sources","source","type","createAbsoluteUrl","load","EVENTS","ended","loadeddata","pause","progress","ratechange","seeked","timeupdate","volumechange","HLSEVENTS","Events","autoplay","hlsUpdatedConf","hlsjs","hlsClientConf","destroy","index","attr","findDirect","removeAttribute","volume","volumeLevel","x-webkit-airplay","Object","keys","key","arg","flow","originalEvent","selectorIndex","ct","currentTime","seekable","updatedVideo","seekOffset","liveSyncPosition","dvr","buffered","buffer","buffend","duration","end","videoWidth","videoHeight","bufferWhilePaused","stopLoad","trigger","start","playbackRate","ignore","autoLevelEnabled","loop","playlist","advance","nextLoadLevel","recoverNetworkError","preventDefault","unload","_e","api","pos","live","_api","manual_level","hola_adaptive","prepend","DefaultConfig","hasOwnProperty","undefined","autoStartLoad","listeners","expose","fperr","ERRORTYPES","ErrorTypes","ERRORDETAILS","ErrorDetails","loadSource","pluginQualitySelectorEnabled","safari","samples","sample","metadataHandler","dts","off","raw","unit","Decoder","TextDecoder","decode","decodeURIComponent","encodeURIComponent","String","fromCharCode","apply","substr","details","fragments","config","nudgeOffset","fatal","strict","NETWORK_ERROR","frag","MEDIA_ERROR","FRAG_LOOP_LOADING_ERROR","BUFFER_STALLED_ERROR","adaptOnStartOnly","attachMedia","firstframe","playPromise","catch","message","resume","seek","time","speed","val","test","splash","css","isSupported","holaEngine","canPlay","wn","navigator","userAgent","engines","attach","detach","_interopRequireDefault","obj","__esModule","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","descriptor","protoProps","staticProps","_events","_events2","_eventHandler","_eventHandler2","_bufferHelper","_bufferHelper2","_errors","_logger","AbrController","_EventHandler","_this","getPrototypeOf","FRAG_LOADING","FRAG_LOAD_PROGRESS","FRAG_LOADED","ERROR","lastLoadedFragLevel","_autoLevelCapping","_nextAutoLevel","onCheck","abandonRulesCheck","bind","clearTimer","timer","setInterval","fragCurrent","stats","aborted","loadCounter","lastfetchduration","trequest","lastbw","loaded","v","media","loader","logger","warn","readyState","autoLevel","requestDelay","loadRate","max","expectedLen","fragLoadedDelay","bufferStarvationDelay","bufferInfo","maxBufferHole","fragLevelNextLoadedDelay","toFixed","abort","FRAG_LOAD_EMERGENCY_ABORTED","FRAG_LOAD_ERROR","FRAG_LOAD_TIMEOUT","clearInterval","get","set","newLevel","maxAutoLevel","BufferController","MEDIA_ATTACHING","MEDIA_DETACHING","BUFFER_RESET","BUFFER_APPENDING","BUFFER_CODECS","BUFFER_EOS","BUFFER_FLUSHING","FRAG_PARSING_DATA","FRAG_APPENDING","LEVEL_UPDATED","_msDuration","_levelDuration","onsbue","onSBUpdateEnd","onsbe","onSBUpdateError","tracks","audioTrack","audio","container","audioBuffer","sourceBuffer","abs","timestampOffset","startPTS","updating","err","audioTimestampOffset","ms","mediaSource","onmso","onMediaSourceOpen","onmse","onMediaSourceEnded","onmsc","onMediaSourceClose","addEventListener","URL","createObjectURL","endOfStream","removeEventListener","pendingTracks","flushRange","segments","appended","waitForAppended","MEDIA_DETACHED","MEDIA_ATTACHED","onBufferCodecs","doAppending","isSbUpdating","FRAG_APPENDED","str","b","len","keepSec","st","sb","dump","remove","_needsFlush","doFlush","_needsEos","onBufferEos","updateMediaElementDuration","keep","keepBuffered","clear","event","lastSegment","printDump","BUFFER_APPENDING_ERROR","removeSourceBuffer","dumpSegments","track","prev","codec","levelCodec","isMp3","isTrackChanged","detachMedia","trackName","mimeType","addSourceBuffer","BUFFER_ADD_CODEC_ERROR","startOffset","endOffset","flushBufferCounter","totalduration","levelDuration","sourceBuffers","Infinity","range","flushBuffer","shift","BUFFER_FLUSHED","segment","join","dumpSegment","appendBuffer","appendError","BUFFER_APPEND_ERROR","reason","appendErrorMaxRetry","BUFFER_FULL_ERROR","bufStart","bufEnd","flushStart","flushEnd","POSITIVE_INFINITY","CapLevelController","FPS_DROP_LEVEL_CAPPING","MANIFEST_PARSED","capLevelToPlayerSize","restrictedLevels","autoLevelCapping","isLevelRestricted","droppedLevel","HTMLVideoElement","firstLevel","getMaxLevel","detectPlayerSize","levelsLength","streamController","nextLevelSwitch","capLevelIndex","result","mWidth","mediaWidth","mHeight","mediaHeight","lWidth","lHeight","pixelRatio","devicePixelRatio","clientWidth","offsetWidth","contentScaleFactor","clientHeight","offsetHeight","FPSController","isVideoPlaybackQualityAvailable","capLevelOnFPSDrop","getVideoPlaybackQuality","checkFPSInterval","fpsDroppedMonitoringPeriod","decodedFrames","droppedFrames","lastTime","currentPeriod","currentDropped","lastDroppedFrames","currentDecoded","lastDecodedFrames","droppedFPS","FPS_DROP","totalDroppedFrames","fpsDroppedMonitoringThreshold","videoPlaybackQuality","checkFPS","totalVideoFrames","droppedVideoFrames","webkitDecodedFrameCount","webkitDroppedFrameCount","_levelHelper","_levelHelper2","LevelController","MANIFEST_LOADED","LEVEL_LOADED","ontick","tick","_manualLevel","clearTimeout","_levels","loadError","levelDetails","canload","isLive","_level","audioCodec","bitrateStart","_this2","levels0","bitrateSet","videoCodecFound","audioCodecFound","brokenmp4inmp3","checkSupported","isVideoLevel","AUDIO","redundantLevelId","urlId","filter","sort","_firstLevel","MANIFEST_INCOMPATIBLE_CODECS_ERROR","LEVEL_SWITCH","LEVEL_LOADING","id","OTHER_ERROR","LEVEL_SWITCH_ERROR","levelId","levelError","KEY_LOAD_ERROR","KEY_LOAD_TIMEOUT","LEVEL_LOAD_ERROR","LEVEL_LOAD_TIMEOUT","clearLevelDetailsOnSwitching","recoverable","abrController","nextAutoLevel","newDetails","reloadInterval","averagetargetduration","targetduration","curLevel","curDetails","endSN","setTimeout","setLevelInternal","_startLevel","_demuxer","_demuxer2","_binarySearch","_binarySearch2","_browser","_browser2","State","STOPPED","STARTING","IDLE","PAUSED","KEY_LOADING","FRAG_LOADING_WAITING_RETRY","WAITING_LEVEL","PARSING","PARSED","ENDED","StreamController","MANIFEST_LOADING","LEVEL_PTS_UPDATED","KEY_LOADED","FRAG_CHUNK_LOADED","FRAG_PARSING_INIT_SEGMENT","FRAG_PARSED","DEMUXER_QUEUE_EMPTY","audioCodecSwap","ticks","noMediaCount","fragPreviousSaved","state","startPosition","arguments","lastCurrentTime","demuxer","fragParsing","fragPrevious","fragLoadError","lastLevel","waitLiveLevel","nextLoadPosition","stopDemuxer","enableWorker","waitQueue","doTick","loadedmetadata","bufferController","_doTickIdle","sn","startSN","retryDate","seeking","_checkBuffer","_checkFragmentChanged","levelLastLoaded","startFragRequested","startFragPrefetch","maxBufLen","maxBufferSize","maxBufferLength","maxMaxBufferLength","bufferLen","trace","_fetchPayloadOrEos","_ref","fragLen","bufferEnd","_ensureFragmentAtLivePoint","_findFragment","_loadFragmentOrKey","_ref2","maxLatency","liveMaxLatencyDuration","liveMaxLatencyDurationCount","maxFragLookUpTolerance","computeLivePosition","PTSKnown","targetSN","_ref3","holaSeek","foundFrag","seekFlag","PTSDTSshift","search","candidate","lastGop","firstGop","deltaPTS","curSNIdx","maxSeekHole","dropped","isBuffered","_ref4","decryptdata","uri","fragLoadIdx","maxThreshold","fragLoadingLoopThreshold","loadIdx","fragTimeOffset","position","bufferRange","getBufferRange","immediateSwitch","previouslyPaused","fetchdelay","currentRange","nextRange","nextLevelId","fragLastKbps","followingBufferRange","onvseeking","onMediaSeeking","onvseeked","onMediaSeeked","onvended","onMediaEnded","fragment","seekDuringFirst","stalled","aac","heaac","audioCodecSwitch","startLevelLoaded","newLevelId","sliding","lastDetails","canMerge","clearLevelDetails","mergeDetails","payload","byteLength","fragLevel","defaultAudioCodec","lastAudioCodec","cc","mediaSeeking","accurateTimeOffset","final","ua","metadata","channelCount","unique","mergedTrack","audiovideo","initSegment","tparse2","Date","endPTS","startDTS","endDTS","nb","data1","data2","tparsed","lastGopPTS","drift","updateFragPTS","timeRangesToString","tbuffered","tfirst","FRAG_BUFFERED","fragLoadingMaxRetry","delay","pow","fragLoadingRetryDelay","startPositionBuffered","isSafari","expectedPlaying","playheadMoving","stallReported","dur","BUF_STATISTICS","bufNotStalled","ts","lowBuf","stallLowBuf","nudgeRetry","tnow","stalledDuration","lowBufferWatchdogPeriod","bufStalledLow","nextBufferStart","nextStart","delta","BUFFER_SEEK_OVER_HOLE","hole","bufSeekOverHole","highBufferWatchdogPeriod","bufStalledHigh","nudgeMaxRetry","_currentTime","targetTime","BUFFER_NUDGE_ON_STALL","bufNudge","_this3","immediateLevelSwitchEnd","lu","targetLatency","liveSyncDuration","liveSyncDurationCount","nextState","previousState","_state","STREAM_STATE_TRANSITION","nextBufferRange","_cea608Parser","_cea608Parser2","_cues","_cues2","TimelineController","FRAG_PARSING_USERDATA","enabled","enableCEA708Captions","channel1","newCue","startTime","endTime","screen","textTrack1","createTextTrack","channel2","textTrack2","cea608Parser","pts","cues","removeCue","kind","lang","addTextTrack","lastPts","NEGATIVE_INFINITY","closedCaptions","clearCurrentCues","ccdatas","extractCea608Data","bytes","addData","byteArray","tmpByte","ccbyte1","ccbyte2","ccValid","ccType","count","actualCCBytes","j","AES","_tables","_precompute","tmp","encKey","decKey","sbox","decTable","keyLen","rcon","slice","_key","x","xInv","x2","x4","x8","tEnc","tDec","encTable","sboxInv","d","th","encrypted0","encrypted1","encrypted2","encrypted3","out","offset","a2","b2","c2","c","nInnerRounds","kIndex","table","table0","table1","table2","table3","_aes","_aes2","AES128Decrypter","initVector","iv","Uint32Array","word","encrypted","init0","init1","init2","init3","wordIx","encrypted32","Int32Array","byteOffset","decipher","Array","decrypted","Uint8Array","decrypted32","ntoh","decrypt","doDecrypt","localDecrypt","subarray","_aes128Decrypter","_aes128Decrypter2","Decrypter","browserCrypto","crypto","subtle","webkitSubtle","disableWebCrypto","callback","enableSoftwareAES","decryptBySoftware","decryptByWebCrypto","importKey","name","then","importedKey","onWebCryptoError","key8","iv8","view","DataView","getUint32","decrypter","ivview","Event","FRAG_DECRYPT_ERROR","_adts","_adts2","_id","_id2","AACDemuxer","observer","remuxerClass","typeSupported","remuxer","_aacTrack","sequenceNumber","timeOffset","accurate","first","frameLength","frameDuration","frameIndex","headerLength","stamp","aacSample","id3","timeStamp","fragStats","keyFrames","notFirstKeyframe","audiosamplerate","getAudioConfig","samplerate","timescale","PES_TIMESCALE","initDTS","_initDTS","nextAvcDts","_PTSNormalize","remux","hasTimeStamp","ADTS","adtsObjectType","adtsSampleingIndex","adtsExtensionSampleingIndex","adtsChanelConfig","adtsSampleingRates","FRAG_PARSING_ERROR","_aacdemuxer","_aacdemuxer2","_tsdemuxer","_tsdemuxer2","_mp4Remuxer","_mp4Remuxer2","_passthroughRemuxer","_passthroughRemuxer2","DemuxerInline","onFragParsingData","ev","flush","lastSN","probe","mp2t","_demuxerInline","_demuxerInline2","_events3","_events4","DemuxerWorker","_len","emit","concat","_len2","_key2","removeListener","cmd","JSON","parse","postMessage","objData","FRAG_STATISTICS","FRAG_PARSING_METADATA","_demuxerWorker","_demuxerWorker2","_decrypter","_decrypter2","Demuxer","trail","mp4","enableMP2TPassThrough","mpeg","mp3","disableMp3","Worker","work","w","onwmsg","onWorkerMessage","stringify","demuxInitialized","terminate","traillen","newlen","olddata","newdata","newtrail","method","localthis","decryptedData","pushDecrypted","ExpGolomb","bytesAvailable","bitsAvailable","workingBytes","availableBytes","skipBytes","loadWord","size","bits","valu","readBits","leadingZeroCount","skipLZ","skipBits","clz","readUEG","deltaScale","lastScale","nextScale","readEG","profileIdc","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","readUByte","skipUEG","chromaFormatIdc","readBoolean","skipScalingList","picOrderCntType","skipEG","sarRatio","ceil","ID3","_hasTimeStamp","byte1","byte2","byte3","byte4","tagSize","endPos","header","readUTF","_parseID3Frames","_length","_payload","tagId","timestamp","pts33Bit","_timeStamp","_expGolomb","_expGolomb2","TSDemuxer","lastCC","_setEmptyTracks","_clearAllData","_avcTrack","sps","savedSps","pps","savedPps","assign","nbNalu","isAAC","_id3Track","_txtTrack","pmtParsed","_pmtId","_clearIDs","aacOverFlow","lastAacPTS","switchLevel","_avcData","_aacData","_id3Data","_clearAvcData","_clearAacData","_clearID3Data","insertDiscontinuity","pes","stt","pid","num","avcData","aacData","id3Data","codecsOnly","passthrough","unknownPIDs","_duration","contiguous","firstSample","trackSwitch","lastContiguous","framesCount","remuxAVCCount","remuxAACCount","fragStartPts","fragStartDts","gopStartDTS","fragStartAVCPos","fragStartAACPos","currentSN","avcId","aacId","id3Id","_parsePES","_parseAVCPES","_parseAACPES","_parseMPEGPES","_parseID3PES","_parsePAT","_parsePMT","units","_save","_new","_recalcTrack","maxk","gopEndDTS","_saveAVCSamples","_saveAACSamples","_saveID3Samples","_saveTextSamples","videoStartPTS","videoEndPTS","expectedSampleDuration","nextAacPTS","nextAacPts","AVUnsync","_filterSamples","nextStartPts","_initPTS","mpegSupported","sectionLength","tableEnd","programInfoLength","HEVC","unknownStream","stream","pesFlags","pesLen","pesHdrLen","pesData","pesPts","pesDts","payloadStartOffset","newData","splice","expGolombDecoder","avcSample","_parseAVCNALu","units2","hlsConfig","lastavcSample","lastUnit","debugString","sliceType","readSliceType","discardEPB","payloadType","payloadSize","endOfCaptions","wholeBytesAvailable","disableSEIkeyframes","readUShort","readUInt","firstByte","secondByte","totalCCs","_insertSampleInOrder","readSPS","codecarray","codecstring","h","toString","arr","array","overflow","unitType","lastUnitStart","lastUnitType","lastUnits","newLength","EPBPositions","sourceIndex","newPTS","parsed","_parseMpeg","bitRate","sampleRate","BitratesMap","SamplingRateMap","headerB","headerC","headerE","headerF","headerG","columnInBitrates","columnInSampleRates","padding","_onMpegFrame","_onMpegNoise","MANIFEST_LOAD_ERROR","MANIFEST_LOAD_TIMEOUT","MANIFEST_PARSING_ERROR","INTERNAL_EXCEPTION","_typeof","Symbol","iterator","EventHandler","onEvent","events","handledEvents","useGenericHandler","registerListeners","unregisterListeners","isEventHandler","onEventGeneric","eventToFunction","funcName","PLAYER_CREATED","PLAYER_DESTROYED","FRAG_CHANGED","DESTROYING","AAC","BufferHelper","maxHoleDuration","vbuffered","bufferedInfo","bufferStart","bufferStartNext","buffered2","diff","buf2len","buf2end","LevelHelper","oldDetails","_LevelHelper$probeDet","probeDetails","getTimes","startTS","endTS","programDateTime","getTime","oldTimes","newTimes","PTSFrag","oldfragments","newfragments","ccOffset","_LevelHelper$probeDet2","oldFrag","newFrag","fragIdx","updatePTS","fromIdx","toIdx","fragFrom","fragTo","fragToPTS","_playlistLoader","_playlistLoader2","_fragmentLoader","_fragmentLoader2","_abrController","_abrController2","_bufferController","_bufferController2","_capLevelController","_capLevelController2","_streamController","_streamController2","_levelController","_levelController2","_timelineController","_timelineController2","_fpsController","_fpsController2","_xhrLoader","_xhrLoader2","_keyLoader","_keyLoader2","defaultConfig","prop","enableLogs","playlistLoader","fragmentLoader","levelController","capLevelController","fpsController","timelineController","keyLoader","players","opera","checkOpera","checkChrome","exec","match","res","isIe","manifestLoadingTimeOut","manifestLoadingMaxRetry","manifestLoadingRetryDelay","levelLoadingTimeOut","levelLoadingMaxRetry","levelLoadingRetryDelay","fragLoadingTimeOut","fLoader","pLoader","cueHandler","stretchShortVideoTrack","removeAllListeners","globalId","immediateLevelSwitch","manualLevel","FragmentLoader","firstChunk","loadsuccess","loaderror","loadtimeout","loadprogress","loadchunk","response","KeyLoader","decryptkey","decrypturl","_url","_url2","_attrList","_attrList2","PlaylistLoader","loading","id2","id1","retry","timeout","retryDelay","baseUrl","buildAbsoluteURL","string","baseurl","re","resolve","resolution","decimalResolution","decimalInteger","NAME","enumeratedString","codecs","CODECS","avc1toavcoti","segmentNumber","uint8View","levelkey","cloneObj","createInitializationVector","avcdata","fragdecryptdata","regexp","byteRangeEndOffset","byteRangeStartOffset","tagList","parseFloat","map","params","fragmentDecryptdataFromLevelkey","decryptparams","keyAttrs","decryptmethod","decrypturi","URI","decryptiv","hexadecimalInteger","pop","responseText","responseURL","tload","mtime","getResponseHeader","parseLevelPlaylist","parseMasterPlaylist","UINT32_MAX","MP4","types","avc1","avcC","btrt","dinf","dref","esds","ftyp","hdlr","mdat","mdhd","mdia","mfhd","minf","moof","moov","mp4a",".mp3","mvex","mvhd","sdtp","stbl","stco","stsc","stsd","stsz","stts","tfdt","tfhd","traf","trak","trun","trex","tkhd","vmhd","smhd","charCodeAt","videoHdlr","audioHdlr","HDLR_TYPES","STTS","STSC","STCO","STSZ","VMHD","SMHD","STSD","majorBrand","avc1Brand","minorVersion","FTYP","box","DINF","baseMediaDecodeTime","boxes","flags","dependsOn","isDependedOn","hasRedundancy","avcc","configlen","sampleDependencyTable","upperWordBaseMediaDecodeTime","floor","lowerWordBaseMediaDecodeTime","cts","arraylen","isLeading","paddingValue","isNonSync","degradPrio","init","movie","_aac","_aac2","_mp4Generator","_mp4Generator2","MP4Remuxer","ISGenerated","PES2MP4SCALEFACTOR","MP4_TIMESCALE","videoTrack","id3Track","textTrack","generateIS","audioData","remuxAudio","audioTrackLength","audioStartPTS","remuxVideo","videoData","remuxEmptyAudio","remuxID3","remuxText","initPTS","audioSamples","videoSamples","pesTimeScale","computePTSDTS","greatestCommonDivisor","mp4SampleDuration","firstPTS","firstDTS","lastPTS","lastDTS","pes2mp4ScaleFactor","inputSamples","outputSamples","reduce","curr","videoGap","_i","_sample","setUint32","videoDurAvg","videoDurStd","cttsError","_i2","mp4SampleLength","compositionTimeOffset","lastFrameDuration","gapTolerance","deltaToFrameEnd","sqrt","mp4Sample","ptsnorm","dtsnorm","fillFrame","newStamp","mp4timeScale","rawMPEG","samples0","pesFrameDuration","nextPtsNorm","ptsNorm","_i3","audioGap","missing","getSilentFrame","_delta","numMissingFrames","_i4","lastSampleDuration","nbSamples","audioDurAvg","audioDurStd","_i5","silentFrame","noSilentFrame","reference","PassThroughRemuxer","rawData","AttrList","parseAttrList","attrName","intValue","MAX_SAFE_INTEGER","stringValue","input","lastIndexOf","BinarySearch","list","comparisonFunction","minIndex","maxIndex","currentIndex","currentElement","comparisonResult","vendor","specialCea608CharsCodes","42","92","94","95","96","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","getCharForByte","byte","charCode","NR_ROWS","NR_COLS","rowsLowCh1","17","18","21","22","23","16","19","20","rowsHighCh1","rowsLowCh2","25","26","29","30","31","24","27","28","rowsHighCh2","backgroundColors","verboseFilter","DATA","DEBUG","INFO","WARNING","TEXT","verboseLevel","setTime","newTime","severity","msg","minLevel","numArrayToHexArray","numArray","hexArray","PenState","foreground","underline","italics","background","flash","styles","attribs","style","other","newPenState","StyledUnicodeChar","uchar","penState","reset","copy","equals","newChar","isDefault","Row","chars","currPenState","equal","empty","isEmpty","absPos","relPos","newPos","setPenState","setCursor","moveCursor","setChar","backSpace","char","startPos","clearFromPos","setStyles","CaptionScreen","rows","currRow","nrRollUpRows","clearToEndOfRow","insertChar","setPenStyles","pacData","newRow","row","indent","prevPos","color","setPen","bkgData","nrRows","getDisplayText","topRowIndex","topRow","asOneRow","displayText","text","rowNr","rowText","getTextString","trim","Cea608Channel","channelNumber","outputFilter","chNr","mode","verbose","displayedMemory","nonDisplayedMemory","lastOutputScreen","currRollUpRow","writeScreen","cueStartTime","lastCueEndTime","newHandler","setPAC","setBkgData","newMode","outputDataUpdate","setMode","setRollUpRows","rollUp","nrCols","colorIndex","colors","updateData","Cea608Parser","field","out1","out2","outputs","channels","currChNr","lastCmdA","lastCmdB","bufferedData","dataCounters","getHandler","setHandler","byteList","cmdFound","charsFound","parseCmd","parseMidrow","parsePAC","parseBackgroundAttributes","parseChars","channel","insertChars","cond1","cond2","ccRCL","ccBS","ccAOF","ccAON","ccDER","ccRU","ccFON","ccRDC","ccTR","ccRTD","ccEDM","ccCR","ccENM","ccEOC","ccTO","ccMIDROW","case1","case2","interpretPAC","pacIndex","channelNr","charCodes","charCode1","oneCode","hexCodes","cueSplitAtTime","Cues","captionScreen","cue","indenting","VTTCue","TextTrackCue","line","align","addCue","noop","formatMsg","consolePrintFn","func","args","checkRepeatWrapper","lastMsg","exportLoggerFunctions","debugConfig","_len3","functions","_key3","exportedLogger","holaLog","fakeLogger","hlsObject","ArrayBuffer","that","resultArray","URLHelper","baseURL","relativeURL","relativeURLQuery","relativeURLHash","relativeURLHashSplit","relativeURLQuerySplit","baseURLHashSplit","baseURLQuerySplit","baseURLDomainSplit","baseURLProtocol","baseURLProtocolDomain","baseURLPath","builtURL","buildAbsolutePath","substring","basePath","relativePath","nUpLn","nEnd","sRelPath","sDir","sPath","nStart","RegExp","XhrLoader","xhrSetup","timeoutHandle","retryHandle","responseType","onSuccess","onError","onTimeout","maxRetry","onProgress","byteRange","loadInternal","xhr","XDomainRequest","XMLHttpRequest","onloadend","loadend","onprogress","location","protocol","open","setRequestHeader","send","status","lengthComputable","total","EventEmitter","_maxListeners","isFunction","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","er","handler","context","addListener","listener","m","newListener","warned","once","fired","listenerCount","evlistener","emitter","bundleFn","cache","fn","options","resolveSources","workerSources","depPath","depKey","wkey","cacheKeys","exp","wcache","Function","skey","scache","webkitURL","mozURL","msURL","blob","Blob","bare","workerUrl","worker","objectURL"],"mappings":"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","file":"hola_flowplayer_hls.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var Hls = window.Hls = require('@hola.org/hls.js').default;\nvar provider = module.exports = require('@hola.org/flowplayer-hlsjs');\nprovider.Hls = Hls;\nprovider.version = '1.0.45';\nprovider.hls_version = provider.Hls.version;\nprovider.provider_version = provider.VERSION;\n","/*jslint browser: true, for: true, node: true */\n/*eslint indent: [\"error\", 4], no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n/*eslint-disable quotes, no-console */\n/*global window */\n\n/*!\n\n   hlsjs engine plugin for Flowplayer HTML5\n\n   Copyright (c) 2015-2017, Flowplayer Drive Oy\n\n   Released under the MIT License:\n   http://www.opensource.org/licenses/mit-license.php\n\n   Includes hls.js\n   Copyright (c) 2017 Dailymotion (http://www.dailymotion.com)\n   https://github.com/video-dev/hls.js/blob/master/LICENSE\n\n   Requires Flowplayer HTML5 version 6.x\n   revision: $GIT_ID$\n\n*/\n\"use strict\";\nvar E = module.exports;\nvar ls;\ntry { ls = window.localStorage; } catch(e){}\nvar provider_name = 'Hola Flowplayer HLS provider';\nvar engine_attached = false, engine_disabled = false;\nvar script_conf = (function script_conf_init(){\n    var attrs = {register: 'register-percent', manual_init: 'manual-init'};\n    var script = document.currentScript||\n        document.querySelector('#hola_flowplayer_hls_provider');\n    if (!script)\n        return {};\n    var rpercent = '{[=it.HOLA_REGISTER_PERCENT]}';\n    if (!rpercent.indexOf('{['))\n    {\n        if (!script.hasAttribute(attrs.register))\n            return {};\n        rpercent = +script.getAttribute(attrs.register);\n    }\n    if (isNaN(rpercent)||rpercent<0||rpercent>100)\n    {\n        console.error(provider_name+': invalid '+attrs.register+\n            ' attribute, expected a value between 0 and 100 but '+\n            script.getAttribute(attrs.register)+' found');\n        return {disabled: true};\n    }\n    var embedded = '{[=it.HOLA_EMBEDDED_PROVIDER]}'==1;\n    // loader.js takes percent control on its side\n    if (embedded)\n        rpercent = 100;\n    if (ls && ls.getItem('hola_provider_register_percent'))\n    {\n        rpercent = +ls.getItem('hola_provider_register_percent');\n        console.info(provider_name+': '+attrs.register+' forced to '+rpercent+\n            '% by localStorage configuration');\n    }\n    var autoinit = !embedded && !script.hasAttribute(attrs.manual_init);\n    return {autoinit: autoinit,\n        disabled: !rpercent||Math.random()*100>rpercent};\n})();\nvar extension = function (Hls, flowplayer, hlsjsConfig) {\n    var engineName = \"holaHls\",\n        hlsconf,\n        common = flowplayer.common,\n        extend = flowplayer.extend,\n        support = flowplayer.support,\n        brwsr = support.browser,\n        version = flowplayer.version,\n        coreV6 = version.indexOf(\"6.\") === 0,\n        win = window,\n        mse = win.MediaSource || win.WebKitMediaSource,\n        performance = win.performance,\n\n        isHlsType = function (typ) {\n            return typ.toLowerCase().indexOf(\"mpegurl\") > -1;\n        },\n        hlsQualitiesSupport = function (conf) {\n            var hlsQualities = (conf.clip && conf.clip.hlsQualities) || conf.hlsQualities;\n\n            return support.inlineVideo &&\n                    (hlsQualities === true ||\n                    (hlsQualities && hlsQualities.length));\n        },\n\n        engineImpl = function hlsjsEngine2(player, root) {\n            var bean = flowplayer.bean,\n                videoTag,\n                hls,\n\n                recover, // DEPRECATED\n                recoverMediaErrorDate,\n                swapAudioCodecDate,\n                recoveryClass = \"is-seeking\",\n                posterClass = \"is-poster\",\n                doRecover = function (conf, etype, isNetworkError) {\n                    if (conf.debug) {\n                        console.log(\"recovery.\" + engineName, \"<-\", etype);\n                    }\n                    common.removeClass(root, \"is-paused\");\n                    common.addClass(root, recoveryClass);\n                    if (isNetworkError) {\n                        hls.startLoad();\n                    } else {\n                        var now = performance.now();\n                        if (!recoverMediaErrorDate || now - recoverMediaErrorDate > 3000) {\n                            recoverMediaErrorDate = performance.now();\n                            hls.recoverMediaError();\n                        } else if (!swapAudioCodecDate || (now - swapAudioCodecDate) > 3000) {\n                            swapAudioCodecDate = performance.now();\n                            hls.swapAudioCodec();\n                            hls.recoverMediaError();\n                        }\n                    }\n                    // DEPRECATED\n                    if (recover > 0) {\n                        recover -= 1;\n                    }\n                    bean.one(videoTag, \"seeked.\" + engineName, function () {\n                        if (videoTag.paused) {\n                            common.removeClass(root, posterClass);\n                            player.poster = false;\n                            videoTag.play();\n                        }\n                        common.removeClass(root, recoveryClass);\n                    });\n                },\n                handleError = function (errorCode, src, url) {\n                    var errobj = {code: errorCode};\n\n                    if (errorCode > 2) {\n                        errobj.video = extend(player.video, {\n                            src: src,\n                            url: url || src\n                        });\n                    }\n                    return errobj;\n                },\n\n                // pre 6.0.4 poster detection\n                bc,\n                has_bg,\n\n                addPoster = function () {\n                    bean.one(videoTag, \"timeupdate.\" + engineName, function () {\n                        common.addClass(root, posterClass);\n                        player.poster = true;\n                    });\n                },\n                removePoster = function () {\n                    if (coreV6 && player.poster) {\n                        bean.one(videoTag, \"timeupdate.\" + engineName, function () {\n                            common.removeClass(root, posterClass);\n                            player.poster = false;\n                        });\n                    }\n                },\n\n                maxLevel = 0,\n\n                // v6 qsel\n                qActive = \"active\",\n                dataQuality = function (quality) {\n                    // e.g. \"Level 1\" -> \"level1\"\n                    if (!quality) {\n                        quality = player.quality;\n                    }\n                    return quality.toLowerCase().replace(/\\ /g, \"\");\n                },\n                removeAllQualityClasses = function () {\n                    var qualities = player.qualities;\n\n                    if (!qualities || !qualities.length) {\n                        return;\n                    }\n                    common.removeClass(root, \"quality-abr\");\n                    qualities.forEach(function (quality) {\n                        common.removeClass(root, \"quality-\" + dataQuality(quality));\n                    });\n                },\n                qClean = function () {\n                    if (coreV6) {\n                        delete player.hlsQualities;\n                        removeAllQualityClasses();\n                        common.find(\".fp-quality-selector\", root).forEach(common.removeNode);\n                    }\n                },\n                qIndex = function () {\n                    return player.hlsQualities[player.qualities.indexOf(player.quality) + 1];\n                },\n\n                // v7 qsel\n                lastSelectedLevel = -1,\n\n                // v7 and v6 qsel\n                initQualitySelection = function (hlsQualitiesConf, conf, data) {\n                    var levels = data.levels,\n                        hlsQualities = [],\n                        qIndices = [],\n                        levelIndex = 0,\n                        selector;\n\n                    qClean();\n\n                    if (hlsQualitiesConf === \"drive\") {\n                        switch (levels.length) {\n                        case 4:\n                            hlsQualities = [1, 2, 3];\n                            break;\n                        case 5:\n                            hlsQualities = [1, 2, 3, 4];\n                            break;\n                        case 6:\n                            hlsQualities = [1, 3, 4, 5];\n                            break;\n                        case 7:\n                            hlsQualities = [1, 3, 5, 6];\n                            break;\n                        case 8:\n                            hlsQualities = [1, 3, 6, 7];\n                            break;\n                        default:\n                            if (levels.length < 3 ||\n                                    (levels[0].height && levels[2].height && levels[0].height === levels[2].height)) {\n                                return;\n                            }\n                            hlsQualities = [1, 2];\n                        }\n                    } else {\n                        if (typeof hlsQualitiesConf === \"string\") {\n                            hlsQualitiesConf.split(/\\s*,\\s*/).forEach(function (q) {\n                                qIndices.push(parseInt(q, 10));\n                            });\n                        } else if (typeof hlsQualitiesConf !== \"boolean\") {\n                            hlsQualitiesConf.forEach(function (q) {\n                                qIndices.push(isNaN(Number(q))\n                                    ? q.level\n                                    : q);\n                            });\n                        }\n                        levels.forEach(function (level) {\n                            // do not check audioCodec,\n                            // as e.g. HE_AAC is decoded as LC_AAC by hls.js on Android\n                            if ((hlsQualitiesConf === true || qIndices.indexOf(levelIndex) > -1) &&\n                                    (!level.videoCodec ||\n                                    (level.videoCodec &&\n                                    mse.isTypeSupported('video/mp4;codecs=' + level.videoCodec)))) {\n                                hlsQualities.push(levelIndex);\n                            }\n                            levelIndex += 1;\n                        });\n                        if (hlsQualities.length < 2) {\n                            return;\n                        }\n                    }\n\n                    if (coreV6) {\n                        player.qualities = [];\n                    } else {\n                        if (hlsQualitiesConf === \"drive\" ||\n                                hlsQualitiesConf === true ||\n                                qIndices.indexOf(-1) > -1) {\n                            hlsQualities.unshift(-1);\n                        }\n\n                        player.video.qualities = [];\n                    }\n\n                    hlsQualities.forEach(function (idx) {\n                        var level = levels[idx],\n                            q = qIndices.length\n                                ? hlsQualitiesConf[qIndices.indexOf(idx)]\n                                : idx,\n                            label = \"Level \" + (idx + 1);\n\n                        if (idx < 0) {\n                            label = q.label || \"Auto\";\n                        } else if (q.label) {\n                            label = q.label;\n                        } else {\n                            if (level.width && level.height) {\n                                label = Math.min(level.width, level.height) + \"p\";\n                            }\n                            if (!coreV6 && hlsQualitiesConf !== \"drive\" && level.bitrate) {\n                                label += \" (\" + Math.round(level.bitrate / 1000) + \"k)\";\n                            }\n                        }\n\n                        if (coreV6) {\n                            player.qualities.push(label);\n                        } else {\n                            player.video.qualities.push({value: idx, label: label});\n                        }\n                    });\n\n                    if (!coreV6) {\n                        if (lastSelectedLevel > -1 || hlsQualities.indexOf(-1) < 0) {\n                            hls.startLevel = hlsQualities.indexOf(lastSelectedLevel) < 0\n                                ? hlsQualities[0]\n                                : lastSelectedLevel;\n                            hls.loadLevel = hls.startLevel;\n                            player.video.quality = hls.startLevel;\n                        } else {\n                            player.video.quality = hlsQualities.indexOf(lastSelectedLevel) < 0\n                                ? hlsQualities[0]\n                                : lastSelectedLevel;\n                        }\n                        lastSelectedLevel = player.video.quality;\n\n                        return;\n                    }\n\n                    // v6\n                    selector = common.createElement(\"ul\", {\n                        \"class\": \"fp-quality-selector\"\n                    });\n                    common.find(\".fp-ui\", root)[0].appendChild(selector);\n\n                    hlsQualities.unshift(-1);\n                    player.hlsQualities = hlsQualities;\n\n                    if (!player.quality || player.qualities.indexOf(player.quality) < 0) {\n                        player.quality = \"abr\";\n                    } else {\n                        hls.startLevel = qIndex();\n                        hls.loadLevel = hls.startLevel;\n                    }\n\n                    selector.appendChild(common.createElement(\"li\", {\n                        \"data-quality\": \"abr\"\n                    }, \"Auto\"));\n                    player.qualities.forEach(function (q) {\n                        selector.appendChild(common.createElement(\"li\", {\n                            \"data-quality\": dataQuality(q)\n                        }, q));\n                    });\n\n                    common.addClass(root, \"quality-\" + dataQuality());\n\n                    bean.on(root, \"click.\" + engineName, \".fp-quality-selector li\", function (e) {\n                        var choice = e.currentTarget,\n                            selectors,\n                            active,\n                            smooth = conf.smoothSwitching,\n                            paused = videoTag.paused,\n                            i;\n\n                        if (common.hasClass(choice, qActive)) {\n                            return;\n                        }\n\n                        if (!paused && !smooth) {\n                            bean.one(videoTag, \"pause.\" + engineName, function () {\n                                common.removeClass(root, \"is-paused\");\n                            });\n                        }\n\n                        selectors = common.find(\".fp-quality-selector li\", root);\n\n                        for (i = 0; i < selectors.length; i += 1) {\n                            active = selectors[i] === choice;\n                            if (active) {\n                                player.quality = i > 0\n                                    ? player.qualities[i - 1]\n                                    : \"abr\";\n                                if (smooth && !player.poster) {\n                                    hls.nextLevel = qIndex();\n                                } else {\n                                    hls.currentLevel = qIndex();\n                                }\n                                common.addClass(choice, qActive);\n                                if (paused) {\n                                    videoTag.play();\n                                }\n                            }\n                            common.toggleClass(selectors[i], qActive, active);\n                        }\n                        removeAllQualityClasses();\n                        common.addClass(root, \"quality-\" + dataQuality());\n                    });\n                },\n\n                engine = {\n                    engineName: engineName,\n\n                    pick: function (sources) {\n                        var i,\n                            source;\n\n                        for (i = 0; i < sources.length; i += 1) {\n                            source = sources[i];\n                            if (isHlsType(source.type)) {\n                                if (typeof source.src === 'string') {\n                                    source.src = common.createAbsoluteUrl(source.src);\n                                }\n                                return source;\n                            }\n                        }\n                    },\n\n                    load: function (video) {\n                        var conf = player.conf,\n                            EVENTS = {\n                                ended: \"finish\",\n                                loadeddata: \"ready\",\n                                pause: \"pause\",\n                                play: \"resume\",\n                                progress: \"buffer\",\n                                ratechange: \"speed\",\n                                seeked: \"seek\",\n                                timeupdate: \"progress\",\n                                volumechange: \"volume\",\n                                error: \"error\"\n                            },\n                            HLSEVENTS = Hls.Events,\n                            autoplay = !!video.autoplay || !!conf.autoplay,\n                            loadingClass = \"is-loading\",\n                            hlsQualitiesConf = video.hlsQualities || conf.hlsQualities,\n                            hlsUpdatedConf = extend(hlsconf, conf.hlsjs, video.hlsjs),\n                            hlsClientConf = extend({}, hlsUpdatedConf);\n\n                        // allow disabling level selection for single clips\n                        if (video.hlsQualities === false) {\n                            hlsQualitiesConf = false;\n                        }\n\n                        if (!hls) {\n                            videoTag = common.findDirect(\"video\", root)[0]\n                                    || common.find(\".fp-player > video\", root)[0];\n\n                            if (videoTag) {\n                                // destroy video tag\n                                // otherwise <video autoplay> continues to play\n                                common.find(\"source\", videoTag).forEach(function (source) {\n                                    source.removeAttribute(\"src\");\n                                });\n                                videoTag.removeAttribute(\"src\");\n                                videoTag.load();\n                                common.removeNode(videoTag);\n                            }\n\n                            videoTag = common.createElement(\"video\", {\n                                \"class\": \"fp-engine \" + engineName + \"-engine\",\n                                \"autoplay\": autoplay\n                                    ? \"autoplay\"\n                                    : false,\n                                \"volume\": player.volumeLevel, // core ready stanza too late\n                                \"x-webkit-airplay\": \"allow\"\n                            });\n\n                            Object.keys(EVENTS).forEach(function (key) {\n                                var flow = EVENTS[key],\n                                    type = key + \".\" + engineName,\n                                    arg;\n\n                                bean.on(videoTag, type, function (e) {\n                                    if (conf.debug && flow.indexOf(\"progress\") < 0) {\n                                        console.log(type, \"->\", flow, e.originalEvent);\n                                    }\n\n                                    var ct = videoTag.currentTime,\n                                        seekable = videoTag.seekable,\n                                        updatedVideo = player.video,\n                                        seekOffset = updatedVideo.seekOffset,\n                                        liveSyncPosition = player.dvr && hls.liveSyncPosition,\n                                        buffered = videoTag.buffered,\n                                        buffer = 0,\n                                        buffend = 0,\n                                        src = updatedVideo.src,\n                                        i,\n                                        quality = player.quality,\n                                        selectorIndex,\n                                        errorCode;\n\n                                    switch (flow) {\n                                    case \"ready\":\n                                        arg = extend(updatedVideo, {\n                                            duration: videoTag.duration,\n                                            seekable: seekable.length && seekable.end(null),\n                                            width: videoTag.videoWidth,\n                                            height: videoTag.videoHeight,\n                                            url: src\n                                        });\n                                        break;\n                                    case \"resume\":\n                                        removePoster();\n                                        if (!hlsUpdatedConf.bufferWhilePaused) {\n                                            hls.startLoad(ct);\n                                        }\n                                        break;\n                                    case \"seek\":\n                                        removePoster();\n                                        if (!hlsUpdatedConf.bufferWhilePaused && videoTag.paused) {\n                                            hls.stopLoad();\n                                            videoTag.pause();\n                                        }\n                                        arg = ct;\n                                        break;\n                                    case \"pause\":\n                                        if (!hlsUpdatedConf.bufferWhilePaused) {\n                                            hls.stopLoad();\n                                        }\n                                        break;\n                                    case \"progress\":\n                                        if (player.dvr && liveSyncPosition) {\n                                            updatedVideo.duration = liveSyncPosition;\n                                            player.trigger('dvrwindow', [player, {\n                                                start: seekOffset,\n                                                end: liveSyncPosition\n                                            }]);\n                                            if (ct < seekOffset) {\n                                                videoTag.currentTime = seekOffset;\n                                            }\n                                        }\n                                        arg = ct;\n                                        break;\n                                    case \"speed\":\n                                        arg = videoTag.playbackRate;\n                                        break;\n                                    case \"volume\":\n                                        arg = videoTag.volume;\n                                        break;\n                                    case \"buffer\":\n                                        try {\n                                            buffer = buffered.length && buffered.end(null);\n                                            if (ct && buffer) {\n                                                // cycle through time ranges to obtain buffer\n                                                // nearest current time\n                                                for (i = buffered.length - 1; i > -1; i -= 1) {\n                                                    buffend = buffered.end(i);\n                                                    if (buffend >= ct) {\n                                                        buffer = buffend;\n                                                    }\n                                                }\n                                            }\n                                        } catch (ignore) {}\n                                        video.buffer = buffer;\n                                        arg = buffer;\n                                        break;\n                                    case \"finish\":\n                                        if (hlsUpdatedConf.bufferWhilePaused && hls.autoLevelEnabled &&\n                                                (updatedVideo.loop || conf.playlist.length < 2 || conf.advance === false)) {\n                                            hls.nextLoadLevel = maxLevel;\n                                        }\n                                        break;\n                                    case \"error\":\n                                        errorCode = videoTag.error && videoTag.error.code;\n\n                                        if ((hlsUpdatedConf.recoverMediaError && (errorCode === 3 || !errorCode)) ||\n                                                (hlsUpdatedConf.recoverNetworkError && errorCode === 2) ||\n                                                (hlsUpdatedConf.recover && (errorCode === 2 || errorCode === 3))) {\n                                            e.preventDefault();\n                                            doRecover(conf, flow, errorCode === 2);\n                                            return;\n                                        }\n\n                                        arg = handleError(errorCode, src);\n                                        break;\n                                    }\n\n                                    player.trigger(flow, [player, arg]);\n\n                                    if (coreV6) {\n                                        if (flow === \"ready\" && quality) {\n                                            selectorIndex = quality === \"abr\"\n                                                ? 0\n                                                : player.qualities.indexOf(quality) + 1;\n                                            common.addClass(common.find(\".fp-quality-selector li\", root)[selectorIndex],\n                                                    qActive);\n                                        }\n                                    }\n                                });\n                            });\n\n                            player.on(\"error.\" + engineName, function () {\n                                if (hls) {\n                                    player.engine.unload();\n                                }\n                            });\n\n                            if (!hlsUpdatedConf.bufferWhilePaused) {\n                                player.on(\"beforeseek.\" + engineName, function (_e, api, pos) {\n                                    if (api.paused) {\n                                        bean.one(videoTag, \"seeked.\" + engineName, function () {\n                                            videoTag.pause();\n                                        });\n                                        hls.startLoad(pos);\n                                    }\n                                });\n                            }\n\n                            if (!coreV6) {\n                                player.on(\"quality.\" + engineName, function (_e, _api, q) {\n                                    lastSelectedLevel = q;\n                                    if (q == hls.manual_level)\n                                    {\n                                        return;\n                                    }\n\n                                    hls.manual_level = q;\n                                    if (hls.hola_adaptive)\n                                    {\n                                        player.trigger(\"hola_quality_change\");\n                                    }\n                                    else\n                                    {\n                                        hls.loadLevel = hls.manual_level;\n                                    }\n                                });\n\n                            } else if (conf.poster) {\n                                // v6 only\n                                // engine too late, poster already removed\n                                // abuse timeupdate to re-instate poster\n                                player.on(\"stop.\" + engineName, addPoster);\n                                // re-instate initial poster for live streams\n                                if (player.live && !autoplay && !player.video.autoplay) {\n                                    bean.one(videoTag, \"seeked.\" + engineName, addPoster);\n                                }\n                            }\n\n                            common.prepend(common.find(\".fp-player\", root)[0], videoTag);\n\n                        } else {\n                            hls.destroy();\n                            if ((player.video.src && video.src !== player.video.src) || video.index) {\n                                common.attr(videoTag, \"autoplay\", \"autoplay\");\n                            }\n                        }\n\n                        // #28 obtain api.video props before ready\n                        player.video = video;\n\n                        // reset\n                        maxLevel = 0;\n\n                        Object.keys(hlsUpdatedConf).forEach(function (key) {\n                            if (!Hls.DefaultConfig.hasOwnProperty(key)) {\n                                delete hlsClientConf[key];\n                            }\n\n                            var value = hlsUpdatedConf[key];\n\n                            switch (key) {\n                            case \"adaptOnStartOnly\":\n                                if (value) {\n                                    hlsClientConf.startLevel = -1;\n                                }\n                                break;\n                            case \"autoLevelCapping\":\n                                if (value === false) {\n                                    value = -1;\n                                }\n                                hlsClientConf[key] = value;\n                                break;\n                            case \"startLevel\":\n                                switch (value) {\n                                case \"auto\":\n                                    value = -1;\n                                    break;\n                                case \"firstLevel\":\n                                    value = undefined;\n                                    break;\n                                }\n                                hlsClientConf[key] = value;\n                                break;\n                            case \"recover\": // DEPRECATED\n                                hlsUpdatedConf.recoverMediaError = false;\n                                hlsUpdatedConf.recoverNetworkError = false;\n                                recover = value;\n                                break;\n                            case \"strict\":\n                                if (value) {\n                                    hlsUpdatedConf.recoverMediaError = false;\n                                    hlsUpdatedConf.recoverNetworkError = false;\n                                    recover = 0;\n                                }\n                                break;\n\n                            }\n                        });\n\n                        hlsClientConf.autoStartLoad = false;\n                        hlsClientConf = extend(hlsClientConf, hlsjsConfig);\n                        hls = new Hls(hlsClientConf);\n                        player.engine[engineName] = hls;\n                        recoverMediaErrorDate = null;\n                        swapAudioCodecDate = null;\n\n                        Object.keys(HLSEVENTS).forEach(function (key) {\n                            var etype = HLSEVENTS[key],\n                                listeners = hlsUpdatedConf.listeners,\n                                expose = listeners && listeners.indexOf(etype) > -1;\n\n                            hls.on(etype, function (e, data) {\n                                var fperr,\n                                    errobj = {},\n                                    ERRORTYPES = Hls.ErrorTypes,\n                                    ERRORDETAILS = Hls.ErrorDetails,\n                                    updatedVideo = player.video,\n                                    src = updatedVideo.src;\n\n                                switch (key) {\n                                case \"MEDIA_ATTACHED\":\n                                    hls.loadSource(src);\n                                    break;\n\n                                case \"MANIFEST_PARSED\":\n                                    if (hlsQualitiesSupport(conf) &&\n                                            !(!coreV6 && player.pluginQualitySelectorEnabled)) {\n                                        if (hlsQualitiesConf) {\n                                            initQualitySelection(hlsQualitiesConf, hlsUpdatedConf, data);\n                                        } else {\n                                            qClean();\n                                        }\n                                    } else if (coreV6) {\n                                        delete player.quality;\n                                    }\n                                    if (autoplay && brwsr.safari) {\n                                        // hack to avoid \"heaving\" in Safari\n                                        // at least mostly in splash setups and playlist transitions\n                                        bean.one(videoTag, \"canplaythrough.\" + engineName, function () {\n                                            common.addClass(root, loadingClass);\n                                            bean.one(videoTag, \"timeupdate.\" + engineName, function () {\n                                                common.removeClass(root, loadingClass);\n                                            });\n                                        });\n                                    }\n                                    break;\n\n                                case \"FRAG_LOADED\":\n                                    if (hlsUpdatedConf.bufferWhilePaused && !player.live &&\n                                            hls.autoLevelEnabled && hls.nextLoadLevel > maxLevel) {\n                                        maxLevel = hls.nextLoadLevel;\n                                    }\n                                    break;\n                                case \"FRAG_PARSING_METADATA\":\n                                    if (coreV6) {\n                                        return;\n                                    }\n                                    data.samples.forEach(function (sample) {\n                                        var metadataHandler;\n\n                                        metadataHandler = function () {\n                                            if (videoTag.currentTime < sample.dts) {\n                                                return;\n                                            }\n                                            bean.off(videoTag, 'timeupdate.' + engineName, metadataHandler);\n\n                                            var raw = sample.unit || sample.data,\n                                                Decoder = win.TextDecoder;\n\n                                            if (Decoder && typeof Decoder === \"function\") {\n                                                raw = new Decoder('utf-8').decode(raw);\n                                            } else {\n                                                raw = decodeURIComponent(encodeURIComponent(\n                                                    String.fromCharCode.apply(null, raw)\n                                                ));\n                                            }\n                                            player.trigger('metadata', [player, {\n                                                key: raw.substr(10, 4),\n                                                data: raw\n                                            }]);\n                                        };\n                                        bean.on(videoTag, 'timeupdate.' + engineName, metadataHandler);\n                                    });\n                                    break;\n                                case \"LEVEL_UPDATED\":\n                                    if (player.dvr) {\n                                        player.video.seekOffset = data.details.fragments[0].start + hls.config.nudgeOffset;\n                                    }\n                                    break;\n                                case \"BUFFER_APPENDED\":\n                                    common.removeClass(root, recoveryClass);\n                                    break;\n                                case \"ERROR\":\n                                    if (data.fatal || hlsUpdatedConf.strict) {\n                                        switch (data.type) {\n                                        case ERRORTYPES.NETWORK_ERROR:\n                                            if (hlsUpdatedConf.recoverNetworkError || recover) {\n                                                doRecover(conf, data.type, true);\n                                            } else if (data.frag && data.frag.url) {\n                                                errobj.url = data.frag.url;\n                                                fperr = 2;\n                                            } else {\n                                                fperr = 4;\n                                            }\n                                            break;\n                                        case ERRORTYPES.MEDIA_ERROR:\n                                            if (hlsUpdatedConf.recoverMediaError || recover) {\n                                                doRecover(conf, data.type);\n                                            } else {\n                                                fperr = 3;\n                                            }\n                                            break;\n                                        default:\n                                            fperr = 5;\n                                        }\n\n                                        if (fperr !== undefined) {\n                                            errobj = handleError(fperr, src, data.url);\n                                            player.trigger(\"error\", [player, errobj]);\n                                        }\n                                    } else if (data.details === ERRORDETAILS.FRAG_LOOP_LOADING_ERROR ||\n                                            data.details === ERRORDETAILS.BUFFER_STALLED_ERROR) {\n                                        common.addClass(root, recoveryClass);\n                                    }\n                                    break;\n                                }\n\n                                // memory leak if all these are re-triggered by api #29\n                                if (expose) {\n                                    player.trigger(e, [player, data]);\n                                }\n                            });\n                        });\n\n                        if (hlsUpdatedConf.adaptOnStartOnly) {\n                            bean.one(videoTag, \"timeupdate.\" + engineName, function () {\n                                hls.loadLevel = hls.loadLevel;\n                            });\n                        }\n\n                        hls.attachMedia(videoTag);\n\n                        if (!support.firstframe && autoplay && videoTag.paused) {\n                            var playPromise = videoTag.play();\n                            if (playPromise !== undefined) {\n                                playPromise.catch(function () {\n                                    player.unload();\n                                    if (!coreV6) {\n                                        player.message(\"Please click the play button\", 3000);\n                                    }\n                                });\n                            }\n                        }\n                    },\n\n                    resume: function () {\n                        videoTag.play();\n                    },\n\n                    pause: function () {\n                        videoTag.pause();\n                    },\n\n                    seek: function (time) {\n                        videoTag.currentTime = time;\n                    },\n\n                    volume: function (level) {\n                        if (videoTag) {\n                            videoTag.volume = level;\n                        }\n                    },\n\n                    speed: function (val) {\n                        videoTag.playbackRate = val;\n                        player.trigger('speed', [player, val]);\n                    },\n\n                    unload: function () {\n                        if (hls) {\n                            var listeners = \".\" + engineName;\n\n                            hls.destroy();\n                            hls = 0;\n                            qClean();\n                            player.off(listeners);\n                            bean.off(root, listeners);\n                            bean.off(videoTag, listeners);\n                            common.removeNode(videoTag);\n                            videoTag = 0;\n                        }\n                    }\n                };\n\n            // pre 6.0.4: no boolean api.conf.poster and no poster with autoplay\n            if (/^6\\.0\\.[0-3]$/.test(version) &&\n                    !player.conf.splash && !player.conf.poster && !player.conf.autoplay) {\n                bc = common.css(root, 'backgroundColor');\n                // spaces in rgba arg mandatory for recognition\n                has_bg = common.css(root, 'backgroundImage') !== \"none\" ||\n                        (bc && bc !== \"rgba(0, 0, 0, 0)\" && bc !== \"transparent\");\n                if (has_bg) {\n                    player.conf.poster = true;\n                }\n            }\n\n            return engine;\n        };\n\n    if (Hls.isSupported() && version.indexOf(\"5.\") !== 0) {\n        // only load engine if it can be used\n        engineImpl.engineName = engineName; // must be exposed\n        engineImpl.holaEngine = true;\n        engineImpl.canPlay = function (type, conf) {\n            if (engine_disabled)\n                return false;\n            var b = support.browser,\n                wn = window.navigator,\n                IE11 = wn.userAgent.indexOf(\"Trident/7\") > -1;\n\n            if (conf[engineName] === false || conf.clip[engineName] === false) {\n                // engine disabled for player\n                return false;\n            }\n\n            // merge hlsjs clip config at earliest opportunity\n            // XXX pavlo: we load 'hlsjs' provider config, not 'holaHls', that's what customers provide\n            hlsconf = extend({\n                bufferWhilePaused: true,\n                smoothSwitching: true,\n                recoverMediaError: true\n            }, flowplayer.conf.hlsjs, conf.hlsjs, conf.clip.hlsjs);\n\n            // https://github.com/dailymotion/hls.js/issues/9\n            return isHlsType(type) && (!brwsr.safari || hlsconf.safari);\n        };\n\n        // put on top of engine stack\n        // so hlsjs is tested before html5 video hls and flash hls\n        flowplayer.engines.unshift(engineImpl);\n\n        if (coreV6) {\n            flowplayer(function (api) {\n                // to take precedence over VOD quality selector\n                api.pluginQualitySelectorEnabled = hlsQualitiesSupport(api.conf) &&\n                        engineImpl.canPlay(\"application/x-mpegurl\", api.conf);\n            });\n        }\n    }\n\n};\n\nE.attach = function(Hls, flowplayer, hlsjsConfig) {\n    if (engine_attached) {\n        engine_disabled = false;\n    } else {\n        extension(Hls||E.Hls||window.Hls,\n            flowplayer||E.flowplayer||window.flowplayer, hlsjsConfig);\n        engine_attached = true;\n        engine_disabled = false;\n    }\n};\n\nE.detach = function() {\n    // we don't remove engine from list, just set it as disabled so it will\n    // return false in canPlay()\n    engine_disabled = true;\n};\n\nE.VERSION = '1.0.6-hola.6';\n\nif (script_conf.disabled)\n    E.attach = E.detach = function(){};\nelse if (script_conf.autoinit)\n    E.attach();\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _eventHandler = require('../event-handler');\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _bufferHelper = require('../helper/buffer-helper');\n\nvar _bufferHelper2 = _interopRequireDefault(_bufferHelper);\n\nvar _errors = require('../errors');\n\nvar _logger = require('../utils/logger');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * simple ABR Controller\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  - compute next level based on last fragment bw heuristics\nimplement an abandon rules triggered if we have less than 2 frag buffered and if computed bw shows that we risk buffer stalling\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar AbrController = function (_EventHandler) {\n  _inherits(AbrController, _EventHandler);\n\n  function AbrController(hls) {\n    _classCallCheck(this, AbrController);\n\n    var _this = _possibleConstructorReturn(this, (AbrController.__proto__ || Object.getPrototypeOf(AbrController)).call(this, hls, _events2.default.FRAG_LOADING, _events2.default.FRAG_LOAD_PROGRESS, _events2.default.FRAG_LOADED, _events2.default.ERROR));\n\n    _this.lastLoadedFragLevel = 0;\n    _this._autoLevelCapping = -1;\n    _this._nextAutoLevel = -1;\n    _this.hls = hls;\n    _this.onCheck = _this.abandonRulesCheck.bind(_this);\n    return _this;\n  }\n\n  _createClass(AbrController, [{\n    key: 'destroy',\n    value: function destroy() {\n      this.clearTimer();\n      _eventHandler2.default.prototype.destroy.call(this);\n    }\n  }, {\n    key: 'onFragLoading',\n    value: function onFragLoading(data) {\n      if (!this.timer) {\n        this.timer = setInterval(this.onCheck, 100);\n      }\n      this.fragCurrent = data.frag;\n    }\n  }, {\n    key: 'onFragLoadProgress',\n    value: function onFragLoadProgress(data) {\n      var stats = data.stats;\n      // only update stats if first frag loading\n      // if same frag is loaded multiple times, it might be in browser cache, and loaded quickly\n      // and leading to wrong bw estimation\n      if (stats.aborted === undefined && data.frag.loadCounter === 1) {\n        this.lastfetchduration = (performance.now() - stats.trequest) / 1000;\n        this.lastbw = stats.loaded * 8 / this.lastfetchduration;\n        //console.log(`fetchDuration:${this.lastfetchduration},bw:${(this.lastbw/1000).toFixed(0)}/${stats.aborted}`);\n      }\n    }\n  }, {\n    key: 'abandonRulesCheck',\n    value: function abandonRulesCheck() {\n      /*\n        monitor fragment retrieval time...\n        we compute expected time of arrival of the complete fragment.\n        we compare it to expected time of buffer starvation\n      */\n      var hls = this.hls,\n          v = hls.media,\n          frag = this.fragCurrent;\n\n      // if loader has been destroyed or loading has been aborted, stop timer and return\n      if (!frag.loader || frag.loader.stats && frag.loader.stats.aborted) {\n        _logger.logger.warn('frag loader destroy or aborted, disarm abandonRulesCheck');\n        this.clearTimer();\n        return;\n      }\n      /* only monitor frag retrieval time if\n      (video not paused OR first fragment being loaded(ready state === HAVE_NOTHING = 0)) AND autoswitching enabled AND not lowest level (=> means that we have several levels) */\n      if (v && (!v.paused || !v.readyState) && frag.autoLevel && frag.level) {\n        var requestDelay = performance.now() - frag.trequest;\n        // monitor fragment load progress after half of expected fragment duration,to stabilize bitrate\n        if (requestDelay > 500 * frag.duration) {\n          var loadRate = Math.max(1, frag.loaded * 1000 / requestDelay); // byte/s; at least 1 byte/s to avoid division by zero\n          if (frag.expectedLen < frag.loaded) {\n            frag.expectedLen = frag.loaded;\n          }\n          var pos = v.currentTime;\n          var fragLoadedDelay = (frag.expectedLen - frag.loaded) / loadRate;\n          var bufferStarvationDelay = _bufferHelper2.default.bufferInfo(v, pos, hls.config.maxBufferHole).end - pos;\n          // consider emergency switch down only if we have less than 2 frag buffered AND\n          // time to finish loading current fragment is bigger than buffer starvation delay\n          // ie if we risk buffer starvation if bw does not increase quickly\n          if (bufferStarvationDelay < 2 * frag.duration && fragLoadedDelay > bufferStarvationDelay) {\n            var fragLevelNextLoadedDelay = void 0,\n                nextLoadLevel = void 0;\n            // lets iterate through lower level and try to find the biggest one that could avoid rebuffering\n            // we start from current level - 1 and we step down , until we find a matching level\n            for (nextLoadLevel = frag.level - 1; nextLoadLevel >= 0; nextLoadLevel--) {\n              // compute time to load next fragment at lower level\n              // 0.8 : consider only 80% of current bw to be conservative\n              // 8 = bits per byte (bps/Bps)\n              fragLevelNextLoadedDelay = frag.duration * hls.levels[nextLoadLevel].bitrate / (8 * 0.8 * loadRate);\n              _logger.logger.log('fragLoadedDelay/bufferStarvationDelay/fragLevelNextLoadedDelay[' + nextLoadLevel + '] :' + fragLoadedDelay.toFixed(1) + '/' + bufferStarvationDelay.toFixed(1) + '/' + fragLevelNextLoadedDelay.toFixed(1));\n              if (fragLevelNextLoadedDelay < bufferStarvationDelay) {\n                // we found a lower level that be rebuffering free with current estimated bw !\n                break;\n              }\n            }\n            // only emergency switch down if it takes less time to load new fragment at lowest level instead\n            // of finishing loading current one ...\n            if (fragLevelNextLoadedDelay < fragLoadedDelay) {\n              // ensure nextLoadLevel is not negative\n              nextLoadLevel = Math.max(0, nextLoadLevel);\n              // force next load level in auto mode\n              hls.nextLoadLevel = nextLoadLevel;\n              // abort fragment loading ...\n              _logger.logger.warn('loading too slow, abort fragment loading and switch to level ' + nextLoadLevel);\n              //abort fragment loading\n              frag.loader.abort();\n              this.clearTimer();\n              hls.trigger(_events2.default.FRAG_LOAD_EMERGENCY_ABORTED, { frag: frag });\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: 'onFragLoaded',\n    value: function onFragLoaded(data) {\n      // stop monitoring bw once frag loaded\n      this.clearTimer();\n      // store level id after successful fragment load\n      this.lastLoadedFragLevel = data.frag.level;\n      // reset forced auto level value so that next level will be selected\n      this._nextAutoLevel = -1;\n    }\n  }, {\n    key: 'onError',\n    value: function onError(data) {\n      // stop timer in case of frag loading error\n      switch (data.details) {\n        case _errors.ErrorDetails.FRAG_LOAD_ERROR:\n        case _errors.ErrorDetails.FRAG_LOAD_TIMEOUT:\n          this.clearTimer();\n          break;\n        default:\n          break;\n      }\n    }\n  }, {\n    key: 'clearTimer',\n    value: function clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    }\n\n    /** Return the capping/max level value that could be used by automatic level selection algorithm **/\n\n  }, {\n    key: 'autoLevelCapping',\n    get: function get() {\n      return this._autoLevelCapping;\n    }\n\n    /** set the capping/max level value that could be used by automatic level selection algorithm **/\n    ,\n    set: function set(newLevel) {\n      this._autoLevelCapping = newLevel;\n    }\n  }, {\n    key: 'nextAutoLevel',\n    get: function get() {\n      var lastbw = this.lastbw,\n          hls = this.hls,\n          adjustedbw,\n          i,\n          maxAutoLevel;\n      if (this._autoLevelCapping === -1 && hls.levels && hls.levels.length) {\n        maxAutoLevel = hls.levels.length - 1;\n      } else {\n        maxAutoLevel = this._autoLevelCapping;\n      }\n\n      // in case next auto level has been forced, return it straight-away (but capped)\n      if (this._nextAutoLevel !== -1) {\n        return Math.min(this._nextAutoLevel, maxAutoLevel);\n      }\n\n      // follow algorithm captured from stagefright :\n      // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp\n      // Pick the highest bandwidth stream below or equal to estimated bandwidth.\n      for (i = 0; i <= maxAutoLevel; i++) {\n        // consider only 80% of the available bandwidth, but if we are switching up,\n        // be even more conservative (70%) to avoid overestimating and immediately\n        // switching back.\n        if (i <= this.lastLoadedFragLevel) {\n          adjustedbw = 0.8 * lastbw;\n        } else {\n          adjustedbw = 0.7 * lastbw;\n        }\n        if (adjustedbw < hls.levels[i].bitrate) {\n          return Math.max(0, i - 1);\n        }\n      }\n      return i - 1;\n    },\n    set: function set(nextLevel) {\n      this._nextAutoLevel = nextLevel;\n    }\n  }]);\n\n  return AbrController;\n}(_eventHandler2.default);\n\nexports.default = AbrController;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _eventHandler = require('../event-handler');\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _logger = require('../utils/logger');\n\nvar _errors = require('../errors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Buffer Controller\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\nvar BufferController = function (_EventHandler) {\n  _inherits(BufferController, _EventHandler);\n\n  function BufferController(hls) {\n    _classCallCheck(this, BufferController);\n\n    // the value that we have set mediasource.duration to\n    // (the actual duration may be tweaked slighly by the browser)\n    var _this = _possibleConstructorReturn(this, (BufferController.__proto__ || Object.getPrototypeOf(BufferController)).call(this, hls, _events2.default.MEDIA_ATTACHING, _events2.default.MEDIA_DETACHING, _events2.default.BUFFER_RESET, _events2.default.BUFFER_APPENDING, _events2.default.BUFFER_CODECS, _events2.default.BUFFER_EOS, _events2.default.BUFFER_FLUSHING, _events2.default.FRAG_PARSING_DATA, _events2.default.FRAG_APPENDING, _events2.default.LEVEL_UPDATED));\n\n    _this._msDuration = null;\n    // the value that we want to set mediaSource.duration to\n    _this._levelDuration = null;\n\n    // Source Buffer listeners\n    _this.onsbue = _this.onSBUpdateEnd.bind(_this);\n    _this.onsbe = _this.onSBUpdateError.bind(_this);\n    _this.tracks = {};\n    return _this;\n  }\n\n  _createClass(BufferController, [{\n    key: 'destroy',\n    value: function destroy() {\n      _eventHandler2.default.prototype.destroy.call(this);\n    }\n  }, {\n    key: 'onFragParsingData',\n    value: function onFragParsingData(data) {\n      var type = data.type;\n      var audioTrack = this.tracks.audio;\n\n      // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)\n      // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`\n      // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos). At the time of change we issue\n      // `SourceBuffer.abort()` and adjusting `SourceBuffer.timestampOffset` if `SourceBuffer.updating` is false or awaiting `updateend`\n      // event if SB is in updating state.\n      // More info here: https://github.com/dailymotion/hls.js/issues/332#issuecomment-257986486\n\n      if (type === 'audio' && audioTrack && audioTrack.container === 'audio/mpeg') {\n        // Chrome audio mp3 track\n        var audioBuffer = this.sourceBuffer.audio;\n        var delta = Math.abs(audioBuffer.timestampOffset - data.startPTS);\n\n        // adjust timestamp offset if time delta is greater than 100ms\n        if (delta > 0.1) {\n          var updating = audioBuffer.updating;\n\n          try {\n            audioBuffer.abort();\n          } catch (err) {\n            updating = true;\n            _logger.logger.warn('can not abort audio buffer: ' + err);\n          }\n\n          if (!updating) {\n            _logger.logger.warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + data.startPTS);\n            audioBuffer.timestampOffset = data.startPTS;\n          } else {\n            this.audioTimestampOffset = data.startPTS;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'onMediaAttaching',\n    value: function onMediaAttaching(data) {\n      var media = this.media = data.media;\n      if (media) {\n        // setup the media source\n        var ms = this.mediaSource = new MediaSource();\n        //Media Source listeners\n        this.onmso = this.onMediaSourceOpen.bind(this);\n        this.onmse = this.onMediaSourceEnded.bind(this);\n        this.onmsc = this.onMediaSourceClose.bind(this);\n        ms.addEventListener('sourceopen', this.onmso);\n        ms.addEventListener('sourceended', this.onmse);\n        ms.addEventListener('sourceclose', this.onmsc);\n        // link video and media Source\n        var url = URL.createObjectURL(ms);\n        _logger.logger.log('set object url ' + url);\n        media.src = url;\n      }\n    }\n  }, {\n    key: 'onMediaDetaching',\n    value: function onMediaDetaching() {\n      _logger.logger.log('media source detaching');\n      var ms = this.mediaSource;\n      if (ms) {\n        if (ms.readyState === 'open') {\n          try {\n            // endOfStream could trigger exception if any sourcebuffer is in updating state\n            // we don't really care about checking sourcebuffer state here,\n            // as we are anyway detaching the MediaSource\n            // let's just avoid this exception to propagate\n            ms.endOfStream();\n          } catch (err) {\n            _logger.logger.warn('onMediaDetaching:' + err.message + ' while calling endOfStream');\n          }\n        }\n        ms.removeEventListener('sourceopen', this.onmso);\n        ms.removeEventListener('sourceended', this.onmse);\n        ms.removeEventListener('sourceclose', this.onmsc);\n\n        try {\n          // unlink MediaSource from video tag\n          this.media.src = '';\n          this.media.removeAttribute('src');\n        } catch (err) {\n          _logger.logger.warn('onMediaDetaching:' + err.message + ' while unlinking video.src');\n        }\n        this.mediaSource = null;\n        this.media = null;\n        this.pendingTracks = null;\n        this.tracks = {};\n        this.sourceBuffer = {};\n        this.flushRange = [];\n        this.segments = [];\n        this.appended = 0;\n      }\n      this.onmso = this.onmse = this.onmsc = null;\n      this.waitForAppended = false;\n      this.hls.trigger(_events2.default.MEDIA_DETACHED);\n    }\n  }, {\n    key: 'onMediaSourceOpen',\n    value: function onMediaSourceOpen() {\n      _logger.logger.log('media source opened');\n      this.hls.trigger(_events2.default.MEDIA_ATTACHED, { media: this.media });\n      // once received, don't listen anymore to sourceopen event\n      this.mediaSource.removeEventListener('sourceopen', this.onmso);\n      // if any buffer codecs pending, treat it here.\n      var pendingTracks = this.pendingTracks;\n      if (pendingTracks) {\n        this.onBufferCodecs(pendingTracks);\n        this.pendingTracks = null;\n        this.doAppending();\n      }\n    }\n  }, {\n    key: 'onMediaSourceClose',\n    value: function onMediaSourceClose() {\n      _logger.logger.log('media source closed');\n    }\n  }, {\n    key: 'onMediaSourceEnded',\n    value: function onMediaSourceEnded() {\n      _logger.logger.log('media source ended');\n    }\n  }, {\n    key: 'onFragAppending',\n    value: function onFragAppending() {\n      var segments = this.segments || [];\n      if (!segments.length && !this.isSbUpdating()) {\n        this.hls.trigger(_events2.default.FRAG_APPENDED);\n      } else {\n        this.waitForAppended = true;\n      }\n    }\n  }, {\n    key: 'isSbUpdating',\n    value: function isSbUpdating() {\n      var sourceBuffer = this.sourceBuffer;\n      if (!sourceBuffer) {\n        return;\n      }\n      for (var type in sourceBuffer) {\n        if (sourceBuffer[type].updating) {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: 'dump',\n    value: function dump(video) {\n      var str = '',\n          b = video.buffered,\n          len = b.length;\n      for (var i = 0; i < len; i++) {\n        str += '[' + b.start(i) + ',' + b.end(i) + ']';\n      }\n      return str;\n    }\n  }, {\n    key: 'clear',\n    value: function clear(video, keepSec) {\n      var st,\n          sb = this.sourceBuffer,\n          end = video.currentTime - keepSec;\n      var b = video.buffered;\n      if (end <= 0 || this.isSbUpdating() || !b.length) {\n        return;\n      }\n      st = b.start(0);\n      if (st < end) {\n        _logger.logger.log('video buffered: ' + this.dump(this.media) + ' removing: [' + st + ',' + end + ']');\n        for (var type in sb) {\n          sb[type].remove(st, end);\n        }\n      }\n    }\n  }, {\n    key: 'onSBUpdateEnd',\n    value: function onSBUpdateEnd() {\n      // update timestampOffset\n      if (this.audioTimestampOffset) {\n        var audioBuffer = this.sourceBuffer.audio;\n        if (audioBuffer && !audioBuffer.updating) {\n          _logger.logger.warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + this.audioTimestampOffset);\n          audioBuffer.timestampOffset = this.audioTimestampOffset;\n          delete this.audioTimestampOffset;\n        }\n      }\n\n      if (this._needsFlush) {\n        this.doFlush();\n      }\n\n      if (this._needsEos) {\n        this.onBufferEos();\n      }\n\n      _logger.logger.log('sb updateend');\n\n      this.updateMediaElementDuration();\n\n      this.doAppending();\n\n      if (this.waitForAppended && !this.segments.length && !this.isSbUpdating()) {\n        this.hls.trigger(_events2.default.FRAG_APPENDED);\n        this.waitForAppended = false;\n      }\n      var keep = void 0;\n      if ((keep = this.hls.config.keepBuffered) && this.media) {\n        try {\n          this.clear(this.media, keep);\n        } catch (err) {\n          _logger.logger.log(err);\n        }\n      }\n    }\n  }, {\n    key: 'onSBUpdateError',\n    value: function onSBUpdateError(event) {\n      var err = this.lastSegment ? 'last segment type:' + this.lastSegment.type + ',size:' + this.lastSegment.data.length + ')' : '';\n      _logger.logger.error('onSBUpdateError: sourceBuffer error:' + event + ' ' + err);\n      this.lastSegment = undefined;\n      this.printDump();\n      // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error\n      // this error might not always be fatal (it is fatal if decode error is set, in that case\n      // it will be followed by a mediaElement error ...)\n      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_APPENDING_ERROR, fatal: false });\n      // we don't need to do more than that, as accordin to the spec, updateend will be fired just after\n    }\n  }, {\n    key: 'onBufferReset',\n    value: function onBufferReset() {\n      var sourceBuffer = this.sourceBuffer,\n          segments = this.segments || [];\n      _logger.logger.log('onBufferReset: pending segments:' + segments.length);\n      for (var type in sourceBuffer) {\n        var sb = sourceBuffer[type];\n        try {\n          this.mediaSource.removeSourceBuffer(sb);\n          sb.removeEventListener('updateend', this.onsbue);\n          sb.removeEventListener('error', this.onsbe);\n        } catch (err) {}\n      }\n      this.sourceBuffer = {};\n      this.flushRange = [];\n      this.appended = 0;\n      this.dumpSegments = undefined;\n    }\n  }, {\n    key: 'isTrackChanged',\n    value: function isTrackChanged(tracks) {\n      var track = void 0,\n          sb = this.sourceBuffer;\n      if (sb.video && !tracks.video || !sb.video && sb.audio && tracks.video) {\n        return true;\n      }\n      if (sb.audio && (track = tracks.audio)) {\n        var prev = this.tracks.audio;\n        var codec = track.levelCodec || track.codec;\n        var isMp3 = track.container === 'audio/mpeg' || prev.container === 'audio/mpeg' || codec === 'mp3' || prev.codec === 'mp3';\n        if ((track.container !== prev.container || prev.codec !== codec) && isMp3) {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: 'onBufferCodecs',\n    value: function onBufferCodecs(tracks) {\n      var mediaSource = this.mediaSource;\n\n      // delay sourcebuffer creation if media source not opened yet\n      if (!mediaSource || mediaSource.readyState !== 'open') {\n        this.pendingTracks = tracks;\n        return;\n      }\n\n      var sourceBuffer = this.sourceBuffer;\n\n      if (this.isTrackChanged(tracks)) {\n        var media = this.media;\n        this.hls.detachMedia();\n        this.hls.attachMedia(media);\n        return;\n      }\n\n      for (var trackName in tracks) {\n        if (!sourceBuffer[trackName]) {\n          var track = tracks[trackName];\n          // use levelCodec as first priority\n          var codec = track.levelCodec || track.codec;\n          var mimeType = track.container + ';codecs=' + codec;\n          _logger.logger.log('creating sourceBuffer with mimeType:' + mimeType);\n          try {\n            var sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);\n            sb.addEventListener('updateend', this.onsbue);\n            sb.addEventListener('error', this.onsbe);\n            this.tracks[trackName] = { codec: codec, container: track.container };\n          } catch (err) {\n            _logger.logger.error('error while trying to add sourceBuffer:' + err.message);\n            this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_ADD_CODEC_ERROR, fatal: false, err: err, mimeType: mimeType });\n          }\n        }\n      }\n    }\n  }, {\n    key: 'onBufferAppending',\n    value: function onBufferAppending(data) {\n      this.segments = this.segments || [];\n      this.segments.push(data);\n      this.doAppending();\n    }\n  }, {\n    key: 'onBufferAppendFail',\n    value: function onBufferAppendFail(data) {\n      var err = this.lastSegment ? 'last segment type:' + this.lastSegment.type + ',size:' + this.lastSegment.data.length + ')' : '';\n      _logger.logger.error('onBufferAppendFail:sourceBuffer error:' + data.event + ' ' + err);\n      this.lastSegment = undefined;\n      this.printDump();\n      // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error\n      // this error might not always be fatal (it is fatal if decode error is set, in that case\n      // it will be followed by a mediaElement error ...)\n      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_APPENDING_ERROR, fatal: false, frag: this.fragCurrent });\n    }\n  }, {\n    key: 'onBufferEos',\n    value: function onBufferEos() {\n      var sb = this.sourceBuffer,\n          mediaSource = this.mediaSource;\n      if (!mediaSource || mediaSource.readyState !== 'open') {\n        return;\n      }\n      if (!(sb.audio && sb.audio.updating || sb.video && sb.video.updating)) {\n        _logger.logger.log('all media data available, signal endOfStream() to MediaSource and stop loading fragment');\n        //Notify the media element that it now has all of the media data\n        mediaSource.endOfStream();\n        this._needsEos = false;\n      } else {\n        this._needsEos = true;\n      }\n    }\n  }, {\n    key: 'onBufferFlushing',\n    value: function onBufferFlushing(data) {\n      this.flushRange.push({ start: data.startOffset, end: data.endOffset });\n      // attempt flush immediatly\n      this.flushBufferCounter = 0;\n      this.doFlush();\n    }\n  }, {\n    key: 'onLevelUpdated',\n    value: function onLevelUpdated(event) {\n      var details = event.details;\n      if (details.fragments.length === 0) {\n        return;\n      }\n      this._levelDuration = details.totalduration + details.fragments[0].start;\n      this.updateMediaElementDuration();\n    }\n\n    // https://github.com/dailymotion/hls.js/issues/355\n\n  }, {\n    key: 'updateMediaElementDuration',\n    value: function updateMediaElementDuration() {\n      var media = this.media,\n          mediaSource = this.mediaSource,\n          levelDuration = this._levelDuration;\n      if (levelDuration === null || !media || !mediaSource || media.readyState === 0 || mediaSource.readyState !== 'open') {\n        return;\n      }\n      for (var i = 0; i < mediaSource.sourceBuffers.length; i++) {\n        if (mediaSource.sourceBuffers[i].updating) {\n          // can't set duration whilst a buffer is updating\n          return;\n        }\n      }\n      if (this._msDuration === null) {\n        // initialise to the value that the media source is reporting\n        this._msDuration = mediaSource.duration;\n      }\n      var duration = media.duration;\n      // levelDuration was the last value we set.\n      // not using mediaSource.duration as the browser may tweak this value\n      // only update mediasource duration if its value increase, this is to avoid\n      // flushing already buffered portion when switching between quality level\n      if (levelDuration > this._msDuration && levelDuration > duration || duration === Infinity || isNaN(duration)) {\n        _logger.logger.log('Updating mediasource duration to ' + levelDuration.toFixed(3));\n        this._msDuration = mediaSource.duration = levelDuration;\n      }\n    }\n  }, {\n    key: 'doFlush',\n    value: function doFlush() {\n      // loop through all buffer ranges to flush\n      while (this.flushRange.length) {\n        var range = this.flushRange[0];\n        // flushBuffer will abort any buffer append in progress and flush Audio/Video Buffer\n        if (this.flushBuffer(range.start, range.end)) {\n          // range flushed, remove from flush array\n          this.flushRange.shift();\n          this.flushBufferCounter = 0;\n        } else {\n          this._needsFlush = true;\n          // avoid looping, wait for SB update end to retrigger a flush\n          return;\n        }\n      }\n      if (this.flushRange.length === 0) {\n        // everything flushed\n        this._needsFlush = false;\n\n        // let's recompute this.appended, which is used to avoid flush looping\n        var appended = 0;\n        var sourceBuffer = this.sourceBuffer;\n        for (var type in sourceBuffer) {\n          appended += sourceBuffer[type].buffered.length;\n        }\n        this.appended = appended;\n        this.hls.trigger(_events2.default.BUFFER_FLUSHED);\n      }\n    }\n  }, {\n    key: 'dumpSegment',\n    value: function dumpSegment(segment) {\n      var i = void 0,\n          len = segment.data.length;\n      var info = 'queue:' + this.segments.length + 'type:' + segment.type + ',size:' + len + ',buf:[';\n      for (i = 0, len = Math.min(len, 10); i < len; i++) {\n        if (i) {\n          info += ',';\n        }\n        info += segment.data[i];\n      }\n      info += '..]';\n      if (!this.dumpSegments) {\n        this.dumpSegments = [info];\n      } else {\n        this.dumpSegments.push(info);\n      }\n      if (this.dumpSegments.length > 10) {\n        this.dumpSegments.shift();\n      }\n    }\n  }, {\n    key: 'printDump',\n    value: function printDump() {\n      if (this.dumpSegments && this.dumpSegments.length) {\n        _logger.logger.error(this.dumpSegments.join('|'));\n      }\n    }\n  }, {\n    key: 'doAppending',\n    value: function doAppending() {\n      var hls = this.hls,\n          sourceBuffer = this.sourceBuffer,\n          segments = this.segments;\n      if (sourceBuffer && Object.keys(sourceBuffer).length) {\n        if (!this.media) {\n          return;\n        }\n        if (this.media.error) {\n          this.segments = [];\n          _logger.logger.error('trying to append although a media error occured, flush segment and abort');\n          return;\n        }\n        if (this.isSbUpdating()) {\n          _logger.logger.log('sb update in progress');\n          return;\n        }\n        if (segments.length) {\n          var segment = segments.shift();\n          this.dumpSegment(segment);\n          try {\n            _logger.logger.log('appending ' + segment.type + ' SB, size:' + segment.data.length);\n            if (sourceBuffer[segment.type]) {\n              this.lastSegment = segment;\n              sourceBuffer[segment.type].appendBuffer(segment.data);\n              this.appendError = 0;\n              this.appended++;\n            } else {\n              // in case we don't have any source buffer matching with this segment type,\n              // it means that Mediasource fails to create sourcebuffer\n              // discard this segment, and trigger update end\n              this.onSBUpdateEnd();\n            }\n          } catch (err) {\n            // in case any error occured while appending, put back segment in segments table\n            _logger.logger.error('error while trying to append buffer: ' + err.message);\n            segments.unshift(segment);\n            var event = { type: _errors.ErrorTypes.MEDIA_ERROR };\n            if (err.code !== 22) {\n              if (this.appendError) {\n                this.appendError++;\n              } else {\n                this.appendError = 1;\n              }\n              event.details = _errors.ErrorDetails.BUFFER_APPEND_ERROR;\n              event.frag = this.fragCurrent;\n              event.reason = err.message + ' (type:' + segment.type + ',size:' + segment.data.length + ')';\n              /* with UHD content, we could get loop of quota exceeded error until\n                browser is able to evict some data from sourcebuffer. retrying help recovering this\n              */\n              if (this.appendError > hls.config.appendErrorMaxRetry) {\n                _logger.logger.log('fail ' + hls.config.appendErrorMaxRetry + ' times to append segment in sourceBuffer');\n                this.segments = [];\n                event.fatal = true;\n                hls.trigger(_events2.default.ERROR, event);\n                return;\n              } else {\n                event.fatal = false;\n                hls.trigger(_events2.default.ERROR, event);\n              }\n            } else {\n              // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror\n              // let's stop appending any segments, and report BUFFER_FULL_ERROR error\n              this.segments = [];\n              event.details = _errors.ErrorDetails.BUFFER_FULL_ERROR;\n              hls.trigger(_events2.default.ERROR, event);\n            }\n          }\n        }\n      }\n    }\n\n    /*\n      flush specified buffered range,\n      return true once range has been flushed.\n      as sourceBuffer.remove() is asynchronous, flushBuffer will be retriggered on sourceBuffer update end\n    */\n\n  }, {\n    key: 'flushBuffer',\n    value: function flushBuffer(startOffset, endOffset) {\n      var sb, i, bufStart, bufEnd, flushStart, flushEnd;\n      _logger.logger.log('flushBuffer,pos/start/end: ' + this.media.currentTime + '/' + startOffset + '/' + endOffset);\n      // safeguard to avoid infinite looping : don't try to flush more than the nb of appended segments\n      if (this.flushBufferCounter < this.appended && this.sourceBuffer) {\n        for (var type in this.sourceBuffer) {\n          sb = this.sourceBuffer[type];\n          if (!sb.updating) {\n            for (i = 0; i < sb.buffered.length; i++) {\n              bufStart = sb.buffered.start(i);\n              bufEnd = sb.buffered.end(i);\n              // workaround firefox not able to properly flush multiple buffered range.\n              if (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1 && endOffset === Number.POSITIVE_INFINITY) {\n                flushStart = startOffset;\n                flushEnd = endOffset;\n              } else {\n                flushStart = Math.max(bufStart, startOffset);\n                flushEnd = Math.min(bufEnd, endOffset);\n              }\n              /* sometimes sourcebuffer.remove() does not flush\n                 the exact expected time range.\n                 to avoid rounding issues/infinite loop,\n                 only flush buffer range of length greater than 500ms.\n              */\n              if (Math.min(flushEnd, bufEnd) - flushStart > 0.5) {\n                this.flushBufferCounter++;\n                _logger.logger.log('flush ' + type + ' [' + flushStart + ',' + flushEnd + '], of [' + bufStart + ',' + bufEnd + '], pos:' + this.media.currentTime);\n                sb.remove(flushStart, flushEnd);\n                return false;\n              }\n            }\n          } else {\n            //logger.log('abort ' + type + ' append in progress');\n            // this will abort any appending in progress\n            //sb.abort();\n            _logger.logger.warn('cannot flush, sb updating in progress');\n            return false;\n          }\n        }\n      } else {\n        _logger.logger.warn('abort flushing too many retries');\n      }\n      _logger.logger.log('buffer flushed');\n      // everything flushed !\n      return true;\n    }\n  }]);\n\n  return BufferController;\n}(_eventHandler2.default);\n\nexports.default = BufferController;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _eventHandler = require('../event-handler');\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * cap stream level to media size dimension controller\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\nvar CapLevelController = function (_EventHandler) {\n  _inherits(CapLevelController, _EventHandler);\n\n  function CapLevelController(hls) {\n    _classCallCheck(this, CapLevelController);\n\n    return _possibleConstructorReturn(this, (CapLevelController.__proto__ || Object.getPrototypeOf(CapLevelController)).call(this, hls, _events2.default.FPS_DROP_LEVEL_CAPPING, _events2.default.MEDIA_ATTACHING, _events2.default.MANIFEST_PARSED));\n  }\n\n  _createClass(CapLevelController, [{\n    key: 'destroy',\n    value: function destroy() {\n      if (this.hls.config.capLevelToPlayerSize) {\n        this.media = this.restrictedLevels = null;\n        this.autoLevelCapping = Number.POSITIVE_INFINITY;\n        if (this.timer) {\n          this.timer = clearInterval(this.timer);\n        }\n      }\n    }\n  }, {\n    key: 'onFpsDropLevelCapping',\n    value: function onFpsDropLevelCapping(data) {\n      if (!this.restrictedLevels) {\n        this.restrictedLevels = [];\n      }\n      if (!this.isLevelRestricted(data.droppedLevel)) {\n        this.restrictedLevels.push(data.droppedLevel);\n      }\n    }\n  }, {\n    key: 'onMediaAttaching',\n    value: function onMediaAttaching(data) {\n      this.media = data.media instanceof HTMLVideoElement ? data.media : null;\n    }\n  }, {\n    key: 'onManifestParsed',\n    value: function onManifestParsed(data) {\n      if (this.hls.config.capLevelToPlayerSize) {\n        this.autoLevelCapping = Number.POSITIVE_INFINITY;\n        this.levels = data.levels;\n        this.hls.firstLevel = this.getMaxLevel(data.firstLevel);\n        clearInterval(this.timer);\n        this.timer = setInterval(this.detectPlayerSize.bind(this), 1000);\n        this.detectPlayerSize();\n      }\n    }\n  }, {\n    key: 'detectPlayerSize',\n    value: function detectPlayerSize() {\n      if (this.media) {\n        var levelsLength = this.levels ? this.levels.length : 0;\n        if (levelsLength) {\n          this.hls.autoLevelCapping = this.getMaxLevel(levelsLength - 1);\n          if (this.hls.autoLevelCapping > this.autoLevelCapping) {\n            // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch\n            // usually happen when the user go to the fullscreen mode.\n            this.hls.streamController.nextLevelSwitch();\n          }\n          this.autoLevelCapping = this.hls.autoLevelCapping;\n        }\n      }\n    }\n\n    /*\n    * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)\n    */\n\n  }, {\n    key: 'getMaxLevel',\n    value: function getMaxLevel(capLevelIndex) {\n      var result = 0,\n          i = void 0,\n          level = void 0,\n          mWidth = this.mediaWidth,\n          mHeight = this.mediaHeight,\n          lWidth = 0,\n          lHeight = 0;\n\n      for (i = 0; i <= capLevelIndex; i++) {\n        level = this.levels[i];\n        if (this.isLevelRestricted(i)) {\n          break;\n        }\n        result = i;\n        lWidth = level.width;\n        lHeight = level.height;\n        if (mWidth <= lWidth || mHeight <= lHeight) {\n          break;\n        }\n      }\n      return result;\n    }\n  }, {\n    key: 'isLevelRestricted',\n    value: function isLevelRestricted(level) {\n      return this.restrictedLevels && this.restrictedLevels.indexOf(level) !== -1 ? true : false;\n    }\n  }, {\n    key: 'contentScaleFactor',\n    get: function get() {\n      var pixelRatio = 1;\n      try {\n        pixelRatio = window.devicePixelRatio;\n      } catch (e) {}\n      return pixelRatio;\n    }\n  }, {\n    key: 'mediaWidth',\n    get: function get() {\n      var width = void 0;\n      if (this.media) {\n        width = this.media.width || this.media.clientWidth || this.media.offsetWidth;\n        width *= this.contentScaleFactor;\n      }\n      return width;\n    }\n  }, {\n    key: 'mediaHeight',\n    get: function get() {\n      var height = void 0;\n      if (this.media) {\n        height = this.media.height || this.media.clientHeight || this.media.offsetHeight;\n        height *= this.contentScaleFactor;\n      }\n      return height;\n    }\n  }]);\n\n  return CapLevelController;\n}(_eventHandler2.default);\n\nexports.default = CapLevelController;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _eventHandler = require('../event-handler');\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _logger = require('../utils/logger');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\nontroller\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\nvar FPSController = function (_EventHandler) {\n  _inherits(FPSController, _EventHandler);\n\n  function FPSController(hls) {\n    _classCallCheck(this, FPSController);\n\n    return _possibleConstructorReturn(this, (FPSController.__proto__ || Object.getPrototypeOf(FPSController)).call(this, hls, _events2.default.MEDIA_ATTACHING));\n  }\n\n  _createClass(FPSController, [{\n    key: 'destroy',\n    value: function destroy() {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n      this.isVideoPlaybackQualityAvailable = false;\n    }\n  }, {\n    key: 'onMediaAttaching',\n    value: function onMediaAttaching(data) {\n      if (this.hls.config.capLevelOnFPSDrop) {\n        this.video = data.media instanceof HTMLVideoElement ? data.media : null;\n        if (typeof this.video.getVideoPlaybackQuality === 'function') {\n          this.isVideoPlaybackQualityAvailable = true;\n        }\n        clearInterval(this.timer);\n        this.timer = setInterval(this.checkFPSInterval.bind(this), this.hls.config.fpsDroppedMonitoringPeriod);\n      }\n    }\n  }, {\n    key: 'checkFPS',\n    value: function checkFPS(video, decodedFrames, droppedFrames) {\n      var currentTime = performance.now();\n      if (decodedFrames) {\n        if (this.lastTime) {\n          var currentPeriod = currentTime - this.lastTime,\n              currentDropped = droppedFrames - this.lastDroppedFrames,\n              currentDecoded = decodedFrames - this.lastDecodedFrames,\n              droppedFPS = 1000 * currentDropped / currentPeriod;\n          this.hls.trigger(_events2.default.FPS_DROP, { currentDropped: currentDropped, currentDecoded: currentDecoded, totalDroppedFrames: droppedFrames });\n          if (droppedFPS > 0) {\n            //logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));\n            if (currentDropped > this.hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {\n              var currentLevel = this.hls.currentLevel;\n              _logger.logger.warn('drop FPS ratio greater than max allowed value for currentLevel: ' + currentLevel);\n              if (currentLevel > 0 && (this.hls.autoLevelCapping === -1 || this.hls.autoLevelCapping >= currentLevel)) {\n                currentLevel = currentLevel - 1;\n                this.hls.trigger(_events2.default.FPS_DROP_LEVEL_CAPPING, { level: currentLevel, droppedLevel: this.hls.currentLevel });\n                this.hls.autoLevelCapping = currentLevel;\n                this.hls.streamController.nextLevelSwitch();\n              }\n            }\n          }\n        }\n        this.lastTime = currentTime;\n        this.lastDroppedFrames = droppedFrames;\n        this.lastDecodedFrames = decodedFrames;\n      }\n    }\n  }, {\n    key: 'checkFPSInterval',\n    value: function checkFPSInterval() {\n      if (this.video) {\n        if (this.isVideoPlaybackQualityAvailable) {\n          var videoPlaybackQuality = this.video.getVideoPlaybackQuality();\n          this.checkFPS(this.video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);\n        } else {\n          this.checkFPS(this.video, this.video.webkitDecodedFrameCount, this.video.webkitDroppedFrameCount);\n        }\n      }\n    }\n  }]);\n\n  return FPSController;\n}(_eventHandler2.default);\n\nexports.default = FPSController;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _eventHandler = require('../event-handler');\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _levelHelper = require('../helper/level-helper');\n\nvar _levelHelper2 = _interopRequireDefault(_levelHelper);\n\nvar _logger = require('../utils/logger');\n\nvar _errors = require('../errors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Level Controller\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\nvar LevelController = function (_EventHandler) {\n  _inherits(LevelController, _EventHandler);\n\n  function LevelController(hls) {\n    _classCallCheck(this, LevelController);\n\n    var _this = _possibleConstructorReturn(this, (LevelController.__proto__ || Object.getPrototypeOf(LevelController)).call(this, hls, _events2.default.MANIFEST_LOADED, _events2.default.LEVEL_LOADED, _events2.default.ERROR));\n\n    _this.ontick = _this.tick.bind(_this);\n    _this._manualLevel = _this._autoLevelCapping = -1;\n    return _this;\n  }\n\n  _createClass(LevelController, [{\n    key: 'destroy',\n    value: function destroy() {\n      if (this.timer) {\n        clearTimeout(this.timer);\n        this.timer = null;\n      }\n      this._manualLevel = -1;\n    }\n  }, {\n    key: 'clearLevelDetails',\n    value: function clearLevelDetails() {\n      // clean up live level details to force reload them, and reset load errors\n      if (this._levels) {\n        this._levels.forEach(function (level) {\n          level.loadError = 0;\n          var levelDetails = level.details;\n          if (levelDetails && levelDetails.live) {\n            level.details = undefined;\n          }\n        });\n      }\n    }\n  }, {\n    key: 'startLoad',\n    value: function startLoad() {\n      this.canload = true;\n      // speed up live playlist refresh\n      if (_levelHelper2.default.isLive(this._level, this._levels)) {\n        this.tick();\n      }\n    }\n  }, {\n    key: 'stopLoad',\n    value: function stopLoad() {\n      this.canload = false;\n    }\n  }, {\n    key: 'isVideoLevel',\n    value: function isVideoLevel(level) {\n      return level.videoCodec || !level.audioCodec && (level.bitrate > 64000 || level.width || level.height);\n    }\n  }, {\n    key: 'onManifestLoaded',\n    value: function onManifestLoaded(data) {\n      var _this2 = this;\n\n      var levels0 = [],\n          levels = [],\n          bitrateStart,\n          bitrateSet = {},\n          videoCodecFound = false,\n          audioCodecFound = false,\n          hls = this.hls,\n          i,\n          brokenmp4inmp3 = /chrome|firefox/.test(navigator.userAgent.toLowerCase()),\n          checkSupported = function checkSupported(type, codec) {\n        return MediaSource.isTypeSupported(type + '/mp4;codecs=' + codec);\n      };\n\n      // regroup redundant level together\n      data.levels.forEach(function (level) {\n        if (_this2.isVideoLevel(level)) {\n          videoCodecFound = true;\n        }\n        // erase audio codec info if browser does not support mp4a.40.34. demuxer will autodetect codec and fallback to mpeg/audio\n        if (brokenmp4inmp3 && level.audioCodec && level.audioCodec.indexOf('mp4a.40.34') !== -1) {\n          level.audioCodec = undefined;\n        }\n        if (level.audioCodec || level.attrs && level.attrs.AUDIO) {\n          audioCodecFound = true;\n        }\n        var redundantLevelId = bitrateSet[level.bitrate];\n        if (redundantLevelId === undefined) {\n          bitrateSet[level.bitrate] = levels0.length;\n          level.url = [level.url];\n          level.urlId = 0;\n          levels0.push(level);\n        } else {\n          levels0[redundantLevelId].url.push(level.url);\n        }\n      });\n\n      // remove audio-only level if we also have levels with audio+video codecs signalled\n      if (videoCodecFound && audioCodecFound) {\n        levels0.forEach(function (level) {\n          if (_this2.isVideoLevel(level)) {\n            levels.push(level);\n          }\n        });\n      } else {\n        levels = levels0;\n      }\n      // only keep level with supported audio/video codecs\n      levels = levels.filter(function (level) {\n        var audioCodec = level.audioCodec,\n            videoCodec = level.videoCodec;\n        return (!audioCodec || checkSupported('audio', audioCodec)) && (!videoCodec || checkSupported('video', videoCodec));\n      });\n\n      if (levels.length) {\n        // start bitrate is the first bitrate of the manifest\n        bitrateStart = levels[0].bitrate;\n        // sort level on bitrate\n        levels.sort(function (a, b) {\n          return a.bitrate - b.bitrate;\n        });\n        this._levels = levels;\n        // find index of first level in sorted levels\n        for (i = 0; i < levels.length; i++) {\n          if (levels[i].bitrate === bitrateStart) {\n            this._firstLevel = i;\n            _logger.logger.log('manifest loaded,' + levels.length + ' level(s) found, first bitrate:' + bitrateStart);\n            break;\n          }\n        }\n        hls.trigger(_events2.default.MANIFEST_PARSED, { levels: this._levels, firstLevel: this._firstLevel, stats: data.stats });\n      } else {\n        hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR, fatal: true, url: hls.url, reason: 'no level with compatible codecs found in manifest' });\n      }\n      return;\n    }\n  }, {\n    key: 'setLevelInternal',\n    value: function setLevelInternal(newLevel) {\n      var levels = this._levels;\n      // check if level idx is valid\n      if (newLevel >= 0 && newLevel < levels.length) {\n        // stopping live reloading timer if any\n        if (this.timer) {\n          clearTimeout(this.timer);\n          this.timer = null;\n        }\n        if (this._level !== newLevel) {\n          _logger.logger.log('switching to level ' + newLevel);\n          this._level = newLevel;\n          this.hls.trigger(_events2.default.LEVEL_SWITCH, { level: newLevel });\n        }\n        var level = levels[newLevel];\n        // check if we need to load playlist for this level\n        if (!level.details || level.details.live === true) {\n          // level not retrieved yet, or live playlist we need to (re)load it\n          _logger.logger.log('(re)loading playlist for level ' + newLevel);\n          var urlId = level.urlId;\n          this.hls.trigger(_events2.default.LEVEL_LOADING, { url: level.url[urlId], level: newLevel, id: urlId });\n        }\n      } else {\n        // invalid level id given, trigger error\n        this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.OTHER_ERROR, details: _errors.ErrorDetails.LEVEL_SWITCH_ERROR, level: newLevel, fatal: false, reason: 'invalid level idx' });\n      }\n    }\n  }, {\n    key: 'onError',\n    value: function onError(data) {\n      if (data.fatal) {\n        return;\n      }\n\n      var details = data.details,\n          hls = this.hls,\n          levelId = void 0,\n          level = void 0,\n          levelError = false;\n      // try to recover not fatal errors\n      switch (details) {\n        case _errors.ErrorDetails.FRAG_LOAD_ERROR:\n        case _errors.ErrorDetails.FRAG_LOAD_TIMEOUT:\n        case _errors.ErrorDetails.FRAG_LOOP_LOADING_ERROR:\n        case _errors.ErrorDetails.KEY_LOAD_ERROR:\n        case _errors.ErrorDetails.KEY_LOAD_TIMEOUT:\n          levelId = data.frag.level;\n          break;\n        case _errors.ErrorDetails.LEVEL_LOAD_ERROR:\n        case _errors.ErrorDetails.LEVEL_LOAD_TIMEOUT:\n          levelId = data.level;\n          levelError = true;\n          break;\n        default:\n          break;\n      }\n      /* try to switch to a redundant stream if any available.\n       * if no redundant stream available, emergency switch down (if in auto mode and current level not 0)\n       * otherwise, we cannot recover this network error ...\n       * don't raise FRAG_LOAD_ERROR and FRAG_LOAD_TIMEOUT as fatal, as it is handled by mediaController\n       */\n      if (levelId !== undefined) {\n        level = this._levels[levelId];\n        if (level.urlId < level.url.length - 1) {\n          level.urlId++;\n          if (this.hls.config.clearLevelDetailsOnSwitching) {\n            level.details = undefined;\n          }\n          _logger.logger.warn('level controller,' + details + ' for level ' + levelId + ': switching to redundant stream id ' + level.urlId);\n        } else {\n          // we could try to recover if in auto mode and current level not lowest level (0)\n          var recoverable = this._manualLevel === -1 && levelId;\n          if (recoverable) {\n            _logger.logger.warn('level controller,' + details + ': emergency switch-down for next fragment');\n            hls.abrController.nextAutoLevel = 0;\n          } else if (level && level.details && level.details.live) {\n            _logger.logger.warn('level controller,' + details + ' on live stream, discard');\n            if (levelError) {\n              // reset this._level so that another call to set level() will retrigger a frag load\n              this._level = undefined;\n            }\n            // FRAG_LOAD_ERROR and FRAG_LOAD_TIMEOUT are handled by mediaController\n          } else if (details !== _errors.ErrorDetails.FRAG_LOAD_ERROR && details !== _errors.ErrorDetails.FRAG_LOAD_TIMEOUT) {\n            _logger.logger.error('cannot recover ' + details + ' error');\n            this._level = undefined;\n            // stopping live reloading timer if any\n            if (this.timer) {\n              clearTimeout(this.timer);\n              this.timer = null;\n            }\n            // redispatch same error but with fatal set to true\n            data.fatal = true;\n            hls.trigger(_events2.default.ERROR, data);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'onLevelLoaded',\n    value: function onLevelLoaded(data) {\n      // only process level loaded events matching with expected level\n      if (data.level === this._level) {\n        var newDetails = data.details;\n        // if current playlist is a live playlist, arm a timer to reload it\n        if (newDetails.live) {\n          var reloadInterval = 1000 * (newDetails.averagetargetduration ? newDetails.averagetargetduration : newDetails.targetduration),\n              curLevel = this._levels[data.level],\n              curDetails = curLevel.details;\n          if (curDetails && newDetails.endSN === curDetails.endSN) {\n            // follow HLS Spec, If the client reloads a Playlist file and finds that it has not\n            // changed then it MUST wait for a period of one-half the target\n            // duration before retrying.\n            reloadInterval /= 2;\n            _logger.logger.log('same live playlist, reload twice faster');\n          }\n          // decrement reloadInterval with level loading delay\n          reloadInterval -= performance.now() - data.stats.trequest;\n          // in any case, don't reload more than every second\n          reloadInterval = Math.max(1000, Math.round(reloadInterval));\n          _logger.logger.log('live playlist, reload in ' + reloadInterval + ' ms');\n          this.timer = setTimeout(this.ontick, reloadInterval);\n        } else {\n          this.timer = null;\n        }\n      }\n    }\n  }, {\n    key: 'tick',\n    value: function tick() {\n      var levelId = this._level;\n      if (levelId !== undefined && this.canload) {\n        var level = this._levels[levelId],\n            urlId = level.urlId;\n        this.hls.trigger(_events2.default.LEVEL_LOADING, { url: level.url[urlId], level: levelId, id: urlId });\n      }\n    }\n  }, {\n    key: 'levels',\n    get: function get() {\n      return this._levels;\n    }\n  }, {\n    key: 'level',\n    get: function get() {\n      return this._level;\n    },\n    set: function set(newLevel) {\n      var levels = this._levels;\n      if (levels && levels.length > newLevel) {\n        if (this._level !== newLevel || levels[newLevel].details === undefined) {\n          this.setLevelInternal(newLevel);\n        }\n      }\n    }\n  }, {\n    key: 'manualLevel',\n    get: function get() {\n      return this._manualLevel;\n    },\n    set: function set(newLevel) {\n      this._manualLevel = newLevel;\n      if (this._startLevel === undefined) {\n        this._startLevel = newLevel;\n      }\n      if (newLevel !== -1) {\n        this.level = newLevel;\n      }\n    }\n  }, {\n    key: 'firstLevel',\n    get: function get() {\n      return this._firstLevel;\n    },\n    set: function set(newLevel) {\n      this._firstLevel = newLevel;\n    }\n  }, {\n    key: 'startLevel',\n    get: function get() {\n      return this._startLevel === undefined ? this._firstLevel : this._startLevel;\n    },\n    set: function set(newLevel) {\n      this._startLevel = newLevel;\n    }\n  }, {\n    key: 'nextLoadLevel',\n    get: function get() {\n      if (this._manualLevel !== -1) {\n        return this._manualLevel;\n      } else {\n        return this.hls.abrController.nextAutoLevel;\n      }\n    },\n    set: function set(nextLevel) {\n      this.level = nextLevel;\n      if (this._manualLevel === -1) {\n        this.hls.abrController.nextAutoLevel = nextLevel;\n      }\n    }\n  }]);\n\n  return LevelController;\n}(_eventHandler2.default);\n\nexports.default = LevelController;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _demuxer = require('../demux/demuxer');\n\nvar _demuxer2 = _interopRequireDefault(_demuxer);\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _eventHandler = require('../event-handler');\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _logger = require('../utils/logger');\n\nvar _binarySearch = require('../utils/binary-search');\n\nvar _binarySearch2 = _interopRequireDefault(_binarySearch);\n\nvar _bufferHelper = require('../helper/buffer-helper');\n\nvar _bufferHelper2 = _interopRequireDefault(_bufferHelper);\n\nvar _levelHelper = require('../helper/level-helper');\n\nvar _levelHelper2 = _interopRequireDefault(_levelHelper);\n\nvar _errors = require('../errors');\n\nvar _browser = require('../utils/browser');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Stream Controller\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\nvar State = {\n  STOPPED: 'STOPPED',\n  STARTING: 'STARTING',\n  IDLE: 'IDLE',\n  PAUSED: 'PAUSED',\n  KEY_LOADING: 'KEY_LOADING',\n  FRAG_LOADING: 'FRAG_LOADING',\n  FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',\n  WAITING_LEVEL: 'WAITING_LEVEL',\n  PARSING: 'PARSING',\n  PARSED: 'PARSED',\n  ENDED: 'ENDED',\n  ERROR: 'ERROR'\n};\n\nvar StreamController = function (_EventHandler) {\n  _inherits(StreamController, _EventHandler);\n\n  function StreamController(hls) {\n    _classCallCheck(this, StreamController);\n\n    var _this = _possibleConstructorReturn(this, (StreamController.__proto__ || Object.getPrototypeOf(StreamController)).call(this, hls, _events2.default.MEDIA_ATTACHED, _events2.default.MEDIA_DETACHING, _events2.default.MANIFEST_LOADING, _events2.default.MANIFEST_PARSED, _events2.default.LEVEL_LOADED, _events2.default.LEVEL_PTS_UPDATED, _events2.default.KEY_LOADED, _events2.default.FRAG_CHUNK_LOADED, _events2.default.FRAG_LOADED, _events2.default.FRAG_LOAD_EMERGENCY_ABORTED, _events2.default.FRAG_PARSING_INIT_SEGMENT, _events2.default.FRAG_PARSING_DATA, _events2.default.FRAG_PARSED, _events2.default.FRAG_APPENDED, _events2.default.ERROR, _events2.default.BUFFER_FLUSHED, _events2.default.DEMUXER_QUEUE_EMPTY));\n\n    _this.config = hls.config;\n    _this.audioCodecSwap = false;\n    _this.ticks = 0;\n    _this.ontick = _this.tick.bind(_this);\n    _this.noMediaCount = 0;\n    return _this;\n  }\n\n  _createClass(StreamController, [{\n    key: 'destroy',\n    value: function destroy() {\n      this.stopLoad();\n      delete this.fragPreviousSaved;\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n      _eventHandler2.default.prototype.destroy.call(this);\n      this.state = State.STOPPED;\n    }\n  }, {\n    key: 'startLoad',\n    value: function startLoad() {\n      var startPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.levels) {\n        var media = this.media,\n            lastCurrentTime = this.lastCurrentTime;\n        this.stopLoad();\n        if (!this.demuxer) {\n          this.demuxer = new _demuxer2.default(this.hls);\n          this.fragParsing = null;\n        }\n        if (!this.timer) {\n          this.timer = setInterval(this.ontick, 100);\n        }\n        if (this.fragPreviousSaved) {\n          this.fragPrevious = this.fragPreviousSaved;\n          delete this.fragPrevious;\n        }\n        this.level = -1;\n        this.fragLoadError = 0;\n        if (media && lastCurrentTime > 0) {\n          var lastLevel = this.hls.loadLevel;\n          if (_levelHelper2.default.isLive(lastLevel, this.levels)) {\n            this.level = lastLevel;\n            this.waitLiveLevel = true;\n          }\n          _logger.logger.log('configure startPosition @' + lastCurrentTime);\n          this.state = this.level === -1 ? State.IDLE : State.WAITING_LEVEL;\n        } else {\n          this.lastCurrentTime = this.startPosition ? this.startPosition : startPosition;\n          _logger.logger.log('configure lastCurrentTime @' + this.lastCurrentTime + ' start:' + this.startPosition + ',' + startPosition);\n          this.state = State.STARTING;\n        }\n        this.nextLoadPosition = this.startPosition = this.lastCurrentTime;\n        this.tick();\n      } else {\n        _logger.logger.warn('cannot start loading as manifest not parsed yet');\n        this.state = State.STOPPED;\n      }\n    }\n  }, {\n    key: 'onDemuxerQueueEmpty',\n    value: function onDemuxerQueueEmpty() {\n      this.fragParsing = null;\n    }\n  }, {\n    key: 'stopLoad',\n    value: function stopLoad(stopDemuxer) {\n      var frag = this.fragCurrent;\n      if (frag) {\n        if (frag.loader) {\n          frag.loader.abort();\n        }\n        this.fragCurrent = null;\n      }\n      this.fragPreviousSaved = this.fragPrevious || this.fragPreviousSaved;\n      this.fragPrevious = null;\n      if (this.state === State.PARSING && this.demuxer && this.config.enableWorker) {\n        this.fragParsing = frag;\n        this.demuxer.waitQueue();\n      }\n      if (stopDemuxer && this.demuxer) {\n        this.demuxer.destroy();\n        this.demuxer = null;\n      }\n      this.state = State.STOPPED;\n    }\n  }, {\n    key: 'tick',\n    value: function tick() {\n      this.ticks++;\n      if (this.ticks === 1) {\n        this.doTick();\n        if (this.ticks > 1) {\n          setTimeout(this.tick, 1);\n        }\n        this.ticks = 0;\n      }\n    }\n  }, {\n    key: 'doTick',\n    value: function doTick() {\n      switch (this.state) {\n        case State.STARTING:\n          var hls = this.hls;\n          // determine load level\n          var startLevel = hls.startLevel;\n          if (startLevel === -1) {\n            startLevel = 0;\n          }\n          // set new level to playlist loader : this will trigger start level load\n          // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded\n          this.level = hls.nextLoadLevel = startLevel;\n          this.state = State.WAITING_LEVEL;\n          this.loadedmetadata = false;\n          break;\n        case State.IDLE:\n          if (!this.media) {\n            if (this.noMediaCount++ % 20 === 0) {\n              var media = this.hls.bufferController.media || {};\n              var ms = this.hls.bufferController.mediaSource || {};\n              _logger.logger.log('no media ' + media + ' src=' + media.src + ' ms_state=' + ms.readyState);\n            }\n          } else {\n            if (this.noMediaCount) {\n              _logger.logger.log('media is set to ' + this.media.src);\n            }\n            this.noMediaCount = 0;\n          }\n          // when this returns false there was an error and we shall return immediatly\n          // from current tick\n          if (!this._doTickIdle()) {\n            return;\n          }\n          break;\n        case State.WAITING_LEVEL:\n          var level = this.levels[this.level];\n          // check if playlist is already loaded\n          if (level && level.details && !this.waitLiveLevel) {\n            this.state = State.IDLE;\n          }\n          break;\n        case State.FRAG_LOADING:\n          try {\n            if (this.levels[this.level].details.live && this.fragCurrent.sn < this.levels[this.level].details.startSN) {\n              _logger.logger.log('live playlist slided forward loading segments: reload');\n              this.state = State.IDLE;\n            }\n          } catch (e) {}\n          break;\n        case State.FRAG_LOADING_WAITING_RETRY:\n          var now = performance.now();\n          var retryDate = this.retryDate;\n          // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading\n          if (!retryDate || now >= retryDate || this.media && this.media.seeking) {\n            _logger.logger.log('mediaController: retryDate reached, switch back to IDLE state');\n            this.state = State.IDLE;\n          }\n          break;\n        case State.ERROR:\n        case State.PAUSED:\n        case State.STOPPED:\n        case State.PARSING:\n        case State.PARSED:\n        case State.ENDED:\n          break;\n        default:\n          break;\n      }\n      // check buffer\n      this._checkBuffer();\n      // check/update current fragment\n      this._checkFragmentChanged();\n    }\n\n    // Ironically the \"idle\" state is the on we do the most logic in it seems ....\n    // NOTE: Maybe we could rather schedule a check for buffer length after half of the currently\n    //       played segment, or on pause/play/seek instead of naively checking every 100ms?\n\n  }, {\n    key: '_doTickIdle',\n    value: function _doTickIdle() {\n      var hls = this.hls,\n          config = hls.config;\n\n      // if video not attached AND\n      // start fragment already requested OR start frag prefetch disable\n      // exit loop\n      // => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop\n      if (this.levelLastLoaded !== undefined && !this.media && (this.startFragRequested || !config.startFragPrefetch)) {\n        return true;\n      }\n\n      // if we have not yet loaded any fragment, start loading from start position\n      var pos = this.loadedmetadata ? this.media.currentTime : this.nextLoadPosition;\n      // determine next load level\n      var level = hls.nextLoadLevel;\n\n      // compute max Buffer Length that we could get from this load level, based on level bitrate. don't buffer more than 60 MB and more than 30s\n      var maxBufLen = void 0;\n      if (this.levels[level].hasOwnProperty('bitrate')) {\n        maxBufLen = Math.max(8 * config.maxBufferSize / this.levels[level].bitrate, config.maxBufferLength);\n        maxBufLen = Math.min(maxBufLen, config.maxMaxBufferLength);\n      } else {\n        maxBufLen = config.maxBufferLength;\n      }\n\n      // determine next candidate fragment to be loaded, based on current position and end of buffer position\n      // ensure up to `config.maxMaxBufferLength` of buffer upfront\n\n      var bufferInfo = _bufferHelper2.default.bufferInfo(this.media, pos, config.maxBufferHole),\n          bufferLen = bufferInfo.len;\n      // Stay idle if we are still with buffer margins\n      if (bufferLen >= maxBufLen) {\n        return true;\n      }\n\n      // if buffer length is less than maxBufLen try to load a new fragment ...\n      _logger.logger.trace('buffer length of ' + bufferLen.toFixed(3) + ' is below max of ' + maxBufLen.toFixed(3) + '. checking for more payload ...');\n\n      // set next load level : this will trigger a playlist load if needed\n      this.level = hls.nextLoadLevel = level;\n\n      var levelDetails = this.levels[level].details;\n      // if level info not retrieved yet, switch state and wait for level retrieval\n      // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load\n      // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)\n      if (typeof levelDetails === 'undefined' || levelDetails.live && this.levelLastLoaded !== level) {\n        this.state = State.WAITING_LEVEL;\n        return true;\n      }\n\n      // if we have the levelDetails for the selected variant, lets continue enrichen our stream (load keys/fragments or trigger EOS, etc..)\n      return this._fetchPayloadOrEos({ pos: pos, bufferInfo: bufferInfo, levelDetails: levelDetails });\n    }\n  }, {\n    key: '_fetchPayloadOrEos',\n    value: function _fetchPayloadOrEos(_ref) {\n      var pos = _ref.pos,\n          bufferInfo = _ref.bufferInfo,\n          levelDetails = _ref.levelDetails;\n\n      var fragPrevious = this.fragPrevious,\n          level = this.level,\n          fragments = levelDetails.fragments,\n          fragLen = fragments.length;\n\n      // empty playlist\n      if (fragLen === 0) {\n        return false;\n      }\n\n      // find fragment index, contiguous with end of buffer position\n      var start = fragments[0].start,\n          end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration,\n          bufferEnd = bufferInfo.end,\n          frag = void 0;\n\n      // in case of live playlist we need to ensure that requested position is not located before playlist start\n      if (levelDetails.live) {\n        frag = this._ensureFragmentAtLivePoint({ levelDetails: levelDetails, bufferEnd: bufferEnd, start: start, end: end, fragPrevious: fragPrevious, fragments: fragments, fragLen: fragLen });\n        // if it explicitely returns null don't load any fragment and exit function now\n        if (frag === null) {\n          return false;\n        }\n      } else {\n        // VoD playlist: if bufferEnd before start of playlist, load first fragment\n        if (bufferEnd < start) {\n          frag = fragments[0];\n        }\n      }\n      if (!frag) {\n        frag = this._findFragment({ start: start, fragPrevious: fragPrevious, fragLen: fragLen, fragments: fragments, bufferEnd: bufferEnd, end: end, levelDetails: levelDetails });\n      }\n      if (frag) {\n        return this._loadFragmentOrKey({ frag: frag, level: level, levelDetails: levelDetails, pos: pos, bufferEnd: bufferEnd });\n      }\n      return true;\n    }\n  }, {\n    key: '_ensureFragmentAtLivePoint',\n    value: function _ensureFragmentAtLivePoint(_ref2) {\n      var levelDetails = _ref2.levelDetails,\n          bufferEnd = _ref2.bufferEnd,\n          start = _ref2.start,\n          end = _ref2.end,\n          fragPrevious = _ref2.fragPrevious,\n          fragments = _ref2.fragments,\n          fragLen = _ref2.fragLen;\n\n      var config = this.hls.config,\n          media = this.media;\n\n      var frag = void 0;\n\n      // check if requested position is within seekable boundaries :\n      //logger.log(`start/pos/bufEnd/seeking:${start.toFixed(3)}/${pos.toFixed(3)}/${bufferEnd.toFixed(3)}/${this.media.seeking}`);\n      var maxLatency = config.liveMaxLatencyDuration !== undefined ? config.liveMaxLatencyDuration : config.liveMaxLatencyDurationCount * levelDetails.targetduration;\n\n      if (bufferEnd < Math.max(start - config.maxFragLookUpTolerance, end - maxLatency)) {\n        var liveSyncPosition = this.computeLivePosition(start, levelDetails);\n        _logger.logger.log('buffer end: ' + bufferEnd.toFixed(3) + ' is located too far from the end of live sliding playlist, reset currentTime to : ' + liveSyncPosition.toFixed(3));\n        bufferEnd = liveSyncPosition;\n        if (media && media.readyState && media.duration > liveSyncPosition) {\n          media.currentTime = liveSyncPosition;\n        }\n      }\n\n      // if end of buffer greater than live edge, don't load any fragment\n      // this could happen if live playlist intermittently slides in the past.\n      // level 1 loaded [182580161,182580167]\n      // level 1 loaded [182580162,182580169]\n      // Loading 182580168 of [182580162 ,182580169],level 1 ..\n      // Loading 182580169 of [182580162 ,182580169],level 1 ..\n      // level 1 loaded [182580162,182580168] <============= here we should have bufferEnd > end. in that case break to avoid reloading 182580168\n      // level 1 loaded [182580164,182580171]\n      //\n      if (levelDetails.PTSKnown && bufferEnd > end && media && media.readyState) {\n        return null;\n      }\n\n      if (this.startFragRequested && !levelDetails.PTSKnown) {\n        /* we are switching level on live playlist, but we don't have any PTS info for that quality level ...\n           try to load frag matching with next SN.\n           even if SN are not synchronized between playlists, loading this frag will help us\n           compute playlist sliding and find the right one after in case it was not the right consecutive one */\n        if (fragPrevious) {\n          var targetSN = fragPrevious.sn + 1;\n          if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {\n            frag = fragments[targetSN - levelDetails.startSN];\n            _logger.logger.log('live playlist, switching playlist, load frag with next SN: ' + frag.sn);\n          }\n        }\n        if (!frag) {\n          /* we have no idea about which fragment should be loaded.\n             so let's load mid fragment. it will help computing playlist sliding and find the right one\n          */\n          frag = fragments[Math.min(fragLen - 1, Math.round(fragLen / 2))];\n          _logger.logger.log('live playlist, switching playlist, unknown, load middle frag : ' + frag.sn);\n        }\n      }\n      return frag;\n    }\n  }, {\n    key: '_findFragment',\n    value: function _findFragment(_ref3) {\n      var start = _ref3.start,\n          fragPrevious = _ref3.fragPrevious,\n          fragLen = _ref3.fragLen,\n          fragments = _ref3.fragments,\n          bufferEnd = _ref3.bufferEnd,\n          end = _ref3.end,\n          levelDetails = _ref3.levelDetails,\n          holaSeek = _ref3.holaSeek;\n\n      var config = this.hls.config;\n      var frag = void 0,\n          foundFrag = void 0,\n          maxFragLookUpTolerance = config.maxFragLookUpTolerance,\n          media = this.media,\n          seekFlag = media && media.seeking || holaSeek;\n\n      if (bufferEnd < end - (fragments[fragLen - 1].PTSDTSshift || 0) - 0.05) {\n        if (bufferEnd > end - maxFragLookUpTolerance || seekFlag) {\n          maxFragLookUpTolerance = 0;\n        }\n        foundFrag = _binarySearch2.default.search(fragments, function (candidate) {\n          // offset should be within fragment boundary - config.maxFragLookUpTolerance\n          // this is to cope with situations like\n          // bufferEnd = 9.991\n          // frag[Ø] : [0,10]\n          // frag[1] : [10,20]\n          // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here\n          //              frag start               frag start+duration\n          //                  |-----------------------------|\n          //              <--->                         <--->\n          //  ...--------><-----------------------------><---------....\n          // previous frag         matching fragment         next frag\n          //  return -1             return 0                 return 1\n          //logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);\n          // if we are in seek, the condition will always be false\n          if (candidate.lastGop - maxFragLookUpTolerance < bufferEnd && candidate.lastGop + maxFragLookUpTolerance > bufferEnd) {\n            return 1;\n          }\n          // if we are in seek, the condition will always be false\n          if (candidate.firstGop - maxFragLookUpTolerance < bufferEnd && candidate.firstGop + maxFragLookUpTolerance > bufferEnd) {\n            return 0;\n          }\n          if (candidate.start + candidate.duration - candidate.PTSDTSshift - maxFragLookUpTolerance <= bufferEnd) {\n            return 1;\n          }\n          // if maxFragLookUpTolerance will have negative value then don't return -1 for first element\n          if (candidate.start - candidate.PTSDTSshift - maxFragLookUpTolerance > bufferEnd && candidate.start) {\n            return candidate.sn > levelDetails.startSN ? -1 : 0;\n          }\n          return 0;\n        });\n      } else {\n        // reach end of playlist\n        foundFrag = fragments[fragLen - 1];\n      }\n      if (foundFrag) {\n        frag = foundFrag;\n        start = foundFrag.start;\n        _logger.logger.log('find SN matching with pos:' + bufferEnd + ':' + frag.sn);\n        if (fragPrevious && frag.sn === fragPrevious.sn) {\n          if (frag.sn < levelDetails.endSN) {\n            var deltaPTS = fragPrevious.deltaPTS,\n                curSNIdx = frag.sn - levelDetails.startSN;\n            // if there is a significant delta between audio and video, larger than max allowed hole,\n            // and if previous remuxed fragment did not start with a keyframe. (fragPrevious.dropped)\n            // let's try to load previous fragment again to get last keyframe\n            // then we will reload again current fragment (that way we should be able to fill the buffer hole ...)\n            if (this.loadedmetadata && deltaPTS && deltaPTS > config.maxSeekHole && fragPrevious.dropped && (!media || !_bufferHelper2.default.isBuffered(media, bufferEnd))) {\n              frag = fragments[curSNIdx - 1];\n              _logger.logger.warn('SN just loaded, with large PTS gap between audio and video, maybe frag is not starting with a keyframe ? load previous one to try to overcome this');\n              // decrement previous frag load counter to avoid frag loop loading error when next fragment will get reloaded\n              fragPrevious.loadCounter--;\n            } else {\n              frag = fragments[curSNIdx + 1];\n              _logger.logger.log('SN just loaded, load next one: ' + frag.sn);\n            }\n          } else {\n            // have we reached end of VOD playlist ?\n            if (!levelDetails.live) {\n              // Finalize the media stream\n              this.hls.trigger(_events2.default.BUFFER_EOS);\n              // We might be loading the last fragment but actually the media\n              // is currently processing a seek command and waiting for new data to resume at another point.\n              // Going to ended state while media is seeking can spawn an infinite buffering broken state.\n              if (!this.media.seeking) {\n                this.state = State.ENDED;\n              }\n            }\n            frag = null;\n          }\n        }\n      }\n      return frag;\n    }\n  }, {\n    key: '_loadFragmentOrKey',\n    value: function _loadFragmentOrKey(_ref4) {\n      var frag = _ref4.frag,\n          level = _ref4.level,\n          levelDetails = _ref4.levelDetails,\n          pos = _ref4.pos,\n          bufferEnd = _ref4.bufferEnd;\n\n      var hls = this.hls,\n          config = hls.config;\n\n      //logger.log('loading frag ' + i +',pos/bufEnd:' + pos.toFixed(3) + '/' + bufferEnd.toFixed(3));\n      if (frag.decryptdata.uri != null && frag.decryptdata.key == null) {\n        _logger.logger.log('Loading key for ' + frag.sn + ' of [' + levelDetails.startSN + ' ,' + levelDetails.endSN + '],level ' + level);\n        this.state = State.KEY_LOADING;\n        hls.trigger(_events2.default.KEY_LOADING, { frag: frag });\n      } else {\n        _logger.logger.log('Loading ' + frag.sn + ' of [' + levelDetails.startSN + ' ,' + levelDetails.endSN + '],level ' + level + ', currentTime:' + pos + ',bufferEnd:' + bufferEnd.toFixed(3));\n        frag.autoLevel = hls.autoLevelEnabled;\n        if (this.levels.length > 1) {\n          frag.expectedLen = Math.round(frag.duration * this.levels[level].bitrate / 8);\n          frag.trequest = performance.now();\n        }\n        // ensure that we are not reloading the same fragments in loop ...\n        if (this.fragLoadIdx !== undefined) {\n          this.fragLoadIdx++;\n        } else {\n          this.fragLoadIdx = 0;\n        }\n        if (frag.loadCounter) {\n          frag.loadCounter++;\n          var maxThreshold = config.fragLoadingLoopThreshold;\n          // if this frag has already been loaded 3 times, and if it has been reloaded recently\n          if (frag.loadCounter > maxThreshold && Math.abs(this.fragLoadIdx - frag.loadIdx) < maxThreshold) {\n            hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.FRAG_LOOP_LOADING_ERROR, fatal: false, frag: frag });\n            return false;\n          }\n        } else {\n          frag.loadCounter = 1;\n        }\n        frag.loadIdx = this.fragLoadIdx;\n        this.fragCurrent = frag;\n        this.fragCurrent.loaded = false;\n        this.startFragRequested = true;\n        this.nextLoadPosition = frag.start + frag.duration;\n        this.fragTimeOffset = frag.start;\n        // lazy demuxer init, as this could take some time ... do it during frag loading\n        if (!this.demuxer) {\n          this.demuxer = new _demuxer2.default(hls, 'main');\n        }\n        this.state = State.FRAG_LOADING;\n        hls.trigger(_events2.default.FRAG_LOADING, { frag: frag });\n        return true;\n      }\n    }\n  }, {\n    key: 'getBufferRange',\n    value: function getBufferRange(position) {\n      return _binarySearch2.default.search(this.bufferRange, function (range) {\n        if (position < range.start) {\n          return -1;\n        } else if (position > range.end) {\n          return 1;\n        }\n        return 0;\n      });\n    }\n  }, {\n    key: 'followingBufferRange',\n    value: function followingBufferRange(range) {\n      if (range) {\n        // try to get range of next fragment (500ms after this range)\n        return this.getBufferRange(range.end + 0.5);\n      }\n      return null;\n    }\n  }, {\n    key: '_checkFragmentChanged',\n    value: function _checkFragmentChanged() {\n      var currentTime,\n          video = this.media;\n      if (video && video.seeking === false) {\n        currentTime = video.currentTime;\n        /* if video element is in seeked state, currentTime can only increase.\n          (assuming that playback rate is positive ...)\n          As sometimes currentTime jumps back to zero after a\n          media decode error, check this, to avoid seeking back to\n          wrong position after a media decode error\n        */\n        if (currentTime > video.playbackRate * this.lastCurrentTime) {\n          this.lastCurrentTime = currentTime;\n        }\n      }\n    }\n\n    /*\n      on immediate level switch :\n       - pause playback if playing\n       - cancel any pending load request\n       - and trigger a buffer flush\n    */\n\n  }, {\n    key: 'immediateLevelSwitch',\n    value: function immediateLevelSwitch() {\n      _logger.logger.log('immediateLevelSwitch');\n      if (!this.immediateSwitch) {\n        this.immediateSwitch = true;\n        this.previouslyPaused = this.media.paused;\n        this.media.pause();\n      }\n      var fragCurrent = this.fragCurrent;\n      if (fragCurrent && fragCurrent.loader) {\n        fragCurrent.loader.abort();\n      }\n      this.fragCurrent = null;\n      // increase fragment load Index to avoid frag loop loading error after buffer flush\n      this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;\n      this.state = State.PAUSED;\n      // flush everything\n      this.hls.trigger(_events2.default.BUFFER_FLUSHING, { startOffset: 0, endOffset: Number.POSITIVE_INFINITY });\n    }\n\n    /*\n       on immediate level switch end, after new fragment has been buffered :\n        - nudge video decoder by slightly adjusting video currentTime\n        - resume the playback if needed\n    */\n\n  }, {\n    key: 'immediateLevelSwitchEnd',\n    value: function immediateLevelSwitchEnd() {\n      var media = this.media;\n      if (media && media.buffered.length) {\n        this.immediateSwitch = false;\n        if (_bufferHelper2.default.isBuffered(media, media.currentTime)) {\n          // only nudge if currentTime is buffered\n          media.currentTime -= 0.0001;\n        }\n        if (!this.previouslyPaused) {\n          media.play();\n        }\n      }\n    }\n  }, {\n    key: 'nextLevelSwitch',\n    value: function nextLevelSwitch() {\n      /* try to switch ASAP without breaking video playback :\n         in order to ensure smooth but quick level switching,\n        we need to find the next flushable buffer range\n        we should take into account new segment fetch time\n      */\n      var media = this.media;\n      // ensure that media is defined and that metadata are available (to retrieve currentTime)\n      if (media && media.readyState) {\n        var fetchdelay = void 0,\n            currentRange = void 0,\n            nextRange = void 0;\n        // increase fragment load Index to avoid frag loop loading error after buffer flush\n        this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;\n        currentRange = this.getBufferRange(media.currentTime);\n        if (currentRange && currentRange.start > 1) {\n          // flush buffer preceding current fragment (flush until current fragment start offset)\n          // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...\n          this.state = State.PAUSED;\n          this.hls.trigger(_events2.default.BUFFER_FLUSHING, { startOffset: 0, endOffset: currentRange.start - 1 });\n        }\n        if (!media.paused) {\n          // add a safety delay of 1s\n          var nextLevelId = this.hls.nextLoadLevel,\n              nextLevel = this.levels[nextLevelId],\n              fragLastKbps = this.fragLastKbps;\n          if (fragLastKbps && this.fragCurrent) {\n            fetchdelay = this.fragCurrent.duration * nextLevel.bitrate / (1000 * fragLastKbps) + 1;\n          } else {\n            fetchdelay = 0;\n          }\n        } else {\n          fetchdelay = 0;\n        }\n        //logger.log('fetchdelay:'+fetchdelay);\n        // find buffer range that will be reached once new fragment will be fetched\n        nextRange = this.getBufferRange(media.currentTime + fetchdelay);\n        if (nextRange) {\n          // we can flush buffer range following this one without stalling playback\n          nextRange = this.followingBufferRange(nextRange);\n          if (nextRange) {\n            // if we are here, we can also cancel any loading/demuxing in progress, as they are useless\n            var fragCurrent = this.fragCurrent;\n            if (fragCurrent && fragCurrent.loader) {\n              fragCurrent.loader.abort();\n            }\n            this.fragCurrent = null;\n            // flush position is the start position of this new buffer\n            this.state = State.PAUSED;\n            this.hls.trigger(_events2.default.BUFFER_FLUSHING, { startOffset: nextRange.start, endOffset: Number.POSITIVE_INFINITY });\n          }\n        }\n      }\n    }\n  }, {\n    key: 'onMediaAttached',\n    value: function onMediaAttached(data) {\n      var media = this.media = data.media;\n      this.onvseeking = this.onMediaSeeking.bind(this);\n      this.onvseeked = this.onMediaSeeked.bind(this);\n      this.onvended = this.onMediaEnded.bind(this);\n      media.addEventListener('seeking', this.onvseeking);\n      media.addEventListener('seeked', this.onvseeked);\n      media.addEventListener('ended', this.onvended);\n      if (this.demuxer) {\n        this.demuxer.destroy();\n        this.demuxer = new _demuxer2.default(this.hls);\n        this.fragParsing = null;\n      }\n      if (this.levels && this.config.autoStartLoad) {\n        this.hls.startLoad();\n      }\n    }\n  }, {\n    key: 'onMediaDetaching',\n    value: function onMediaDetaching() {\n      var media = this.media;\n      if (media && media.ended || this.state === State.ENDED) {\n        _logger.logger.log('MSE detaching and video ended, reset startPosition');\n        this.startPosition = this.lastCurrentTime = 0;\n      }\n\n      // reset fragment loading counter on MSE detaching to avoid reporting FRAG_LOOP_LOADING_ERROR after error recovery\n      var levels = this.levels;\n      if (levels) {\n        // reset fragment load counter\n        levels.forEach(function (level) {\n          if (level.details) {\n            level.details.fragments.forEach(function (fragment) {\n              fragment.loadCounter = undefined;\n            });\n          }\n        });\n      }\n      // remove video listeners\n      if (media) {\n        media.removeEventListener('seeking', this.onvseeking);\n        media.removeEventListener('seeked', this.onvseeked);\n        media.removeEventListener('ended', this.onvended);\n        this.onvseeking = this.onvseeked = this.onvended = null;\n      }\n      this.media = null;\n      this.loadedmetadata = false;\n      this.stopLoad();\n      this.fragParsing = null;\n    }\n  }, {\n    key: 'onMediaSeeking',\n    value: function onMediaSeeking() {\n      var currentTime = this.media.currentTime;\n      _logger.logger.log('media seeking to ' + currentTime);\n      var fragCurrent = this.fragCurrent;\n      if (this.state === State.FRAG_LOADING) {\n        // check if currently loaded fragment is inside buffer.\n        //if outside, cancel fragment loading, otherwise do nothing\n        if (_bufferHelper2.default.bufferInfo(this.media, currentTime, 0).len === 0) {\n          _logger.logger.log('seeking outside of buffer while fragment load in progress, cancel fragment load');\n          if (fragCurrent) {\n            if (fragCurrent.loader) {\n              fragCurrent.loader.abort();\n            }\n            this.fragCurrent = null;\n          }\n          this.fragPrevious = null;\n          // switch to IDLE state to load new fragment\n          this.state = State.IDLE;\n        }\n      } else if (this.state === State.ENDED) {\n        // switch to IDLE state to check for potential new fragment\n        this.state = State.IDLE;\n      } else if (this.state === State.PARSING && fragCurrent && !fragCurrent.loaded) {\n        _logger.logger.log('mediaController: no final chunk, switch back to IDLE state');\n        this.state = State.IDLE;\n      }\n      if (this.media) {\n        this.lastCurrentTime = currentTime;\n      }\n      // avoid reporting fragment loop loading error in case user is seeking several times on same position\n      if (this.fragLoadIdx !== undefined) {\n        this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;\n      }\n      // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target\n      if (!this.loadedmetadata) {\n        this.nextLoadPosition = this.startPosition = currentTime;\n        if (this.fragCurrent && (this.fragCurrent.start > currentTime || this.fragCurrent.start + this.fragCurrent.duration < currentTime)) {\n          this.seekDuringFirst = true;\n        }\n      }\n      // tick to speed up processing\n      this.tick();\n    }\n  }, {\n    key: 'onMediaSeeked',\n    value: function onMediaSeeked() {\n      _logger.logger.log('media seeked to ' + this.media.currentTime);\n      // tick to speed up FRAGMENT_PLAYING triggering\n      this.tick();\n    }\n  }, {\n    key: 'onMediaEnded',\n    value: function onMediaEnded() {\n      _logger.logger.log('media ended');\n      // reset startPosition and lastCurrentTime to restart playback @ stream beginning\n      this.startPosition = this.lastCurrentTime = 0;\n    }\n  }, {\n    key: 'onManifestLoading',\n    value: function onManifestLoading() {\n      // reset buffer on manifest loading\n      _logger.logger.log('trigger BUFFER_RESET');\n      this.hls.trigger(_events2.default.BUFFER_RESET);\n      this.bufferRange = [];\n      this.stalled = false;\n      this.startPosition = this.lastCurrentTime = 0;\n      this.fragParsing = null;\n      delete this.fragPreviousSaved;\n    }\n  }, {\n    key: 'onManifestParsed',\n    value: function onManifestParsed(data) {\n      var aac = false,\n          heaac = false,\n          codec;\n      data.levels.forEach(function (level) {\n        // detect if we have different kind of audio codecs used amongst playlists\n        codec = level.audioCodec;\n        if (codec) {\n          if (codec.indexOf('mp4a.40.2') !== -1) {\n            aac = true;\n          }\n          if (codec.indexOf('mp4a.40.5') !== -1) {\n            heaac = true;\n          }\n        }\n      });\n      this.audioCodecSwitch = aac && heaac;\n      if (this.audioCodecSwitch) {\n        _logger.logger.log('both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');\n      }\n      this.levels = data.levels;\n      this.startLevelLoaded = false;\n      this.startFragRequested = false;\n      if (this.demuxer) {\n        this.demuxer.destroy();\n        this.demuxer = new _demuxer2.default(this.hls);\n        this.fragParsing = null;\n      }\n      if (this.config.autoStartLoad) {\n        this.hls.startLoad();\n      }\n    }\n  }, {\n    key: 'onLevelLoaded',\n    value: function onLevelLoaded(data) {\n      var newDetails = data.details,\n          newLevelId = data.level,\n          curLevel = this.levels[newLevelId],\n          duration = newDetails.totalduration,\n          sliding = 0,\n          lastDetails = this.levelLastLoaded !== undefined && this.levels[this.levelLastLoaded] && this.levels[this.levelLastLoaded].details;\n\n      _logger.logger.log('level ' + newLevelId + ' loaded [' + newDetails.startSN + ',' + newDetails.endSN + '],duration:' + duration);\n\n      if (newDetails.live) {\n        var curDetails = curLevel.details;\n\n        if (lastDetails && _levelHelper2.default.canMerge(lastDetails, newDetails)) {\n          curDetails = lastDetails;\n        } else if (curDetails && !_levelHelper2.default.canMerge(curDetails, newDetails)) {\n          curDetails = undefined;\n          this.hls.clearLevelDetails();\n        }\n\n        if (curDetails) {\n          // we already have details for that level, merge them\n          _levelHelper2.default.mergeDetails(curDetails, newDetails);\n          sliding = newDetails.fragments[0].start;\n          if (newDetails.PTSKnown) {\n            _logger.logger.log('live playlist sliding:' + sliding.toFixed(3));\n          } else {\n            _logger.logger.log('live playlist - outdated PTS, unknown sliding');\n          }\n        } else {\n          newDetails.PTSKnown = false;\n          _logger.logger.log('live playlist - first load, unknown sliding');\n        }\n      } else {\n        newDetails.PTSKnown = false;\n        if (lastDetails) {\n          _levelHelper2.default.mergeDetails(lastDetails, newDetails);\n        }\n      }\n      // override level info\n      this.levelLastLoaded = newLevelId;\n      curLevel.details = newDetails;\n      this.hls.trigger(_events2.default.LEVEL_UPDATED, { details: newDetails, level: newLevelId });\n\n      // compute start position\n      if (this.startFragRequested === false) {\n        // if live playlist, set start position to be fragment N-this.config.liveSyncDurationCount (usually 3)\n        if (newDetails.live) {\n          this.startPosition = this.computeLivePosition(sliding, newDetails);\n          _logger.logger.log('configure startPosition to ' + this.startPosition);\n        }\n        this.nextLoadPosition = this.startPosition;\n      }\n      // only switch batck to IDLE state if we were waiting for level to start downloading a new fragment\n      if (this.state === State.WAITING_LEVEL) {\n        this.waitLiveLevel = false;\n        this.state = State.IDLE;\n      }\n      //trigger handler right now\n      this.tick();\n    }\n  }, {\n    key: 'onKeyLoaded',\n    value: function onKeyLoaded() {\n      if (this.state === State.KEY_LOADING) {\n        this.state = State.IDLE;\n        this.tick();\n      }\n    }\n  }, {\n    key: 'onFragChunkLoaded',\n    value: function onFragChunkLoaded(data) {\n      var fragCurrent = this.fragCurrent;\n      if ((this.state === State.FRAG_LOADING || this.state === State.PARSING) && fragCurrent && data.frag.level === fragCurrent.level && data.frag.sn === fragCurrent.sn) {\n        _logger.logger.log('Loaded chunk ' + data.payload.byteLength + ' of frag ' + fragCurrent.sn + ' of level ' + fragCurrent.level);\n        this.state = State.PARSING;\n        // transmux the MPEG-TS data to ISO-BMFF segments\n        this.stats = data.stats;\n        var level = fragCurrent.level,\n            fragLevel = this.levels[level],\n            details = fragLevel.details,\n            duration = details.totalduration,\n            start = this.fragTimeOffset,\n            sn = fragCurrent.sn,\n            audioCodec = this.config.defaultAudioCodec || fragLevel.audioCodec;\n        if (this.audioCodecSwap) {\n          _logger.logger.log('swapping playlist audio codec');\n          if (audioCodec === undefined) {\n            audioCodec = this.lastAudioCodec;\n          }\n          if (audioCodec) {\n            if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n              audioCodec = 'mp4a.40.2';\n            } else {\n              audioCodec = 'mp4a.40.5';\n            }\n          }\n        }\n        _logger.logger.log('Demuxing ' + sn + ' of [' + details.startSN + ' ,' + details.endSN + '],level ' + level + ', cc ' + fragCurrent.cc);\n        var demuxer = this.demuxer;\n        if (demuxer) {\n          // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live) and if media is not seeking (this is to overcome potential timestamp drifts between playlists and fragments)\n          var media = this.media;\n          var mediaSeeking = media && media.seeking;\n          var accurateTimeOffset = !mediaSeeking && (details.PTSKnown || !details.live);\n          demuxer.push(data.payload, audioCodec, fragLevel.videoCodec, start, fragCurrent.cc, level, sn, duration, fragCurrent.decryptdata, accurateTimeOffset, details.endSN);\n        }\n        if (data.payload.final) {\n          fragCurrent.loaded = true;\n        }\n      }\n    }\n  }, {\n    key: 'onFragLoaded',\n    value: function onFragLoaded() {\n      _logger.logger.log('Loaded ' + this.fragCurrent.sn + ' of level ' + this.fragCurrent.level);\n      this.fragLoadError = 0;\n    }\n  }, {\n    key: 'onFragParsingInitSegment',\n    value: function onFragParsingInitSegment(data) {\n      if (this.state === State.PARSING) {\n        var tracks = data.tracks,\n            trackName,\n            track;\n\n        // include levelCodec in audio and video tracks\n        track = tracks.audio;\n        if (track) {\n          var audioCodec = this.levels[this.level].audioCodec,\n              ua = navigator.userAgent.toLowerCase();\n          if (audioCodec && this.audioCodecSwap) {\n            _logger.logger.log('swapping playlist audio codec');\n            if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n              audioCodec = 'mp4a.40.2';\n            } else {\n              audioCodec = 'mp4a.40.5';\n            }\n          }\n          // in case AAC and HE-AAC audio codecs are signalled in manifest\n          // force HE-AAC , as it seems that most browsers prefers that way,\n          // except for mono streams OR on FF\n          // these conditions might need to be reviewed ...\n          if (this.audioCodecSwitch) {\n            // don't force HE-AAC if mono stream\n            if (track.metadata.channelCount !== 1 &&\n            // don't force HE-AAC if firefox\n            ua.indexOf('firefox') === -1) {\n              audioCodec = 'mp4a.40.5';\n            }\n          }\n          // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise\n          if (ua.indexOf('android') !== -1 && track.container !== 'audio/mpeg') {\n            audioCodec = 'mp4a.40.2';\n            _logger.logger.log('Android: force audio codec to ' + audioCodec);\n          }\n          track.levelCodec = audioCodec;\n        }\n        track = tracks.video;\n        if (track) {\n          track.levelCodec = this.levels[this.level].videoCodec;\n        }\n\n        // if remuxer specify that a unique track needs to generated,\n        // let's merge all tracks together\n        if (data.unique) {\n          var mergedTrack = {\n            codec: '',\n            levelCodec: ''\n          };\n          for (trackName in data.tracks) {\n            track = tracks[trackName];\n            mergedTrack.container = track.container;\n            if (mergedTrack.codec) {\n              mergedTrack.codec += ',';\n              mergedTrack.levelCodec += ',';\n            }\n            if (track.codec) {\n              mergedTrack.codec += track.codec;\n            }\n            if (track.levelCodec) {\n              mergedTrack.levelCodec += track.levelCodec;\n            }\n          }\n          tracks = { audiovideo: mergedTrack };\n        }\n        this.hls.trigger(_events2.default.BUFFER_CODECS, tracks);\n        if (this.state !== State.STOPPED) {\n          // loop through tracks that are going to be provided to bufferController\n          for (trackName in tracks) {\n            track = tracks[trackName];\n            var initSegment = track.initSegment;\n            _logger.logger.log('track:' + trackName + ',container:' + track.container + ',codecs[level/parsed]=[' + track.levelCodec + '/' + track.codec + ']' + (initSegment ? ',init:' + initSegment.length : ''));\n            if (initSegment) {\n              this.hls.trigger(_events2.default.BUFFER_APPENDING, { type: trackName, data: initSegment });\n            }\n          }\n        }\n        //trigger handler right now\n        this.tick();\n      }\n    }\n  }, {\n    key: 'onFragParsingData',\n    value: function onFragParsingData(data) {\n      if (this.state === State.PARSING || this.fragParsing) {\n        this.tparse2 = Date.now();\n        var frag = this.fragCurrent || this.fragParsing;\n        _logger.logger.log('parsed ' + data.type + ',PTS:[' + data.startPTS.toFixed(3) + ',' + data.endPTS.toFixed(3) + '],DTS:[' + data.startDTS.toFixed(3) + '/' + data.endDTS.toFixed(3) + '],nb:' + data.nb + ',dropped:' + (data.dropped || 0) + ',deltaPTS:' + (data.deltaPTS || 0));\n        var hls = this.hls;\n\n        // has remuxer dropped video frames located before first keyframe ?\n        if (data.type === 'video') {\n          frag.dropped = data.dropped;\n          if (data.deltaPTS) {\n            if (isNaN(frag.deltaPTS)) {\n              frag.deltaPTS = data.deltaPTS;\n            } else {\n              frag.deltaPTS = Math.max(data.deltaPTS, frag.deltaPTS);\n            }\n          }\n        }\n\n        [data.data1, data.data2].forEach(function (buffer) {\n          if (buffer) {\n            hls.trigger(_events2.default.BUFFER_APPENDING, { type: data.type, data: buffer });\n          }\n        });\n        //trigger handler right now\n        this.tick();\n      } else {\n        _logger.logger.warn('not in PARSING state but ' + this.state + ', ignoring FRAG_PARSING_DATA event');\n      }\n    }\n  }, {\n    key: 'onFragParsed',\n    value: function onFragParsed(data) {\n      if (this.state === State.PARSING) {\n        var frag = this.fragCurrent,\n            level = this.levels[frag.level];\n        this.stats.tparsed = performance.now();\n        this.state = State.PARSED;\n        _logger.logger.log('parsed frag sn:' + frag.sn + ',PTS:[' + (data.startPTS ? data.startPTS.toFixed(3) : 'none') + ',' + (data.endPTS ? data.endPTS.toFixed(3) : 'none') + '],PTSDTSshift:' + (data.PTSDTSshift ? data.PTSDTSshift.toFixed(3) : 'none') + ',lastGopPTS:' + (data.lastGopPTS ? data.lastGopPTS.toFixed(3) : 'none'));\n        if (data.startPTS !== undefined && data.endPTS !== undefined) {\n          var drift = _levelHelper2.default.updateFragPTS(level.details, frag.sn, data.startPTS, data.endPTS, data.PTSDTSshift, data.lastGopPTS);\n          this.hls.trigger(_events2.default.LEVEL_PTS_UPDATED, { details: level.details, level: frag.level, drift: drift });\n        } else {\n          // forse reload of prev fragment if video samples not found\n          frag.dropped = 1;\n          frag.deltaPTS = this.config.maxSeekHole + 1;\n        }\n        this.hls.trigger(_events2.default.FRAG_APPENDING);\n      }\n    }\n  }, {\n    key: 'onFragAppended',\n    value: function onFragAppended() {\n      var _this2 = this;\n\n      //trigger handler right now\n      if (this.state === State.PARSED) {\n        this._checkBuffer(true);\n        var frag = this.fragCurrent;\n        if (frag) {\n          _logger.logger.log('media buffered : ' + this.timeRangesToString(this.media.buffered));\n          // filter potentially evicted bufferRange. this is to avoid memleak on live streams\n          var bufferRange = this.bufferRange.filter(function (range) {\n            return _bufferHelper2.default.isBuffered(_this2.media, (range.start + range.end) / 2);\n          });\n          // push new range\n          bufferRange.push({ type: frag.type, start: frag.startPTS, end: frag.endPTS, frag: frag });\n          // sort, as we use BinarySearch for lookup in getBufferRange ...\n          this.bufferRange = bufferRange.sort(function (a, b) {\n            return a.start - b.start;\n          });\n          this.fragPrevious = frag;\n          var stats = this.stats;\n          stats.tbuffered = performance.now();\n          this.fragLastKbps = Math.round(8 * stats.length / (stats.tbuffered - stats.tfirst));\n          this.hls.trigger(_events2.default.FRAG_BUFFERED, { stats: stats, frag: frag });\n          this.state = State.IDLE;\n        }\n        this.tick();\n      } else {\n        _logger.logger.warn('not in PARSED state but ' + this.state);\n      }\n    }\n  }, {\n    key: 'onError',\n    value: function onError(data) {\n      switch (data.details) {\n        case _errors.ErrorDetails.FRAG_LOAD_ERROR:\n        case _errors.ErrorDetails.FRAG_LOAD_TIMEOUT:\n          if (!data.fatal) {\n            var loadError = (this.fragLoadError || 0) + 1;\n            if (loadError <= this.config.fragLoadingMaxRetry) {\n              this.fragLoadError = loadError;\n              // reset load counter to avoid frag loop loading error\n              data.frag.loadCounter = 0;\n              // exponential backoff capped to 64s\n              var delay = Math.min(Math.pow(2, loadError - 1) * this.config.fragLoadingRetryDelay, 64000);\n              _logger.logger.warn('mediaController: frag loading failed, retry in ' + delay + ' ms');\n              this.retryDate = performance.now() + delay;\n              // retry loading state\n              this.state = State.FRAG_LOADING_WAITING_RETRY;\n            } else {\n              _logger.logger.error('mediaController: ' + data.details + ' reaches max retry, redispatch as fatal ...');\n              // redispatch same error but with fatal set to true\n              data.fatal = true;\n              this.hls.trigger(_events2.default.ERROR, data);\n              this.state = State.ERROR;\n            }\n          }\n          break;\n        case _errors.ErrorDetails.FRAG_LOOP_LOADING_ERROR:\n        case _errors.ErrorDetails.LEVEL_LOAD_ERROR:\n        case _errors.ErrorDetails.LEVEL_LOAD_TIMEOUT:\n        case _errors.ErrorDetails.KEY_LOAD_ERROR:\n        case _errors.ErrorDetails.KEY_LOAD_TIMEOUT:\n          //  when in ERROR state, don't switch back to IDLE state in case a non-fatal error is received\n          if (this.state !== State.ERROR) {\n            // if fatal error, stop processing, otherwise move to IDLE to retry loading\n            this.state = data.fatal ? State.ERROR : State.IDLE;\n            _logger.logger.warn('mediaController: ' + data.details + ' while loading frag,switch to ' + this.state + ' state ...');\n          }\n          break;\n        case _errors.ErrorDetails.BUFFER_FULL_ERROR:\n          // trigger a smooth level switch to empty buffers\n          // also reduce max buffer length as it might be too high. we do this to avoid loop flushing ...\n          this.config.maxMaxBufferLength /= 2;\n          _logger.logger.warn('reduce max buffer length to ' + this.config.maxMaxBufferLength + 's and trigger a nextLevelSwitch to flush old buffer and fix QuotaExceededError');\n          this.nextLevelSwitch();\n          break;\n        default:\n          break;\n      }\n    }\n  }, {\n    key: '_checkBuffer',\n    value: function _checkBuffer(appended) {\n      var media = this.media;\n      if (media && media.readyState) {\n        var currentTime;\n        currentTime = media.currentTime;\n        // adjust currentTime to start position on loaded metadata\n        if (!this.loadedmetadata && media.buffered.length && appended) {\n          if (this.seekDuringFirst) {\n            this.seekDuringFirst = null;\n            return;\n          }\n          this.loadedmetadata = true;\n          // only adjust currentTime if different from startPosition or if startPosition not buffered\n          // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered\n          var startPosition = this.startPosition,\n              startPositionBuffered = _bufferHelper2.default.isBuffered(media, startPosition);\n          if (currentTime !== this.startPosition || !startPositionBuffered) {\n            _logger.logger.log('target start position:' + startPosition);\n            // if startPosition not buffered, let's seek to buffered.start(0)\n            if (!startPositionBuffered) {\n              // XXX pavelki: fix case when we asked to seek during the first\n              // segment loading\n              for (var i = 0; i < media.buffered.length; i++) {\n                if (media.buffered.start(i) > startPosition) {\n                  startPosition = media.buffered.start(i);\n                  break;\n                }\n              }\n              if (_browser2.default.isSafari()) {\n                startPosition += 0.001;\n              }\n              _logger.logger.log('target start position not buffered, seek to buffered.start(' + i + ') ' + startPosition);\n            }\n            _logger.logger.log('adjust currentTime from ' + currentTime + ' to ' + startPosition);\n            media.currentTime = startPosition;\n          }\n        } else {\n          var hls = this.hls;\n          var bufferInfo = _bufferHelper2.default.bufferInfo(media, currentTime, 0),\n              expectedPlaying = !(media.paused || // not playing when media is paused\n          media.ended || // not playing when media is ended\n          media.buffered.length === 0),\n              // not playing if nothing buffered\n          jumpThreshold = 0.5,\n              // tolerance needed as some browsers stalls playback before reaching buffered range end\n          playheadMoving = currentTime !== this.lastCurrentTime,\n              config = this.config;\n\n          if (playheadMoving) {\n            // played moving, but was previously stalled => now not stuck anymore\n            if (this.stallReported) {\n              var dur = Math.round(performance.now() - this.stalled);\n              _logger.logger.warn('playback not stuck anymore @' + currentTime + ', after ' + dur + 'ms');\n              hls.trigger(_events2.default.BUF_STATISTICS, { bufNotStalled: { ts: currentTime, dur: dur, lowBuf: this.stallLowBuf } });\n              this.stallLowBuf = this.stallReported = false;\n            }\n            this.stalled = undefined;\n            this.nudgeRetry = 0;\n          } else {\n            // playhead not moving\n            if (expectedPlaying) {\n              // playhead not moving BUT media expected to play\n              var tnow = performance.now();\n              if (!this.stalled) {\n                // stall just detected, store current time\n                this.stalled = tnow;\n                this.stallLowBuf = this.stallReported = false;\n              } else {\n                // playback already stalled, check stalling duration\n                // if stalling for more than a given threshold, let's try to recover\n                var stalledDuration = tnow - this.stalled;\n                var bufferLen = bufferInfo.len;\n                var nudgeRetry = this.nudgeRetry || 0;\n                // have we reached stall deadline ?\n                if (bufferLen <= jumpThreshold && stalledDuration > config.lowBufferWatchdogPeriod * 1000) {\n                  // report stalled error once\n                  if (!this.stallReported) {\n                    this.stallReported = true;\n                    this.stallLowBuf = true;\n                    _logger.logger.warn('playback stalling in low buffer @' + currentTime);\n                    hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_STALLED_ERROR, fatal: false, buffer: bufferLen });\n                    hls.trigger(_events2.default.BUF_STATISTICS, { bufStalledLow: { ts: currentTime } });\n                  }\n                  // if buffer len is below threshold, try to jump to start of next buffer range if close\n                  // no buffer available @ currentTime, check if next buffer is close (within a config.maxSeekHole second range)\n                  var nextBufferStart = bufferInfo.nextStart,\n                      delta = nextBufferStart - currentTime;\n                  if (nextBufferStart && delta < config.maxSeekHole && delta > 0) {\n                    this.nudgeRetry = ++nudgeRetry;\n                    var nudgeOffset = nudgeRetry * config.nudgeOffset;\n                    // next buffer is close ! adjust currentTime to nextBufferStart\n                    // this will ensure effective video decoding\n                    _logger.logger.log('adjust currentTime from ' + media.currentTime + ' to next buffered @ ' + nextBufferStart + ' + nudge ' + nudgeOffset);\n                    media.currentTime = nextBufferStart + nudgeOffset;\n                    // reset stalled so to rearm watchdog timer\n                    this.stalled = undefined;\n                    hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_SEEK_OVER_HOLE, fatal: false, hole: nextBufferStart + nudgeOffset - currentTime });\n                    hls.trigger(_events2.default.BUF_STATISTICS, { bufSeekOverHole: { ts: currentTime } });\n                  }\n                } else if (bufferLen > jumpThreshold && stalledDuration > config.highBufferWatchdogPeriod * 1000) {\n                  if (this.stallReported && this.stallLowBuf) {\n                    // reset stalled so to rearm watchdog timer\n                    this.stalled = undefined;\n                  } else {\n                    // report stalled error once\n                    if (!this.stallReported) {\n                      this.stallReported = true;\n                      _logger.logger.warn('playback stalling in high buffer @' + currentTime);\n                      hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_STALLED_ERROR, fatal: false, buffer: bufferLen });\n                      hls.trigger(_events2.default.BUF_STATISTICS, { bufStalledHigh: { ts: currentTime } });\n                    }\n                    // reset stalled so to rearm watchdog timer\n                    this.stalled = undefined;\n                    this.nudgeRetry = ++nudgeRetry;\n                    if (nudgeRetry < config.nudgeMaxRetry) {\n                      var _currentTime = media.currentTime;\n                      var targetTime = _currentTime + nudgeRetry * config.nudgeOffset;\n                      _logger.logger.log('adjust currentTime from ' + _currentTime + ' to ' + targetTime);\n                      // playback stalled in buffered area ... let's nudge currentTime to try to overcome this\n                      media.currentTime = targetTime;\n                      hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_NUDGE_ON_STALL, fatal: false });\n                      hls.trigger(_events2.default.BUF_STATISTICS, { bufNudge: { ts: _currentTime } });\n                    } else {\n                      _logger.logger.error('still stuck in high buffer @' + currentTime + ' after ' + config.nudgeMaxRetry + ', raise fatal error');\n                      hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_STALLED_ERROR, fatal: true });\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: 'onFragLoadEmergencyAborted',\n    value: function onFragLoadEmergencyAborted() {\n      this.state = State.IDLE;\n      this.tick();\n    }\n  }, {\n    key: 'onBufferFlushed',\n    value: function onBufferFlushed() {\n      var _this3 = this;\n\n      // after successful buffer flushing, filter flushed fragments from bufferRange\n      this.bufferRange = this.bufferRange.filter(function (range) {\n        return _bufferHelper2.default.isBuffered(_this3.media, (range.start + range.end) / 2);\n      });\n\n      // handle end of immediate switching if needed\n      if (this.immediateSwitch) {\n        this.immediateLevelSwitchEnd();\n      }\n      // move to IDLE once flush complete. this should trigger new fragment loading\n      this.state = State.IDLE;\n      // reset reference to frag\n      this.fragPrevious = null;\n    }\n  }, {\n    key: 'onLevelPtsUpdated',\n    value: function onLevelPtsUpdated(lu) {\n      if (!this.levels || this.levels[lu.level].details.live) {\n        return;\n      }\n      for (var level = 0; level < this.levels.length; level++) {\n        if (level !== lu.level && this.levels[level].details) {\n          _levelHelper2.default.mergeDetails(this.levels[lu.level].details, this.levels[level].details);\n        }\n      }\n    }\n  }, {\n    key: 'swapAudioCodec',\n    value: function swapAudioCodec() {\n      this.audioCodecSwap = !this.audioCodecSwap;\n    }\n  }, {\n    key: 'timeRangesToString',\n    value: function timeRangesToString(r) {\n      if (!r) {\n        return '[]';\n      }\n      var log = '',\n          len = r.length;\n      for (var i = 0; i < len; i++) {\n        log += '[' + r.start(i) + ',' + r.end(i) + ']';\n      }\n      return log;\n    }\n  }, {\n    key: 'computeLivePosition',\n    value: function computeLivePosition(sliding, levelDetails) {\n      var targetLatency = this.config.liveSyncDuration !== undefined ? this.config.liveSyncDuration : this.config.liveSyncDurationCount * levelDetails.targetduration;\n      return sliding + Math.max(0, levelDetails.totalduration - targetLatency);\n    }\n  }, {\n    key: 'state',\n    set: function set(nextState) {\n      if (this.state !== nextState) {\n        var previousState = this.state;\n        this._state = nextState;\n        _logger.logger.log('engine state transition from ' + previousState + ' to ' + nextState);\n        if (nextState === 'IDLE') {\n          var media = this.media || {};\n          _logger.logger.log('media ' + media + ' ct=' + media.currentTime + ' dur=' + media.duration + ' buf=' + this.timeRangesToString(media.buffered) + ' err=' + media.error);\n        }\n        this.hls.trigger(_events2.default.STREAM_STATE_TRANSITION, { previousState: previousState, nextState: nextState });\n      }\n    },\n    get: function get() {\n      return this._state;\n    }\n  }, {\n    key: 'currentLevel',\n    get: function get() {\n      if (this.media) {\n        var range = this.getBufferRange(this.media.currentTime);\n        if (range) {\n          return range.frag.level;\n        }\n      }\n      return -1;\n    }\n  }, {\n    key: 'nextBufferRange',\n    get: function get() {\n      if (this.media) {\n        // first get end range of current fragment\n        return this.followingBufferRange(this.getBufferRange(this.media.currentTime));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: 'nextLevel',\n    get: function get() {\n      var range = this.nextBufferRange;\n      if (range) {\n        return range.frag.level;\n      } else {\n        return -1;\n      }\n    }\n  }]);\n\n  return StreamController;\n}(_eventHandler2.default);\n\nexports.default = StreamController;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _eventHandler = require('../event-handler');\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _cea608Parser = require('../utils/cea-608-parser');\n\nvar _cea608Parser2 = _interopRequireDefault(_cea608Parser);\n\nvar _cues = require('../utils/cues');\n\nvar _cues2 = _interopRequireDefault(_cues);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Timeline Controller\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\nvar TimelineController = function (_EventHandler) {\n  _inherits(TimelineController, _EventHandler);\n\n  function TimelineController(hls) {\n    _classCallCheck(this, TimelineController);\n\n    var _this = _possibleConstructorReturn(this, (TimelineController.__proto__ || Object.getPrototypeOf(TimelineController)).call(this, hls, _events2.default.MEDIA_ATTACHING, _events2.default.MEDIA_DETACHING, _events2.default.FRAG_PARSING_USERDATA, _events2.default.MANIFEST_LOADING, _events2.default.FRAG_LOADED, _events2.default.LEVEL_SWITCH));\n\n    _this.hls = hls;\n    _this.config = hls.config;\n    _this.enabled = true;\n\n    if (_this.config.enableCEA708Captions) {\n      var self = _this;\n\n      var channel1 = {\n        'newCue': function newCue(startTime, endTime, screen) {\n          if (!self.textTrack1) {\n            self.textTrack1 = self.createTextTrack('captions', 'Unknown CC1', 'en');\n            //            self.textTrack1.mode = 'showing';\n          }\n\n          _cues2.default.newCue(self.textTrack1, startTime, endTime, screen);\n        }\n      };\n\n      var channel2 = {\n        'newCue': function newCue(startTime, endTime, screen) {\n          if (!self.textTrack2) {\n            self.textTrack2 = self.createTextTrack('captions', 'Unknown CC2', 'es');\n          }\n\n          _cues2.default.newCue(self.textTrack2, startTime, endTime, screen);\n        }\n      };\n\n      _this.cea608Parser = new _cea608Parser2.default(0, channel1, channel2);\n    }\n    return _this;\n  }\n\n  _createClass(TimelineController, [{\n    key: 'clearCurrentCues',\n    value: function clearCurrentCues(track, pts) {\n      if (!track || !track.cues) {\n        return;\n      }\n      for (var i = track.cues.length - 1; track.cues[i].startTime >= pts && i > -1; i--) {\n        track.removeCue(track.cues[i]);\n      }\n    }\n  }, {\n    key: 'createTextTrack',\n    value: function createTextTrack(kind, label, lang) {\n      if (this.media) {\n        return this.media.addTextTrack(kind, label, lang);\n      }\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      _eventHandler2.default.prototype.destroy.call(this);\n    }\n  }, {\n    key: 'onMediaAttaching',\n    value: function onMediaAttaching(data) {\n      this.media = data.media;\n    }\n  }, {\n    key: 'onMediaDetaching',\n    value: function onMediaDetaching() {}\n  }, {\n    key: 'onManifestLoading',\n    value: function onManifestLoading() {\n      this.lastPts = Number.NEGATIVE_INFINITY;\n    }\n  }, {\n    key: 'onLevelSwitch',\n    value: function onLevelSwitch() {\n      if (this.hls.currentLevel.closedCaptions === 'NONE') {\n        this.enabled = false;\n      } else {\n        this.enabled = true;\n      }\n    }\n  }, {\n    key: 'onFragLoaded',\n    value: function onFragLoaded(data) {\n      var pts = data.frag.start;\n\n      // if this is a frag for a previously loaded timerange, remove all captions\n      // TODO: consider just removing captions for the timerange\n      if (pts < this.lastPts) {\n        this.clearCurrentCues(this.textTrack1, pts);\n        this.clearCurrentCues(this.textTrack2, pts);\n      }\n\n      this.lastPts = pts;\n    }\n  }, {\n    key: 'onFragParsingUserdata',\n    value: function onFragParsingUserdata(data) {\n      // push all of the CEA-708 messages into the interpreter\n      // immediately. It will create the proper timestamps based on our PTS value\n      if (this.enabled) {\n        for (var i = 0; i < data.samples.length; i++) {\n          var ccdatas = this.extractCea608Data(data.samples[i].bytes);\n          this.cea608Parser.addData(data.samples[i].pts, ccdatas);\n        }\n      }\n    }\n  }, {\n    key: 'extractCea608Data',\n    value: function extractCea608Data(byteArray) {\n      var count = byteArray[0] & 31;\n      var position = 2;\n      var tmpByte, ccbyte1, ccbyte2, ccValid, ccType;\n      var actualCCBytes = [];\n\n      for (var j = 0; j < count; j++) {\n        tmpByte = byteArray[position++];\n        ccbyte1 = 0x7F & byteArray[position++];\n        ccbyte2 = 0x7F & byteArray[position++];\n        ccValid = (4 & tmpByte) === 0 ? false : true;\n        ccType = 3 & tmpByte;\n\n        if (ccbyte1 === 0 && ccbyte2 === 0) {\n          continue;\n        }\n\n        if (ccValid) {\n          if (ccType === 0) // || ccType === 1\n            {\n              actualCCBytes.push(ccbyte1);\n              actualCCBytes.push(ccbyte2);\n            }\n        }\n      }\n      return actualCCBytes;\n    }\n  }]);\n\n  return TimelineController;\n}(_eventHandler2.default);\n\nexports.default = TimelineController;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\nvar AES = function () {\n\n  /**\n   * Schedule out an AES key for both encryption and decryption. This\n   * is a low-level class. Use a cipher mode to do bulk encryption.\n   *\n   * @constructor\n   * @param key {Array} The key as an array of 4, 6 or 8 words.\n   */\n  function AES(key) {\n    _classCallCheck(this, AES);\n\n    /**\n     * The expanded S-box and inverse S-box tables. These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns. The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    this._tables = [[[], [], [], [], []], [[], [], [], [], []]];\n\n    this._precompute();\n\n    var i,\n        j,\n        tmp,\n        encKey,\n        decKey,\n        sbox = this._tables[0][4],\n        decTable = this._tables[1],\n        keyLen = key.length,\n        rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size=' + keyLen);\n    }\n\n    encKey = key.slice(0);\n    decKey = [];\n    this._key = [encKey, decKey];\n\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1];\n\n      // apply sbox\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n        // shift rows and add rcon\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n\n    // schedule decryption keys\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n\n  /**\n   * Expand the S-box tables.\n   *\n   * @private\n   */\n\n\n  _createClass(AES, [{\n    key: '_precompute',\n    value: function _precompute() {\n      var encTable = this._tables[0],\n          decTable = this._tables[1],\n          sbox = encTable[4],\n          sboxInv = decTable[4],\n          i,\n          x,\n          xInv,\n          d = [],\n          th = [],\n          x2,\n          x4,\n          x8,\n          s,\n          tEnc,\n          tDec;\n\n      // Compute double and third tables\n      for (i = 0; i < 256; i++) {\n        th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n      }\n\n      for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n        // Compute sbox\n        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n        s = s >> 8 ^ s & 255 ^ 99;\n        sbox[x] = s;\n        sboxInv[s] = x;\n\n        // Compute MixColumns\n        x8 = d[x4 = d[x2 = d[x]]];\n        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n        for (i = 0; i < 4; i++) {\n          encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n          decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n        }\n      }\n\n      // Compactify. Considerable speedup on Firefox.\n      for (i = 0; i < 5; i++) {\n        encTable[i] = encTable[i].slice(0);\n        decTable[i] = decTable[i].slice(0);\n      }\n    }\n\n    /**\n     * Decrypt 16 bytes, specified as four 32-bit words.\n     * @param encrypted0 {number} the first word to decrypt\n     * @param encrypted1 {number} the second word to decrypt\n     * @param encrypted2 {number} the third word to decrypt\n     * @param encrypted3 {number} the fourth word to decrypt\n     * @param out {Int32Array} the array to write the decrypted words\n     * into\n     * @param offset {number} the offset into the output array to start\n     * writing results\n     * @return {Array} The plaintext.\n     */\n\n  }, {\n    key: 'decrypt',\n    value: function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n      var key = this._key[1],\n\n      // state variables a,b,c,d are loaded with pre-whitened data\n      a = encrypted0 ^ key[0],\n          b = encrypted3 ^ key[1],\n          c = encrypted2 ^ key[2],\n          d = encrypted1 ^ key[3],\n          a2,\n          b2,\n          c2,\n          nInnerRounds = key.length / 4 - 2,\n          // key.length === 2 ?\n      i,\n          kIndex = 4,\n          table = this._tables[1],\n\n\n      // load up the tables\n      table0 = table[0],\n          table1 = table[1],\n          table2 = table[2],\n          table3 = table[3],\n          sbox = table[4];\n\n      // Inner rounds. Cribbed from OpenSSL.\n      for (i = 0; i < nInnerRounds; i++) {\n        a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n        b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n        c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n        d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n        kIndex += 4;\n        a = a2;b = b2;c = c2;\n      }\n\n      // Last round.\n      for (i = 0; i < 4; i++) {\n        out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n        a2 = a;a = b;b = c;c = d;d = a2;\n      }\n    }\n  }]);\n\n  return AES;\n}();\n\nexports.default = AES;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nnhis file contains an adaptation of the AES decryption algorithm\nfrom the Standford Javascript Cryptography Library. That work is\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * covered by the following copyright and permissions notice:\nnopyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\nll rights reserved.\nnedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\nnedistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * 2. Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.\nn``AS IS'' AND ANY EXPRESS OR\nnnnnn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\nnn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\nnnhe views and conclusions contained in the software and documentation\nare those of the authors and should not be interpreted as representing\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * official policies, either expressed or implied, of the authors.\nn\nvar _aes = require('./aes');\n\nvar _aes2 = _interopRequireDefault(_aes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar AES128Decrypter = function () {\n  function AES128Decrypter(key, initVector) {\n    _classCallCheck(this, AES128Decrypter);\n\n    this.key = key;\n    this.iv = new Uint32Array(initVector);\n  }\n\n  /**\n   * Convert network-order (big-endian) bytes into their little-endian\n   * representation.\n   */\n\n\n  _createClass(AES128Decrypter, [{\n    key: 'ntoh',\n    value: function ntoh(word) {\n      return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n    }\n\n    /**\n     * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n     * @param encrypted {Uint8Array} the encrypted bytes\n     * @param key {Uint32Array} the bytes of the decryption key\n     * @param initVector {Uint32Array} the initialization vector (IV) to\n     * use for the first round of CBC.\n     * @return {Uint8Array} the decrypted bytes\n     *\n     * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n     * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n     * @see https://tools.ietf.org/html/rfc2315\n     */\n\n  }, {\n    key: 'doDecrypt',\n    value: function doDecrypt(encrypted, key, initVector) {\n      var\n      // word-level access to the encrypted bytes\n      encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2),\n          decipher = new _aes2.default(Array.prototype.slice.call(key)),\n\n\n      // byte and word-level access for the decrypted output\n      decrypted = new Uint8Array(encrypted.byteLength),\n          decrypted32 = new Int32Array(decrypted.buffer),\n\n\n      // temporary variables for working with the IV, encrypted, and\n      // decrypted data\n      init0,\n          init1,\n          init2,\n          init3,\n          encrypted0,\n          encrypted1,\n          encrypted2,\n          encrypted3,\n\n\n      // iteration variable\n      wordIx;\n\n      // pull out the words of the IV to ensure we don't modify the\n      // passed-in reference and easier access\n      init0 = ~~initVector[0];\n      init1 = ~~initVector[1];\n      init2 = ~~initVector[2];\n      init3 = ~~initVector[3];\n\n      // decrypt four word sequences, applying cipher-block chaining (CBC)\n      // to each decrypted block\n      for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n        // convert big-endian (network order) words into little-endian\n        // (javascript order)\n        encrypted0 = ~~this.ntoh(encrypted32[wordIx]);\n        encrypted1 = ~~this.ntoh(encrypted32[wordIx + 1]);\n        encrypted2 = ~~this.ntoh(encrypted32[wordIx + 2]);\n        encrypted3 = ~~this.ntoh(encrypted32[wordIx + 3]);\n\n        // decrypt the block\n        decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n        // XOR with the IV, and restore network byte-order to obtain the\n        // plaintext\n        decrypted32[wordIx] = this.ntoh(decrypted32[wordIx] ^ init0);\n        decrypted32[wordIx + 1] = this.ntoh(decrypted32[wordIx + 1] ^ init1);\n        decrypted32[wordIx + 2] = this.ntoh(decrypted32[wordIx + 2] ^ init2);\n        decrypted32[wordIx + 3] = this.ntoh(decrypted32[wordIx + 3] ^ init3);\n\n        // setup the IV for the next round\n        init0 = encrypted0;\n        init1 = encrypted1;\n        init2 = encrypted2;\n        init3 = encrypted3;\n      }\n\n      return decrypted;\n    }\n  }, {\n    key: 'localDecrypt',\n    value: function localDecrypt(encrypted, key, initVector, decrypted) {\n      var bytes = this.doDecrypt(encrypted, key, initVector);\n      decrypted.set(bytes, encrypted.byteOffset);\n    }\n  }, {\n    key: 'decrypt',\n    value: function decrypt(encrypted) {\n      var step = 4 * 8000,\n\n      //encrypted32 = new Int32Array(encrypted.buffer),\n      encrypted32 = new Int32Array(encrypted),\n          decrypted = new Uint8Array(encrypted.byteLength),\n          i = 0;\n\n      // split up the encryption job and do the individual chunks asynchronously\n      var key = this.key;\n      var initVector = this.iv;\n      this.localDecrypt(encrypted32.subarray(i, i + step), key, initVector, decrypted);\n\n      for (i = step; i < encrypted32.length; i += step) {\n        initVector = new Uint32Array([this.ntoh(encrypted32[i - 4]), this.ntoh(encrypted32[i - 3]), this.ntoh(encrypted32[i - 2]), this.ntoh(encrypted32[i - 1])]);\n        this.localDecrypt(encrypted32.subarray(i, i + step), key, initVector, decrypted);\n      }\n\n      return decrypted;\n    }\n  }]);\n\n  return AES128Decrypter;\n}();\n\nexports.default = AES128Decrypter;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\ndecryption.\nn\nvar _aes128Decrypter = require('./aes128-decrypter');\n\nvar _aes128Decrypter2 = _interopRequireDefault(_aes128Decrypter);\n\nvar _errors = require('../errors');\n\nvar _logger = require('../utils/logger');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Decrypter = function () {\n  function Decrypter(hls) {\n    _classCallCheck(this, Decrypter);\n\n    this.hls = hls;\n    this.iv = null;\n    try {\n      var browserCrypto = window ? window.crypto : crypto;\n      this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\n      this.disableWebCrypto = !this.subtle;\n    } catch (e) {\n      this.disableWebCrypto = true;\n    }\n  }\n\n  _createClass(Decrypter, [{\n    key: 'destroy',\n    value: function destroy() {}\n  }, {\n    key: 'decrypt',\n    value: function decrypt(data, key, iv, callback) {\n      if (this.disableWebCrypto && this.hls.config.enableSoftwareAES) {\n        this.decryptBySoftware(data, key, iv, callback);\n      } else {\n        this.decryptByWebCrypto(data, key, iv, callback);\n      }\n    }\n  }, {\n    key: 'decryptByWebCrypto',\n    value: function decryptByWebCrypto(data, key, iv, callback) {\n      var _this = this;\n\n      _logger.logger.log('decrypting by WebCrypto API');\n\n      this.subtle.importKey('raw', key, { name: 'AES-CBC', length: 128 }, false, ['decrypt']).then(function (importedKey) {\n        _this.subtle.decrypt({ name: 'AES-CBC', iv: iv.buffer }, importedKey, data).then(callback).catch(function (err) {\n          _this.onWebCryptoError(err, data, key, iv, callback);\n        });\n      }).catch(function (err) {\n        _this.onWebCryptoError(err, data, key, iv, callback);\n      });\n    }\n  }, {\n    key: 'decryptBySoftware',\n    value: function decryptBySoftware(data, key8, iv8, callback) {\n      _logger.logger.log('decrypting by JavaScript Implementation');\n\n      var view = new DataView(key8.buffer);\n      var key = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n\n      if (iv8) {\n        view = new DataView(iv8.buffer);\n        this.iv = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n      }\n      var decrypter = new _aes128Decrypter2.default(key, this.iv);\n      var ivview = new DataView(data),\n          len = data.byteLength;\n      // save initvector for the next chunk\n      this.iv = new Uint32Array([ivview.getUint32(len - 16), ivview.getUint32(len - 12), ivview.getUint32(len - 8), ivview.getUint32(len - 4)]);\n      callback(decrypter.decrypt(data).buffer);\n    }\n  }, {\n    key: 'onWebCryptoError',\n    value: function onWebCryptoError(err, data, key, iv, callback) {\n      if (this.hls.config.enableSoftwareAES) {\n        _logger.logger.log('disabling to use WebCrypto API');\n        this.disableWebCrypto = true;\n        this.decryptBySoftware(data, key, iv, callback);\n      } else {\n        _logger.logger.error('decrypting error : ' + err.message);\n        this.hls.trigger(Event.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.FRAG_DECRYPT_ERROR, fatal: true, reason: err.message });\n      }\n    }\n  }]);\n\n  return Decrypter;\n}();\n\nexports.default = Decrypter;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\ndemuxer\nn\n\nvar _adts = require('./adts');\n\nvar _adts2 = _interopRequireDefault(_adts);\n\nvar _logger = require('../utils/logger');\n\nvar _id = require('../demux/id3');\n\nvar _id2 = _interopRequireDefault(_id);\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar AACDemuxer = function () {\n  function AACDemuxer(observer, remuxerClass, config, typeSupported) {\n    _classCallCheck(this, AACDemuxer);\n\n    this.observer = observer;\n    this.remuxerClass = remuxerClass;\n    this.config = config;\n    this.remuxer = new this.remuxerClass(observer, config, typeSupported);\n    this._aacTrack = { container: 'audio/adts', type: 'audio', id: -1, sequenceNumber: 0, samples: [], len: 0 };\n  }\n\n  _createClass(AACDemuxer, [{\n    key: 'push',\n\n\n    // feed incoming data to the front of the parsing pipeline\n    value: function push(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurate, first, final) {\n      var track = this._aacTrack,\n          id3 = new _id2.default(data),\n          pts = 90 * id3.timeStamp,\n          config,\n          frameLength,\n          frameDuration,\n          frameIndex,\n          offset,\n          headerLength,\n          stamp,\n          len,\n          aacSample,\n          startPTS,\n          endPTS;\n      // look for ADTS header (0xFFFx)\n      for (offset = id3.length, len = data.length; offset < len - 1; offset++) {\n        if (data[offset] === 0xff && (data[offset + 1] & 0xf0) === 0xf0) {\n          break;\n        }\n      }\n\n      if (first) {\n        this.fragStats = { keyFrames: 0, dropped: 0, segment: sn, level: level, notFirstKeyframe: 0 };\n      }\n\n      if (!track.audiosamplerate) {\n        config = _adts2.default.getAudioConfig(this.observer, data, offset, audioCodec);\n        track.config = config.config;\n        track.audiosamplerate = config.samplerate;\n        track.channelCount = config.channelCount;\n        track.codec = config.codec;\n        track.duration = duration;\n        _logger.logger.log('parsed codec:' + track.codec + ',rate:' + config.samplerate + ',nb channel:' + config.channelCount);\n      }\n      frameIndex = 0;\n      frameDuration = 1024 * 90000 / track.audiosamplerate;\n      while (offset + 5 < len) {\n        // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header\n        headerLength = !!(data[offset + 1] & 0x01) ? 7 : 9;\n        // retrieve frame size\n        frameLength = (data[offset + 3] & 0x03) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 0xE0) >>> 5;\n        frameLength -= headerLength;\n        //stamp = pes.pts;\n\n        if (frameLength > 0 && offset + headerLength + frameLength <= len) {\n          stamp = pts + frameIndex * frameDuration;\n          //logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);\n          aacSample = { unit: data.subarray(offset + headerLength, offset + headerLength + frameLength), pts: stamp, dts: stamp };\n          track.samples.push(aacSample);\n          track.len += frameLength;\n          offset += frameLength + headerLength;\n          frameIndex++;\n          // look for ADTS header (0xFFFx)\n          for (; offset < len - 1; offset++) {\n            if (data[offset] === 0xff && (data[offset + 1] & 0xf0) === 0xf0) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n      if (track.samples.length && final) {\n        var timescale = this.remuxer.PES_TIMESCALE;\n        var initDTS = this.remuxer._initDTS === undefined ? track.samples[0].dts - timescale * timeOffset : this.remuxer._initDTS;\n        var nextAvcDts = timeOffset * timescale;\n        startPTS = this.remuxer._PTSNormalize(track.samples[0].pts - initDTS, nextAvcDts) / timescale;\n        endPTS = this.remuxer._PTSNormalize(track.samples[track.samples.length - 1].pts + frameDuration - initDTS, nextAvcDts) / timescale;\n      }\n      this.remuxer.remux(this._aacTrack, { samples: [] }, { samples: [{ pts: pts, dts: pts, unit: id3.payload }] }, { samples: [] }, timeOffset, undefined, undefined, undefined, undefined, this.fragStats);\n      if (final) {\n        this.observer.trigger(_events2.default.FRAG_PARSED, { startPTS: startPTS, endPTS: endPTS, PTSDTSshift: 0 });\n      }\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {}\n  }], [{\n    key: 'probe',\n    value: function probe(data) {\n      // check if data contains ID3 timestamp and ADTS sync worc\n      var id3 = new _id2.default(data),\n          offset,\n          len;\n      if (id3.hasTimeStamp) {\n        // look for ADTS header (0xFFFx)\n        for (offset = id3.length, len = data.length; offset < len - 1; offset++) {\n          if (data[offset] === 0xff && (data[offset + 1] & 0xf0) === 0xf0) {\n            //logger.log('ADTS sync word found !');\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }]);\n\n  return AACDemuxer;\n}();\n\nexports.default = AACDemuxer;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nparser helper\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\n\nvar _logger = require('../utils/logger');\n\nvar _errors = require('../errors');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ADTS = function () {\n  function ADTS() {\n    _classCallCheck(this, ADTS);\n  }\n\n  _createClass(ADTS, null, [{\n    key: 'getAudioConfig',\n    value: function getAudioConfig(observer, data, offset, audioCodec) {\n      var adtsObjectType,\n          // :int\n      adtsSampleingIndex,\n          // :int\n      adtsExtensionSampleingIndex,\n          // :int\n      adtsChanelConfig,\n          // :int\n      config,\n          userAgent = navigator.userAgent.toLowerCase(),\n          adtsSampleingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n      // byte 2\n      adtsObjectType = ((data[offset + 2] & 0xC0) >>> 6) + 1;\n      adtsSampleingIndex = (data[offset + 2] & 0x3C) >>> 2;\n      if (adtsSampleingIndex > adtsSampleingRates.length - 1) {\n        observer.trigger(Event.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: 'invalid ADTS sampling index:' + adtsSampleingIndex });\n        return;\n      }\n      adtsChanelConfig = (data[offset + 2] & 0x01) << 2;\n      // byte 3\n      adtsChanelConfig |= (data[offset + 3] & 0xC0) >>> 6;\n      _logger.logger.log('manifest codec:' + audioCodec + ',ADTS data:type:' + adtsObjectType + ',sampleingIndex:' + adtsSampleingIndex + '[' + adtsSampleingRates[adtsSampleingIndex] + 'Hz],channelConfig:' + adtsChanelConfig);\n      // firefox: freq less than 24kHz = AAC SBR (HE-AAC)\n      if (userAgent.indexOf('firefox') !== -1) {\n        if (adtsSampleingIndex >= 6) {\n          adtsObjectType = 5;\n          config = new Array(4);\n          // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n          // there is a factor 2 between frame sample rate and output sample rate\n          // multiply frequency by 2 (see table below, equivalent to substract 3)\n          adtsExtensionSampleingIndex = adtsSampleingIndex - 3;\n        } else {\n          adtsObjectType = 2;\n          config = new Array(2);\n          adtsExtensionSampleingIndex = adtsSampleingIndex;\n        }\n        // Android : always use AAC\n      } else if (userAgent.indexOf('android') !== -1) {\n        adtsObjectType = 2;\n        config = new Array(2);\n        adtsExtensionSampleingIndex = adtsSampleingIndex;\n      } else {\n        /*  for other browsers (chrome ...)\n            always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)\n        */\n        adtsObjectType = 5;\n        config = new Array(4);\n        // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)\n        if (audioCodec && (audioCodec.indexOf('mp4a.40.29') !== -1 || audioCodec.indexOf('mp4a.40.5') !== -1) || !audioCodec && adtsSampleingIndex >= 6) {\n          // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n          // there is a factor 2 between frame sample rate and output sample rate\n          // multiply frequency by 2 (see table below, equivalent to substract 3)\n          adtsExtensionSampleingIndex = adtsSampleingIndex - 3;\n        } else {\n          // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)\n          // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.\n          if (audioCodec && audioCodec.indexOf('mp4a.40.2') !== -1 && adtsSampleingIndex >= 6 && adtsChanelConfig === 1 || !audioCodec && adtsChanelConfig === 1) {\n            adtsObjectType = 2;\n            config = new Array(2);\n          }\n          adtsExtensionSampleingIndex = adtsSampleingIndex;\n        }\n      }\n      /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n          ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()\n        Audio Profile / Audio Object Type\n        0: Null\n        1: AAC Main\n        2: AAC LC (Low Complexity)\n        3: AAC SSR (Scalable Sample Rate)\n        4: AAC LTP (Long Term Prediction)\n        5: SBR (Spectral Band Replication)\n        6: AAC Scalable\n       sampling freq\n        0: 96000 Hz\n        1: 88200 Hz\n        2: 64000 Hz\n        3: 48000 Hz\n        4: 44100 Hz\n        5: 32000 Hz\n        6: 24000 Hz\n        7: 22050 Hz\n        8: 16000 Hz\n        9: 12000 Hz\n        10: 11025 Hz\n        11: 8000 Hz\n        12: 7350 Hz\n        13: Reserved\n        14: Reserved\n        15: frequency is written explictly\n        Channel Configurations\n        These are the channel configurations:\n        0: Defined in AOT Specifc Config\n        1: 1 channel: front-center\n        2: 2 channels: front-left, front-right\n      */\n      // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1\n      config[0] = adtsObjectType << 3;\n      // samplingFrequencyIndex\n      config[0] |= (adtsSampleingIndex & 0x0E) >> 1;\n      config[1] |= (adtsSampleingIndex & 0x01) << 7;\n      // channelConfiguration\n      config[1] |= adtsChanelConfig << 3;\n      if (adtsObjectType === 5) {\n        // adtsExtensionSampleingIndex\n        config[1] |= (adtsExtensionSampleingIndex & 0x0E) >> 1;\n        config[2] = (adtsExtensionSampleingIndex & 0x01) << 7;\n        // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???\n        //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc\n        config[2] |= 2 << 2;\n        config[3] = 0;\n      }\n      return { config: config, samplerate: adtsSampleingRates[adtsSampleingIndex], channelCount: adtsChanelConfig, codec: 'mp4a.40.' + adtsObjectType };\n    }\n  }]);\n\n  return ADTS;\n}();\n\nexports.default = ADTS;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*  inline demuxer.\nprobe fragments and instantiate appropriate demuxer depending on content type (TSDemuxer, AACDemuxer, ...)\nn\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _errors = require('../errors');\n\nvar _aacdemuxer = require('../demux/aacdemuxer');\n\nvar _aacdemuxer2 = _interopRequireDefault(_aacdemuxer);\n\nvar _tsdemuxer = require('../demux/tsdemuxer');\n\nvar _tsdemuxer2 = _interopRequireDefault(_tsdemuxer);\n\nvar _mp4Remuxer = require('../remux/mp4-remuxer');\n\nvar _mp4Remuxer2 = _interopRequireDefault(_mp4Remuxer);\n\nvar _passthroughRemuxer = require('../remux/passthrough-remuxer');\n\nvar _passthroughRemuxer2 = _interopRequireDefault(_passthroughRemuxer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DemuxerInline = function () {\n  function DemuxerInline(hls, typeSupported) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, DemuxerInline);\n\n    var _this = this;\n    this.hls = hls;\n    this.config = this.hls.config || config;\n    this.typeSupported = typeSupported;\n    this.timeOffset = 0;\n    this.onFragParsingData = function (ev, data) {\n      if (data.type === 'video' && !data.flush) {\n        // sync on video chunks\n        _this.timeOffset += data.endDTS - data.startDTS;\n      }\n    };\n    this.hls.on(_events2.default.FRAG_PARSING_DATA, this.onFragParsingData);\n  }\n\n  _createClass(DemuxerInline, [{\n    key: 'destroy',\n    value: function destroy() {\n      var demuxer = this.demuxer;\n      if (demuxer) {\n        demuxer.destroy();\n      }\n      this.hls.off(_events2.default.FRAG_PARSING_DATA, this.onFragParsingData);\n    }\n  }, {\n    key: 'push',\n    value: function push(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurate, first, final, lastSN) {\n      var demuxer = this.demuxer;\n      if (!demuxer) {\n        var hls = this.hls;\n        // probe for content type\n        if (_tsdemuxer2.default.probe(data)) {\n          if (this.typeSupported.mp2t === true) {\n            demuxer = new _tsdemuxer2.default(hls, _passthroughRemuxer2.default, this.config, this.typeSupported);\n          } else {\n            demuxer = new _tsdemuxer2.default(hls, _mp4Remuxer2.default, this.config, this.typeSupported);\n          }\n        } else if (_aacdemuxer2.default.probe(data)) {\n          demuxer = new _aacdemuxer2.default(hls, _mp4Remuxer2.default, this.config, this.typeSupported);\n        } else {\n          var i = void 0,\n              len = data.length,\n              info = 'len:' + len + ' [';\n          for (i = 0, len = Math.min(len, 10); i < len; i++) {\n            if (i) {\n              info += ',';\n            }\n            info += data[i];\n          }\n          info += '..]';\n          if (data.length >= 3 * 188) {\n            info += ' [0]==' + data[0] + ' [188]==' + data[188] + ' [2*188]==' + data[2 * 188];\n          }\n\n          hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.FRAG_PARSING_ERROR, fatal: true,\n            reason: 'no demux matching with content found ' + info });\n          return;\n        }\n        this.demuxer = demuxer;\n      }\n      if (first) {\n        this.timeOffset = timeOffset;\n      }\n      demuxer.push(data, audioCodec, videoCodec, this.timeOffset, cc, level, sn, duration, accurate, first, final, lastSN);\n    }\n  }]);\n\n  return DemuxerInline;\n}();\n\nexports.default = DemuxerInline;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _demuxerInline = require('../demux/demuxer-inline');\n\nvar _demuxerInline2 = _interopRequireDefault(_demuxerInline);\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _events3 = require('events');\n\nvar _events4 = _interopRequireDefault(_events3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DemuxerWorker = function DemuxerWorker(self) {\n  // observer setup\n  var observer = new _events4.default();\n  observer.trigger = function trigger(event) {\n    for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    observer.emit.apply(observer, [event, event].concat(data));\n  };\n\n  observer.off = function off(event) {\n    for (var _len2 = arguments.length, data = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      data[_key2 - 1] = arguments[_key2];\n    }\n\n    observer.removeListener.apply(observer, [event].concat(data));\n  };\n  self.addEventListener('message', function (ev) {\n    var data = ev.data;\n    //console.log('demuxer cmd:' + data.cmd);\n    switch (data.cmd) {\n      case 'init':\n        self.demuxer = new _demuxerInline2.default(observer, data.typeSupported, JSON.parse(data.config));\n        break;\n      case 'demux':\n        self.demuxer.push(new Uint8Array(data.data), data.audioCodec, data.videoCodec, data.timeOffset, data.cc, data.level, data.sn, data.duration, data.accurate, data.first, data.final, data.lastSN);\n        break;\n      case 'empty':\n        self.postMessage({ event: _events2.default.DEMUXER_QUEUE_EMPTY });\n        break;\n      default:\n        break;\n    }\n  });\n\n  // listen to events triggered by Demuxer\n  observer.on(_events2.default.FRAG_PARSING_INIT_SEGMENT, function (ev, data) {\n    self.postMessage({ event: ev, tracks: data.tracks, unique: data.unique });\n  });\n\n  observer.on(_events2.default.FRAG_PARSING_DATA, function (ev, data) {\n    var objData = { event: ev, type: data.type, startPTS: data.startPTS, endPTS: data.endPTS, startDTS: data.startDTS, endDTS: data.endDTS, data1: data.data1.buffer, data2: data.data2.buffer, nb: data.nb, dropped: data.dropped, deltaPTS: data.deltaPTS };\n    // pass data1/data2 as transferable object (no copy)\n    self.postMessage(objData, [objData.data1, objData.data2]);\n  });\n\n  observer.on(_events2.default.FRAG_PARSED, function (event, data) {\n    self.postMessage({ event: event, data: data });\n  });\n\n  observer.on(_events2.default.FRAG_STATISTICS, function (event, data) {\n    self.postMessage({ event: event, data: data });\n  });\n\n  observer.on(_events2.default.ERROR, function (event, data) {\n    self.postMessage({ event: event, data: data });\n  });\n\n  observer.on(_events2.default.FRAG_PARSING_METADATA, function (event, data) {\n    var objData = { event: event, samples: data.samples };\n    self.postMessage(objData);\n  });\n\n  observer.on(_events2.default.FRAG_PARSING_USERDATA, function (event, data) {\n    var objData = { event: event, samples: data.samples };\n    self.postMessage(objData);\n  });\n}; /* demuxer web worker.\n    *  - listen to worker message, and trigger DemuxerInline upon reception of Fragments.\n    *  - provides MP4 Boxes back to main thread using [transferable objects](https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast) in order to minimize message passing overhead.\n    */\n\nexports.default = DemuxerWorker;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _demuxerInline = require('../demux/demuxer-inline');\n\nvar _demuxerInline2 = _interopRequireDefault(_demuxerInline);\n\nvar _demuxerWorker = require('../demux/demuxer-worker');\n\nvar _demuxerWorker2 = _interopRequireDefault(_demuxerWorker);\n\nvar _logger = require('../utils/logger');\n\nvar _decrypter = require('../crypt/decrypter');\n\nvar _decrypter2 = _interopRequireDefault(_decrypter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Demuxer = function () {\n  function Demuxer(hls) {\n    _classCallCheck(this, Demuxer);\n\n    this.hls = hls;\n    this.trail = new Uint8Array(0);\n    var typeSupported = {\n      mp4: MediaSource.isTypeSupported('video/mp4'),\n      mp2t: hls.config.enableMP2TPassThrough && MediaSource.isTypeSupported('video/mp2t'),\n      mpeg: MediaSource.isTypeSupported('audio/mpeg'),\n      mp3: MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"')\n    };\n    if (hls.config.disableMp3) {\n      typeSupported.mpeg = typeSupported.mp3 = false;\n    }\n    if (hls.config.enableWorker && typeof Worker !== 'undefined') {\n      _logger.logger.log('demuxing in webworker');\n      try {\n        var work = require('webworkify');\n        this.w = work(_demuxerWorker2.default);\n        this.onwmsg = this.onWorkerMessage.bind(this);\n        this.w.addEventListener('message', this.onwmsg);\n        this.w.postMessage({ cmd: 'init', typeSupported: typeSupported, config: JSON.stringify(hls.config) });\n      } catch (err) {\n        _logger.logger.error('error while initializing DemuxerWorker, fallback on DemuxerInline');\n        this.demuxer = new _demuxerInline2.default(hls, typeSupported);\n      }\n    } else {\n      this.demuxer = new _demuxerInline2.default(hls, typeSupported);\n    }\n    this.demuxInitialized = true;\n  }\n\n  _createClass(Demuxer, [{\n    key: 'destroy',\n    value: function destroy() {\n      if (this.w) {\n        this.w.removeEventListener('message', this.onwmsg);\n        this.w.terminate();\n        this.w = null;\n      } else {\n        this.demuxer.destroy();\n        this.demuxer = null;\n      }\n      if (this.decrypter) {\n        this.decrypter.destroy();\n        this.decrypter = null;\n      }\n    }\n  }, {\n    key: 'pushDecrypted',\n    value: function pushDecrypted(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurate, first, final, lastSN) {\n      if (this.w) {\n        // post fragment payload as transferable objects (no copy)\n        this.w.postMessage({ cmd: 'demux', data: data, audioCodec: audioCodec, videoCodec: videoCodec, timeOffset: timeOffset, cc: cc, level: level, sn: sn, duration: duration, accurate: accurate, first: first, final: final, lastSN: lastSN }, [data]);\n      } else {\n        this.demuxer.push(new Uint8Array(data), audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurate, first, final, lastSN);\n      }\n    }\n  }, {\n    key: 'push',\n    value: function push(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, decryptdata, accurate, lastSN) {\n      if (data.first) {\n        this.trail = new Uint8Array(0);\n        this.trail.first = true;\n      }\n      var traillen = this.trail.length;\n      // 752 = 4*188. We need number of bytes to be multiplier of 16 to\n      // perform chained AES decryption\n      if (traillen || (data.byteLength + traillen) % 752) {\n        var final = data.final,\n            first = data.first || this.trail.first || false;\n        // add trailing bytes\n        var newlen = data.byteLength + traillen;\n        if (!final) {\n          // at final chunk we sent all pending data\n          newlen -= newlen % 752;\n        }\n        var olddata = new Uint8Array(data);\n        var newdata = new Uint8Array(newlen);\n        var newtrail = new Uint8Array(data.byteLength + traillen - newlen);\n        if (newlen) {\n          newdata.set(this.trail);\n          newdata.set(olddata.subarray(0, newlen - traillen), traillen);\n        }\n        if (newtrail.length) {\n          if (newlen) {\n            newtrail.set(olddata.subarray(-newtrail.length));\n          } else {\n            newtrail.set(this.trail);\n            newtrail.set(olddata, traillen);\n            newtrail.first = first;\n          }\n        }\n        olddata = null;\n        this.trail = newtrail;\n        if (!newdata.length) {\n          return;\n        }\n        data = newdata.buffer;\n        data.final = final;\n        data.first = first;\n        newdata = null;\n      }\n      if (data.byteLength > 0 && decryptdata != null && decryptdata.key != null && decryptdata.method === 'AES-128') {\n        if (this.decrypter == null) {\n          this.decrypter = new _decrypter2.default(this.hls);\n        }\n\n        var localthis = this;\n        this.decrypter.decrypt(data, decryptdata.key, data.first && decryptdata.iv, function (decryptedData) {\n          localthis.pushDecrypted(decryptedData, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurate, !!data.first, !!data.final, lastSN);\n        });\n      } else {\n        this.pushDecrypted(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurate, !!data.first, !!data.final, lastSN);\n      }\n    }\n  }, {\n    key: 'onWorkerMessage',\n    value: function onWorkerMessage(ev) {\n      var data = ev.data;\n      switch (data.event) {\n        case _events2.default.FRAG_PARSING_INIT_SEGMENT:\n          var obj = {};\n          obj.tracks = data.tracks;\n          obj.unique = data.unique;\n          this.hls.trigger(_events2.default.FRAG_PARSING_INIT_SEGMENT, obj);\n          break;\n        case _events2.default.FRAG_PARSING_DATA:\n          this.hls.trigger(_events2.default.FRAG_PARSING_DATA, {\n            data1: new Uint8Array(data.data1),\n            data2: new Uint8Array(data.data2),\n            startPTS: data.startPTS,\n            endPTS: data.endPTS,\n            startDTS: data.startDTS,\n            endDTS: data.endDTS,\n            type: data.type,\n            nb: data.nb,\n            dropped: data.dropped,\n            deltaPTS: data.deltaPTS\n          });\n          break;\n        case _events2.default.FRAG_PARSING_METADATA:\n          this.hls.trigger(_events2.default.FRAG_PARSING_METADATA, {\n            samples: data.samples\n          });\n          break;\n        case _events2.default.FRAG_PARSING_USERDATA:\n          this.hls.trigger(_events2.default.FRAG_PARSING_USERDATA, {\n            samples: data.samples\n          });\n          break;\n        default:\n          this.hls.trigger(data.event, data.data);\n          break;\n      }\n    }\n  }, {\n    key: 'waitQueue',\n    value: function waitQueue() {\n      if (this.w) {\n        this.w.postMessage({ cmd: 'empty' });\n      }\n    }\n  }]);\n\n  return Demuxer;\n}();\n\nexports.default = Demuxer;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\narser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\nn\nvar _logger = require('../utils/logger');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ExpGolomb = function () {\n  function ExpGolomb(data) {\n    _classCallCheck(this, ExpGolomb);\n\n    this.data = data;\n    // the number of bytes left to examine in this.data\n    this.bytesAvailable = this.data.byteLength;\n    // the current word being examined\n    this.word = 0; // :uint\n    // the number of bits left to examine in the current word\n    this.bitsAvailable = 0; // :uint\n  }\n\n  _createClass(ExpGolomb, [{\n    key: 'wholeBytesAvailable',\n    value: function wholeBytesAvailable() {\n      return this.bytesAvailable + (this.bitsAvailable >> 3);\n    }\n\n    // ():void\n\n  }, {\n    key: 'loadWord',\n    value: function loadWord() {\n      var position = this.data.byteLength - this.bytesAvailable,\n          workingBytes = new Uint8Array(4),\n          availableBytes = Math.min(4, this.bytesAvailable);\n      if (availableBytes === 0) {\n        throw new Error('no bytes available');\n      }\n      workingBytes.set(this.data.subarray(position, position + availableBytes));\n      this.word = new DataView(workingBytes.buffer).getUint32(0);\n      // track the amount of this.data that has been processed\n      this.bitsAvailable = availableBytes * 8;\n      this.bytesAvailable -= availableBytes;\n    }\n\n    // (count:int):void\n\n  }, {\n    key: 'skipBits',\n    value: function skipBits(count) {\n      var skipBytes; // :int\n      if (this.bitsAvailable > count) {\n        this.word <<= count;\n        this.bitsAvailable -= count;\n      } else {\n        count -= this.bitsAvailable;\n        skipBytes = count >> 3;\n        count -= skipBytes >> 3;\n        this.bytesAvailable -= skipBytes;\n        this.loadWord();\n        this.word <<= count;\n        this.bitsAvailable -= count;\n      }\n    }\n\n    // (size:int):uint\n\n  }, {\n    key: 'readBits',\n    value: function readBits(size) {\n      var bits = Math.min(this.bitsAvailable, size),\n          // :uint\n      valu = this.word >>> 32 - bits; // :uint\n      if (size > 32) {\n        _logger.logger.error('Cannot read more than 32 bits at a time');\n      }\n      this.bitsAvailable -= bits;\n      if (this.bitsAvailable > 0) {\n        this.word <<= bits;\n      } else if (this.bytesAvailable > 0) {\n        this.loadWord();\n      }\n      bits = size - bits;\n      return bits > 0 && this.bitsAvailable ? valu << bits | this.readBits(bits) : valu;\n    }\n\n    // ():uint\n\n  }, {\n    key: 'skipLZ',\n    value: function skipLZ() {\n      var leadingZeroCount; // :uint\n      for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {\n        if (0 !== (this.word & 0x80000000 >>> leadingZeroCount)) {\n          // the first bit of working word is 1\n          this.word <<= leadingZeroCount;\n          this.bitsAvailable -= leadingZeroCount;\n          return leadingZeroCount;\n        }\n      }\n      // we exhausted word and still have not found a 1\n      this.loadWord();\n      return leadingZeroCount + this.skipLZ();\n    }\n\n    // ():void\n\n  }, {\n    key: 'skipUEG',\n    value: function skipUEG() {\n      this.skipBits(1 + this.skipLZ());\n    }\n\n    // ():void\n\n  }, {\n    key: 'skipEG',\n    value: function skipEG() {\n      this.skipBits(1 + this.skipLZ());\n    }\n\n    // ():uint\n\n  }, {\n    key: 'readUEG',\n    value: function readUEG() {\n      var clz = this.skipLZ(); // :uint\n      return this.readBits(clz + 1) - 1;\n    }\n\n    // ():int\n\n  }, {\n    key: 'readEG',\n    value: function readEG() {\n      var valu = this.readUEG(); // :int\n      if (0x01 & valu) {\n        // the number is odd if the low order bit is set\n        return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n      } else {\n        return -1 * (valu >>> 1); // divide by two then make it negative\n      }\n    }\n\n    // Some convenience functions\n    // :Boolean\n\n  }, {\n    key: 'readBoolean',\n    value: function readBoolean() {\n      return 1 === this.readBits(1);\n    }\n\n    // ():int\n\n  }, {\n    key: 'readUByte',\n    value: function readUByte() {\n      return this.readBits(8);\n    }\n\n    // ():int\n\n  }, {\n    key: 'readUShort',\n    value: function readUShort() {\n      return this.readBits(16);\n    }\n    // ():int\n\n  }, {\n    key: 'readUInt',\n    value: function readUInt() {\n      return this.readBits(32);\n    }\n\n    /**\n     * Advance the ExpGolomb decoder past a scaling list. The scaling\n     * list is optionally transmitted as part of a sequence parameter\n     * set and is not relevant to transmuxing.\n     * @param count {number} the number of entries in this scaling list\n     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n     */\n\n  }, {\n    key: 'skipScalingList',\n    value: function skipScalingList(count) {\n      var lastScale = 8,\n          nextScale = 8,\n          j,\n          deltaScale;\n      for (j = 0; j < count; j++) {\n        if (nextScale !== 0) {\n          deltaScale = this.readEG();\n          nextScale = (lastScale + deltaScale + 256) % 256;\n        }\n        lastScale = nextScale === 0 ? lastScale : nextScale;\n      }\n    }\n\n    /**\n     * Read a sequence parameter set and return some interesting video\n     * properties. A sequence parameter set is the H264 metadata that\n     * describes the properties of upcoming video frames.\n     * @param data {Uint8Array} the bytes of a sequence parameter set\n     * @return {object} an object with configuration parsed from the\n     * sequence parameter set, including the dimensions of the\n     * associated video frames.\n     */\n\n  }, {\n    key: 'readSPS',\n    value: function readSPS() {\n      var frameCropLeftOffset = 0,\n          frameCropRightOffset = 0,\n          frameCropTopOffset = 0,\n          frameCropBottomOffset = 0,\n          sarScale = 1,\n          profileIdc,\n          profileCompat,\n          levelIdc,\n          numRefFramesInPicOrderCntCycle,\n          picWidthInMbsMinus1,\n          picHeightInMapUnitsMinus1,\n          frameMbsOnlyFlag,\n          scalingListCount,\n          i;\n      this.readUByte();\n      profileIdc = this.readUByte(); // profile_idc\n      profileCompat = this.readBits(5); // constraint_set[0-4]_flag, u(5)\n      this.skipBits(3); // reserved_zero_3bits u(3),\n      levelIdc = this.readUByte(); //level_idc u(8)\n      this.skipUEG(); // seq_parameter_set_id\n      // some profiles have more optional data we don't need\n      if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {\n        var chromaFormatIdc = this.readUEG();\n        if (chromaFormatIdc === 3) {\n          this.skipBits(1); // separate_colour_plane_flag\n        }\n        this.skipUEG(); // bit_depth_luma_minus8\n        this.skipUEG(); // bit_depth_chroma_minus8\n        this.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n        if (this.readBoolean()) {\n          // seq_scaling_matrix_present_flag\n          scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n          for (i = 0; i < scalingListCount; i++) {\n            if (this.readBoolean()) {\n              // seq_scaling_list_present_flag[ i ]\n              if (i < 6) {\n                this.skipScalingList(16);\n              } else {\n                this.skipScalingList(64);\n              }\n            }\n          }\n        }\n      }\n      this.skipUEG(); // log2_max_frame_num_minus4\n      var picOrderCntType = this.readUEG();\n      if (picOrderCntType === 0) {\n        this.readUEG(); //log2_max_pic_order_cnt_lsb_minus4\n      } else if (picOrderCntType === 1) {\n        this.skipBits(1); // delta_pic_order_always_zero_flag\n        this.skipEG(); // offset_for_non_ref_pic\n        this.skipEG(); // offset_for_top_to_bottom_field\n        numRefFramesInPicOrderCntCycle = this.readUEG();\n        for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n          this.skipEG(); // offset_for_ref_frame[ i ]\n        }\n      }\n      this.skipUEG(); // max_num_ref_frames\n      this.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n      picWidthInMbsMinus1 = this.readUEG();\n      picHeightInMapUnitsMinus1 = this.readUEG();\n      frameMbsOnlyFlag = this.readBits(1);\n      if (frameMbsOnlyFlag === 0) {\n        this.skipBits(1); // mb_adaptive_frame_field_flag\n      }\n      this.skipBits(1); // direct_8x8_inference_flag\n      if (this.readBoolean()) {\n        // frame_cropping_flag\n        frameCropLeftOffset = this.readUEG();\n        frameCropRightOffset = this.readUEG();\n        frameCropTopOffset = this.readUEG();\n        frameCropBottomOffset = this.readUEG();\n      }\n      if (this.readBoolean()) {\n        // vui_parameters_present_flag\n        if (this.readBoolean()) {\n          // aspect_ratio_info_present_flag\n          var sarRatio = void 0;\n          var aspectRatioIdc = this.readUByte();\n          switch (aspectRatioIdc) {\n            case 1:\n              sarRatio = [1, 1];break;\n            case 2:\n              sarRatio = [12, 11];break;\n            case 3:\n              sarRatio = [10, 11];break;\n            case 4:\n              sarRatio = [16, 11];break;\n            case 5:\n              sarRatio = [40, 33];break;\n            case 6:\n              sarRatio = [24, 11];break;\n            case 7:\n              sarRatio = [20, 11];break;\n            case 8:\n              sarRatio = [32, 11];break;\n            case 9:\n              sarRatio = [80, 33];break;\n            case 10:\n              sarRatio = [18, 11];break;\n            case 11:\n              sarRatio = [15, 11];break;\n            case 12:\n              sarRatio = [64, 33];break;\n            case 13:\n              sarRatio = [160, 99];break;\n            case 14:\n              sarRatio = [4, 3];break;\n            case 15:\n              sarRatio = [3, 2];break;\n            case 16:\n              sarRatio = [2, 1];break;\n            case 255:\n              {\n                sarRatio = [this.readUByte() << 8 | this.readUByte(), this.readUByte() << 8 | this.readUByte()];\n                break;\n              }\n          }\n          if (sarRatio) {\n            sarScale = sarRatio[0] / sarRatio[1];\n          }\n        }\n      }\n      return {\n        width: Math.ceil(((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n        height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset)\n      };\n    }\n  }, {\n    key: 'readSliceType',\n    value: function readSliceType() {\n      // skip NALu type\n      this.readUByte();\n      // discard first_mb_in_slice\n      this.readUEG();\n      // return slice_type\n      return this.readUEG();\n    }\n  }]);\n\n  return ExpGolomb;\n}();\n\nexports.default = ExpGolomb;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nparser\nn\n\nvar _logger = require('../utils/logger');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//import Hex from '../utils/hex';\n\nvar ID3 = function () {\n  function ID3(data) {\n    _classCallCheck(this, ID3);\n\n    this._hasTimeStamp = false;\n    var offset = 0,\n        byte1,\n        byte2,\n        byte3,\n        byte4,\n        tagSize,\n        endPos,\n        header,\n        len;\n    do {\n      header = this.readUTF(data, offset, 3);\n      offset += 3;\n      // first check for ID3 header\n      if (header === 'ID3') {\n        // skip 24 bits\n        offset += 3;\n        // retrieve tag(s) length\n        byte1 = data[offset++] & 0x7f;\n        byte2 = data[offset++] & 0x7f;\n        byte3 = data[offset++] & 0x7f;\n        byte4 = data[offset++] & 0x7f;\n        tagSize = (byte1 << 21) + (byte2 << 14) + (byte3 << 7) + byte4;\n        endPos = offset + tagSize;\n        //logger.log(`ID3 tag found, size/end: ${tagSize}/${endPos}`);\n\n        // read ID3 tags\n        this._parseID3Frames(data, offset, endPos);\n        offset = endPos;\n      } else if (header === '3DI') {\n        // http://id3.org/id3v2.4.0-structure chapter 3.4.   ID3v2 footer\n        offset += 7;\n        _logger.logger.log('3DI footer found, end: ' + offset);\n      } else {\n        offset -= 3;\n        len = offset;\n        if (len) {\n          //logger.log(`ID3 len: ${len}`);\n          if (!this.hasTimeStamp) {\n            _logger.logger.warn('ID3 tag found, but no timestamp');\n          }\n          this._length = len;\n          this._payload = data.subarray(0, len);\n        }\n        return;\n      }\n    } while (true);\n  }\n\n  _createClass(ID3, [{\n    key: 'readUTF',\n    value: function readUTF(data, start, len) {\n\n      var result = '',\n          offset = start,\n          end = start + len;\n      do {\n        result += String.fromCharCode(data[offset++]);\n      } while (offset < end);\n      return result;\n    }\n  }, {\n    key: '_parseID3Frames',\n    value: function _parseID3Frames(data, offset, endPos) {\n      var tagId, tagLen, tagStart, tagFlags, timestamp;\n      while (offset + 8 <= endPos) {\n        tagId = this.readUTF(data, offset, 4);\n        offset += 4;\n\n        tagLen = data[offset++] << 24 + data[offset++] << 16 + data[offset++] << 8 + data[offset++];\n\n        tagFlags = data[offset++] << 8 + data[offset++];\n\n        tagStart = offset;\n        //logger.log(\"ID3 tag id:\" + tagId);\n        switch (tagId) {\n          case 'PRIV':\n            //logger.log('parse frame:' + Hex.hexDump(data.subarray(offset,endPos)));\n            // owner should be \"com.apple.streaming.transportStreamTimestamp\"\n            if (this.readUTF(data, offset, 44) === 'com.apple.streaming.transportStreamTimestamp') {\n              offset += 44;\n              // smelling even better ! we found the right descriptor\n              // skip null character (string end) + 3 first bytes\n              offset += 4;\n\n              // timestamp is 33 bit expressed as a big-endian eight-octet number, with the upper 31 bits set to zero.\n              var pts33Bit = data[offset++] & 0x1;\n              this._hasTimeStamp = true;\n\n              timestamp = ((data[offset++] << 23) + (data[offset++] << 15) + (data[offset++] << 7) + data[offset++]) / 45;\n\n              if (pts33Bit) {\n                timestamp += 47721858.84; // 2^32 / 90\n              }\n              timestamp = Math.round(timestamp);\n              _logger.logger.trace('ID3 timestamp found: ' + timestamp);\n              this._timeStamp = timestamp;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  }, {\n    key: 'hasTimeStamp',\n    get: function get() {\n      return this._hasTimeStamp;\n    }\n  }, {\n    key: 'timeStamp',\n    get: function get() {\n      return this._timeStamp;\n    }\n  }, {\n    key: 'length',\n    get: function get() {\n      return this._length;\n    }\n  }, {\n    key: 'payload',\n    get: function get() {\n      return this._payload;\n    }\n  }]);\n\n  return ID3;\n}();\n\nexports.default = ID3;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nhighly optimized TS demuxer:\nparse PAT, PMT\nextract PES packet from audio and video PIDs\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet\ntrigger the remuxer upon parsing completion\nit also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.\nit also controls the remuxing process :\nupon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     */\n\n// import Hex from '../utils/hex';\n\n\nvar _adts = require('./adts');\n\nvar _adts2 = _interopRequireDefault(_adts);\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _expGolomb = require('./exp-golomb');\n\nvar _expGolomb2 = _interopRequireDefault(_expGolomb);\n\nvar _logger = require('../utils/logger');\n\nvar _errors = require('../errors');\n\nrequire('../utils/polyfill');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TSDemuxer = function () {\n  function TSDemuxer(observer, remuxerClass, config, typeSupported) {\n    _classCallCheck(this, TSDemuxer);\n\n    this.observer = observer;\n    this.remuxerClass = remuxerClass;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.lastCC = 0;\n    this._setEmptyTracks();\n    this._clearAllData();\n    this.remuxer = new this.remuxerClass(observer, config, typeSupported);\n  }\n\n  _createClass(TSDemuxer, [{\n    key: '_setEmptyTracks',\n    value: function _setEmptyTracks() {\n      var track = void 0;\n      if (track = this._avcTrack) {\n        if (track.sps) {\n          track.savedSps = track.sps;\n        }\n        if (track.pps) {\n          track.savedPps = track.pps;\n        }\n      }\n      this._avcTrack = Object.assign({}, this._avcTrack, { container: 'video/mp2t', type: 'video', samples: [], len: 0, nbNalu: 0, sps: undefined, pps: undefined });\n      this._aacTrack = Object.assign({}, this._aacTrack, { container: 'video/mp2t', type: 'audio', samples: [], len: 0, isAAC: true });\n      this._id3Track = Object.assign({}, this._id3Track, { type: 'id3', samples: [], len: 0 });\n      this._txtTrack = Object.assign({}, this._txtTrack, { type: 'text', samples: [], len: 0 });\n      this._avcTrack.sequenceNumber = this._avcTrack.sequenceNumber | 0;\n      this._aacTrack.sequenceNumber = this._aacTrack.sequenceNumber | 0;\n      this._id3Track.sequenceNumber = this._id3Track.sequenceNumber | 0;\n      this._txtTrack.sequenceNumber = this._txtTrack.sequenceNumber | 0;\n    }\n  }, {\n    key: '_clearIDs',\n    value: function _clearIDs() {\n      this._aacTrack.id = this._avcTrack.id = this._id3Track.id = this._txtTrack.id = -1;\n    }\n  }, {\n    key: 'switchLevel',\n    value: function switchLevel() {\n      // flush end of previous segment\n      if (this._avcTrack.samples.length) {\n        this.remux(null, false, true, false);\n      }\n      this.pmtParsed = false;\n      this._pmtId = -1;\n      this._setEmptyTracks();\n      this._clearAllData();\n      this._clearIDs();\n      // flush any partial content\n      this.aacOverFlow = null;\n      this.lastAacPTS = null;\n      this.remuxer.switchLevel();\n    }\n  }, {\n    key: '_clearAvcData',\n    value: function _clearAvcData() {\n      return this._avcData = { data: [], size: 0 };\n    }\n  }, {\n    key: '_clearAacData',\n    value: function _clearAacData() {\n      return this._aacData = { data: [], size: 0 };\n    }\n  }, {\n    key: '_clearID3Data',\n    value: function _clearID3Data() {\n      return this._id3Data = { data: [], size: 0 };\n    }\n  }, {\n    key: '_clearAllData',\n    value: function _clearAllData() {\n      this._clearAvcData();\n      this._clearAacData();\n      this._clearID3Data();\n    }\n  }, {\n    key: 'insertDiscontinuity',\n    value: function insertDiscontinuity() {\n      this.switchLevel();\n      this.remuxer.insertDiscontinuity();\n    }\n\n    // feed incoming data to the front of the parsing pipeline\n\n  }, {\n    key: 'push',\n    value: function push(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurate, first, final, lastSN) {\n      var avcData = this._avcData,\n          aacData = this._aacData,\n          pes,\n          id3Data = this._id3Data,\n          start,\n          len = data.length,\n          stt,\n          pid,\n          atf,\n          info,\n          num,\n          offset,\n          codecsOnly = this.remuxer.passthrough,\n          unknownPIDs = false;\n      this.audioCodec = audioCodec;\n      this.videoCodec = videoCodec;\n      this.timeOffset = timeOffset;\n      this.accurate = accurate;\n      this._duration = duration;\n      this.contiguous = false;\n      this.firstSample = first;\n      if (cc !== this.lastCC) {\n        _logger.logger.log('discontinuity detected');\n        this.insertDiscontinuity();\n        this.lastCC = cc;\n      }\n      var trackSwitch = level !== this.lastLevel;\n      if (trackSwitch) {\n        _logger.logger.log('level switch detected');\n        this.switchLevel();\n        this.lastLevel = level;\n      }\n      if (!trackSwitch && sn === this.lastSN + 1 || !first) {\n        this.contiguous = true;\n      } else {\n        // flush any partial content\n        if (this._avcTrack.samples.length) {\n          this.remux(null, false, true, false);\n        }\n        this.aacOverFlow = null;\n        this._clearAllData();\n        this._setEmptyTracks();\n      }\n      if (first) {\n        this.lastContiguous = !trackSwitch && sn === this.lastSN + 1;\n        this.fragStats = { framesCount: 0, keyFrames: 0, dropped: 0, segment: sn, level: level, notFirstKeyframe: 0 };\n        this.remuxAVCCount = this.remuxAACCount = 0;\n        this.fragStartPts = this.fragStartDts = this.gopStartDTS = undefined;\n        this.fragStartAVCPos = this._avcTrack.samples.length;\n        this.fragStartAACPos = this._aacTrack.samples.length;\n        this.nextAvcDts = this.contiguous ? this.remuxer.nextAvcDts : this.timeOffset * this.remuxer.PES_TIMESCALE;\n      }\n      this.currentSN = sn;\n      var avcId = this._avcTrack.id,\n          aacId = this._aacTrack.id,\n          id3Id = this._id3Track.id;\n\n      // don't parse last TS packet if incomplete\n      len -= len % 188;\n      // loop through TS packets\n      for (start = 0, num = 0; start < len; start += 188) {\n        if (data[start] === 0x47) {\n          stt = !!(data[start + 1] & 0x40);\n          // pid is a 13-bit field starting at the last bit of TS[1]\n          pid = ((data[start + 1] & 0x1f) << 8) + data[start + 2];\n          atf = (data[start + 3] & 0x30) >> 4;\n          // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.\n          if (atf > 1) {\n            offset = start + 5 + data[start + 4];\n            // continue if there is only adaptation field\n            if (offset === start + 188) {\n              continue;\n            }\n          } else {\n            offset = start + 4;\n          }\n\n          switch (pid) {\n            case avcId:\n              if (stt) {\n                if (pes = this._parsePES(avcData)) {\n                  this._parseAVCPES(pes);\n                  if (codecsOnly) {\n                    // if we have video codec info AND\n                    // if audio PID is undefined OR if we have audio codec info,\n                    // we have all codec info !\n                    if (this._avcTrack.codec && (aacId === -1 || this._aacTrack.codec)) {\n                      this.remux(data);\n                      return;\n                    }\n                  }\n                }\n                avcData = this._clearAvcData();\n              }\n              avcData.data.push(data.subarray(offset, start + 188));\n              avcData.size += start + 188 - offset;\n              break;\n            case aacId:\n              if (stt) {\n                if (pes = this._parsePES(aacData)) {\n                  if (this._aacTrack.isAAC) {\n                    this._parseAACPES(pes);\n                  } else {\n                    this._parseMPEGPES(pes);\n                  }\n                  if (codecsOnly) {\n                    // here we now that we have audio codec info\n                    // if video PID is undefined OR if we have video codec info,\n                    // we have all codec infos !\n                    if (this._aacTrack.codec && (avcId === -1 || this._avcTrack.codec)) {\n                      this.remux(data);\n                      return;\n                    }\n                  }\n                }\n                aacData = this._clearAacData();\n              }\n              aacData.data.push(data.subarray(offset, start + 188));\n              aacData.size += start + 188 - offset;\n              break;\n            case id3Id:\n              if (stt) {\n                if (pes = this._parsePES(id3Data)) {\n                  this._parseID3PES(pes);\n                }\n                id3Data = this._clearID3Data();\n              }\n              id3Data.data.push(data.subarray(offset, start + 188));\n              id3Data.size += start + 188 - offset;\n              break;\n            case 0:\n              if (stt) {\n                offset += data[offset] + 1;\n              }\n              this._parsePAT(data, offset);\n              break;\n            case this._pmtId:\n              if (stt) {\n                offset += data[offset] + 1;\n              }\n              this._parsePMT(data, offset, this.typeSupported.mpeg === true || this.typeSupported.mp3 === true);\n              avcId = this._avcTrack.id;\n              aacId = this._aacTrack.id;\n              id3Id = this._id3Track.id;\n              if (unknownPIDs && !this.pmtParsed) {\n                _logger.logger.log('reparse from beginning');\n                unknownPIDs = false;\n                // we set it to -188, the += 188 in the for loop will reset start to 0\n                start = -188;\n              }\n              this.pmtParsed = true;\n              break;\n            case 17:\n            case 0x1fff:\n              break;\n            default:\n              unknownPIDs = true;\n              break;\n          }\n        } else {\n          if (num === 0) {\n            var i = void 0,\n                _len = data.length;\n            info = 'len:' + _len + ' [';\n            for (i = 0, _len = Math.min(_len, 10); i < _len; i++) {\n              if (i) {\n                info += ',';\n              }\n              info += data[start + i];\n            }\n            info += '..]';\n          }\n          num++;\n        }\n      }\n      if (num) {\n        this.observer.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: 'TS packet did not start with 0x47 sn:' + sn + ' samples: ' + num + ' ' + info });\n      }\n      // parse last PES packet\n      if (final) {\n        if (avcData.size && (pes = this._parsePES(avcData))) {\n          this._parseAVCPES(pes);\n          this._clearAvcData();\n        }\n        if (aacData.size && (pes = this._parsePES(aacData))) {\n          if (this._aacTrack.isAAC) {\n            this._parseAACPES(pes);\n          } else {\n            this._parseMPEGPES(pes);\n          }\n          this._clearAacData();\n        }\n        if (id3Data.size && (pes = this._parsePES(id3Data))) {\n          this._parseID3PES(pes);\n          this._clearID3Data();\n        }\n        this.lastSN = sn;\n      }\n      if (this.fragStartPts === undefined && this._avcTrack.samples.length > this.fragStartAVCPos) {\n        this.fragStartPts = this._avcTrack.samples[this.fragStartAVCPos].pts;\n        this.fragStartDts = this._avcTrack.samples[this.fragStartAVCPos].dts;\n      }\n      if (this.gopStartDTS === undefined && this._avcTrack.samples.length) {\n        this.gopStartDTS = this._avcTrack.samples[0].dts;\n      }\n      this.remux(null, final, final && sn === lastSN, true);\n      if (final) {\n        this.observer.trigger(_events2.default.FRAG_STATISTICS, this.fragStats);\n      }\n    }\n  }, {\n    key: '_recalcTrack',\n    value: function _recalcTrack(track) {\n      if (track.hasOwnProperty('nbNalu')) {\n        track.nbNalu = 0;\n      }\n      track.len = 0;\n      for (var i = 0; i < track.samples.length; i++) {\n        var sample = track.samples[i];\n        track.len += ((sample.units && sample.units.length) | 0) + ((sample.unit && sample.unit.length) | 0) + (sample.len | 0) + ((sample.bytes && sample.bytes.length) | 0);\n        if (track.hasOwnProperty('nbNalu')) {\n          track.nbNalu += sample.units.units.length;\n        }\n      }\n    }\n  }, {\n    key: '_filterSamples',\n    value: function _filterSamples(track, end, _save) {\n      var _new = [];\n      for (var i = 0; i < track.samples.length; i++) {\n        var sample = track.samples[i];\n        var sampleTime = sample.dts || sample.pts;\n        if (sampleTime <= end) {\n          _new.push(sample);\n        } else {\n          _save.push(sample);\n        }\n      }\n      track.samples = _new;\n      this._recalcTrack(track);\n    }\n  }, {\n    key: 'remux',\n    value: function remux(data, final, flush, lastSegment) {\n      var _saveAVCSamples = [],\n          _saveAACSamples = [],\n          _saveID3Samples = [],\n          _saveTextSamples = [],\n          maxk,\n          samples = this._avcTrack.samples,\n          startPTS,\n          endPTS,\n          gopEndDTS,\n          initDTS;\n      var timescale = this.remuxer.PES_TIMESCALE;\n      if (samples.length && final) {\n        this.fragStats.PTSDTSshift = ((this.fragStartPts === undefined ? samples[0].pts : this.fragStartPts) - (this.fragStartDts === undefined ? samples[0].dts : this.fragStartDts)) / timescale;\n        initDTS = this.remuxer._initDTS === undefined ? samples[0].dts - timescale * this.timeOffset : this.remuxer._initDTS;\n        var startDTS = Math.max(this.remuxer._PTSNormalize((this.gopStartDTS === undefined ? samples[0].dts : this.gopStartDTS) - initDTS, this.nextAvcDts), 0);\n        var sample = samples[samples.length - 1];\n        var videoStartPTS = Math.max(this.remuxer._PTSNormalize((this.fragStartPts === undefined ? samples[0].pts : this.fragStartPts) - initDTS, this.nextAvcDts), 0) / timescale;\n        var videoEndPTS = Math.max(this.remuxer._PTSNormalize(sample.pts - initDTS, this.nextAvcDts), 0) / timescale;\n        if (this.accurate && Math.abs(startDTS - this.nextAvcDts) > 90) {\n          videoStartPTS -= (startDTS - this.nextAvcDts) / timescale;\n        }\n        if (samples.length + this.remuxAVCCount > this.fragStartAVCPos + 1 && this.fragStartDts !== undefined) {\n          var fragStartDts = this.remuxer._PTSNormalize(this.fragStartDts, this.nextAvcDts);\n          var sampleDts = this.remuxer._PTSNormalize(sample.dts, this.nextAvcDts);\n          videoEndPTS += (sampleDts - fragStartDts) / (samples.length + this.remuxAVCCount - this.fragStartAVCPos - 1) / timescale;\n        }\n        startPTS = videoStartPTS;\n        endPTS = videoEndPTS;\n        if (this._aacTrack.audiosamplerate) {\n          var expectedSampleDuration = 1024 / this._aacTrack.audiosamplerate;\n          var remuxAACCount = this._aacTrack.samples.length;\n          var nextAacPTS = (this.lastContiguous !== undefined && this.lastContiguous || this.contiguous && this.remuxAACCount) && this.remuxer.nextAacPts ? this.remuxer.nextAacPts / timescale : this.accurate ? this.timeOffset : startPTS;\n          startPTS = Math.max(startPTS, nextAacPTS + (this.fragStartAACPos - this.remuxAACCount) * expectedSampleDuration);\n          if (remuxAACCount) {\n            endPTS = Math.min(endPTS, nextAacPTS + expectedSampleDuration * remuxAACCount);\n          }\n          var AVUnsync = void 0;\n          if ((AVUnsync = endPTS - startPTS + videoStartPTS - videoEndPTS) > 0.2) {\n            this.fragStats.AVUnsync = AVUnsync;\n          }\n        }\n        // console.log(`parsed total ${startPTS}/${endPTS} video ${videoStartPTS}/${videoEndPTS} shift ${this.fragStats.PTSDTSshift}`);\n      }\n      if (!flush) {\n        // save samples and break by GOP\n        for (maxk = samples.length - 1; maxk > 0; maxk--) {\n          if (samples[maxk].key) {\n            if (maxk && (samples[maxk - 1].dts - initDTS) / timescale < startPTS) {\n              maxk = 0;\n            }\n            break;\n          }\n        }\n        if (maxk > 0) {\n          _saveAVCSamples = samples.slice(maxk);\n          this._avcTrack.samples = samples.slice(0, maxk);\n          gopEndDTS = this._avcTrack.samples[maxk - 1].dts;\n          this._recalcTrack(this._avcTrack);\n          this._filterSamples(this._aacTrack, gopEndDTS, _saveAACSamples);\n          this._filterSamples(this._id3Track, gopEndDTS, _saveID3Samples);\n          this._filterSamples(this._txtTrack, gopEndDTS, _saveTextSamples);\n        }\n      }\n      if ((flush || final && !this.remuxAVCCount) && this._avcTrack.samples.length + this._aacTrack.samples.length || maxk > 0) {\n        this.remuxAVCCount += this._avcTrack.samples.length;\n        this.remuxAACCount += this._aacTrack.samples.length;\n        this.remuxer.remux(this._aacTrack, this._avcTrack, this._id3Track, this._txtTrack, flush && this.nextStartPts ? this.nextStartPts : this.timeOffset, flush && !lastSegment || (this.lastContiguous !== undefined ? this.lastContiguous : this.contiguous), this.accurate, data, flush, this.fragStats);\n        this.lastContiguous = undefined;\n        this.nextStartPts = this.remuxer.endPTS;\n        this._avcTrack.samples = _saveAVCSamples;\n        this._aacTrack.samples = _saveAACSamples;\n        this._id3Track.samples = _saveID3Samples;\n        this._txtTrack.samples = _saveTextSamples;\n        this._recalcTrack(this._avcTrack);\n        this._recalcTrack(this._aacTrack);\n        this._recalcTrack(this._id3Track);\n        this._recalcTrack(this._txtTrack);\n      }\n      //notify end of parsing\n      if (final) {\n        var lastGopPTS = Math.min(this.remuxer.nextAvcDts, this.remuxer.nextAacPts) / timescale;\n        this.observer.trigger(_events2.default.FRAG_PARSED, { startPTS: startPTS, endPTS: endPTS, PTSDTSshift: this.fragStats.PTSDTSshift, lastGopPTS: lastGopPTS });\n      }\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.switchLevel();\n      this._initPTS = this._initDTS = undefined;\n      this._duration = 0;\n    }\n  }, {\n    key: '_parsePAT',\n    value: function _parsePAT(data, offset) {\n      // skip the PSI header and parse the first PMT entry\n      this._pmtId = (data[offset + 10] & 0x1F) << 8 | data[offset + 11];\n      //logger.log('PMT PID:'  + this._pmtId);\n    }\n  }, {\n    key: '_parsePMT',\n    value: function _parsePMT(data, offset, mpegSupported) {\n      var sectionLength, tableEnd, programInfoLength, pid;\n      sectionLength = (data[offset + 1] & 0x0f) << 8 | data[offset + 2];\n      tableEnd = offset + 3 + sectionLength - 4;\n      // to determine where the table is, we have to figure out how\n      // long the program info descriptors are\n      programInfoLength = (data[offset + 10] & 0x0f) << 8 | data[offset + 11];\n      // advance the offset to the first entry in the mapping table\n      offset += 12 + programInfoLength;\n      while (offset < tableEnd) {\n        pid = (data[offset + 1] & 0x1F) << 8 | data[offset + 2];\n        switch (data[offset]) {\n          // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)\n          case 0x0f:\n            //logger.log('AAC PID:'  + pid);\n            if (this._aacTrack.id === -1) {\n              this._aacTrack.id = pid;\n            }\n            break;\n          // Packetized metadata (ID3)\n          case 0x15:\n            //logger.log('ID3 PID:'  + pid);\n            if (this._id3Track.id === -1) {\n              this._id3Track.id = pid;\n            }\n            break;\n          // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)\n          case 0x1b:\n            //logger.log('AVC PID:'  + pid);\n            if (this._avcTrack.id === -1) {\n              this._avcTrack.id = pid;\n            }\n            break;\n          // ISO/IEC 11172-3 (MPEG-1 audio)\n          // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)\n          case 0x03:\n          case 0x04:\n            _logger.logger.log('MPEG PID:' + pid);\n            if (!mpegSupported) {\n              _logger.logger.log('MPEG audio found, not supported in this browser for now');\n            } else {\n              if (this._aacTrack.id === -1) {\n                this._aacTrack.id = pid;\n              }\n              this._aacTrack.isAAC = false;\n            }\n            break;\n          case 0x24:\n            this.fragStats.HEVC = (this.fragStats.HEVC | 0) + 1;\n            _logger.logger.warn('HEVC stream type found, not supported for now');\n            break;\n          default:\n            this.fragStats.unknownStream = (this.fragStats.unknownStream | 0) + 1;\n            _logger.logger.log('unkown stream type:' + data[offset]);\n            break;\n        }\n        // move to the next table entry\n        // skip past the elementary stream descriptors, if present\n        offset += ((data[offset + 3] & 0x0F) << 8 | data[offset + 4]) + 5;\n      }\n    }\n  }, {\n    key: '_parsePES',\n    value: function _parsePES(stream) {\n      var i = 0,\n          frag,\n          pesFlags,\n          pesPrefix,\n          pesLen,\n          pesHdrLen,\n          pesData,\n          pesPts,\n          pesDts,\n          payloadStartOffset,\n          data = stream.data;\n      // safety check\n      if (!stream || stream.size === 0) {\n        return null;\n      }\n\n      // we might need up to 19 bytes to read PES header\n      // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes\n      // usually only one merge is needed (and this is rare ...)\n      while (data[0].length < 19 && data.length > 1) {\n        var newData = new Uint8Array(data[0].length + data[1].length);\n        newData.set(data[0]);\n        newData.set(data[1], data[0].length);\n        data[0] = newData;\n        data.splice(1, 1);\n      }\n      //retrieve PTS/DTS from first fragment\n      frag = data[0];\n      pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];\n      if (pesPrefix === 1) {\n        pesLen = (frag[4] << 8) + frag[5];\n        if (pesLen && pesLen > stream.size - 6) {\n          return null;\n        }\n        pesFlags = frag[7];\n        if (pesFlags & 0xC0) {\n          /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n              as PTS / DTS is 33 bit we cannot use bitwise operator in JS,\n              as Bitwise operators treat their operands as a sequence of 32 bits */\n          pesPts = (frag[9] & 0x0E) * 536870912 + // 1 << 29\n          (frag[10] & 0xFF) * 4194304 + // 1 << 22\n          (frag[11] & 0xFE) * 16384 + // 1 << 14\n          (frag[12] & 0xFF) * 128 + // 1 << 7\n          (frag[13] & 0xFE) / 2;\n          // check if greater than 2^32 -1\n          if (pesPts > 4294967295) {\n            // decrement 2^33\n            pesPts -= 8589934592;\n          }\n          if (pesFlags & 0x40) {\n            pesDts = (frag[14] & 0x0E) * 536870912 + // 1 << 29\n            (frag[15] & 0xFF) * 4194304 + // 1 << 22\n            (frag[16] & 0xFE) * 16384 + // 1 << 14\n            (frag[17] & 0xFF) * 128 + // 1 << 7\n            (frag[18] & 0xFE) / 2;\n            // check if greater than 2^32 -1\n            if (pesDts > 4294967295) {\n              // decrement 2^33\n              pesDts -= 8589934592;\n            }\n            if (pesPts - pesDts > 60 * 90000) {\n              _logger.logger.warn(Math.round((pesPts - pesDts) / 90000) + 's delta between PTS and DTS, align them');\n              pesPts = pesDts;\n            }\n          } else {\n            pesDts = pesPts;\n          }\n        }\n        pesHdrLen = frag[8];\n        payloadStartOffset = pesHdrLen + 9;\n\n        stream.size -= payloadStartOffset;\n        //reassemble PES packet\n        pesData = new Uint8Array(stream.size);\n        while (data.length) {\n          frag = data.shift();\n          var len = frag.byteLength;\n          if (payloadStartOffset) {\n            if (payloadStartOffset > len) {\n              // trim full frag if PES header bigger than frag\n              payloadStartOffset -= len;\n              continue;\n            } else {\n              // trim partial frag if PES header smaller than frag\n              frag = frag.subarray(payloadStartOffset);\n              len -= payloadStartOffset;\n              payloadStartOffset = 0;\n            }\n          }\n          pesData.set(frag, i);\n          i += len;\n        }\n        if (pesLen) {\n          // payload size : remove PES header + PES extension\n          pesLen -= pesHdrLen + 3;\n        }\n        return { data: pesData, pts: pesPts, dts: pesDts, len: pesLen };\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: '_parseAVCPES',\n    value: function _parseAVCPES(pes) {\n      var _this = this;\n\n      var track = this._avcTrack,\n          samples = track.samples,\n          units = this._parseAVCNALu(pes.data),\n          units2 = [],\n          debug = false,\n          key = false,\n          length = 0,\n          expGolombDecoder,\n          avcSample,\n          push,\n          hlsConfig = this.config,\n          i;\n      // no NALu found\n      if (units.length === 0 && samples.length > 0) {\n        // append pes.data to previous NAL unit\n        var lastavcSample = samples[samples.length - 1];\n        var lastUnit = lastavcSample.units.units[lastavcSample.units.units.length - 1];\n        var tmp = new Uint8Array(lastUnit.data.byteLength + pes.data.byteLength);\n        tmp.set(lastUnit.data, 0);\n        tmp.set(pes.data, lastUnit.data.byteLength);\n        lastUnit.data = tmp;\n        lastavcSample.units.length += pes.data.byteLength;\n        track.len += pes.data.byteLength;\n      }\n      //free pes.data to save up some memory\n      pes.data = null;\n      var debugString = '';\n\n      units.forEach(function (unit) {\n        switch (unit.type) {\n          //NDR\n          case 1:\n            push = true;\n            if (debug) {\n              debugString += 'NDR ';\n            }\n            // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR\n            var data = unit.data;\n            if (data.length > 1) {\n              var sliceType = new _expGolomb2.default(data).readSliceType();\n              // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice\n              // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.\n              // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.\n              // I slice: A slice that is not an SI slice that is decoded using intra prediction only.\n              //if (sliceType === 2 || sliceType === 7) {\n              if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {\n                key = true;\n              }\n            }\n            break;\n          //IDR\n          case 5:\n            push = true;\n            if (debug) {\n              debugString += 'IDR ';\n            }\n            key = true;\n            break;\n          //SEI\n          case 6:\n            push = true;\n            if (debug) {\n              debugString += 'SEI ';\n            }\n            expGolombDecoder = new _expGolomb2.default(_this.discardEPB(unit.data));\n\n            // skip frameType\n            expGolombDecoder.readUByte();\n\n            var payloadType = 0;\n            var payloadSize = 0;\n            var endOfCaptions = false;\n            var b = 0;\n\n            while (!endOfCaptions && expGolombDecoder.wholeBytesAvailable() > 1) {\n              payloadType = 0;\n              do {\n                b = expGolombDecoder.readUByte();\n                payloadType += b;\n              } while (b === 0xFF);\n              // Parse payload size.\n              payloadSize = 0;\n              do {\n                b = expGolombDecoder.readUByte();\n                payloadSize += b;\n              } while (b === 0xFF);\n\n              // if SEI recovery_point has been found mark as keyframe\n              if (!hlsConfig.disableSEIkeyframes) {\n                key = key || payloadType === 6;\n              }\n\n              if (key && !track.sps && track.savedSps) {\n                track.sps = track.savedSps;\n                if (!track.pps && track.savedPps) {\n                  track.pps = track.savedPps;\n                }\n              }\n\n              // TODO: there can be more than one payload in an SEI packet...\n              // TODO: need to read type and size in a while loop to get them all\n              if (payloadType === 4 && expGolombDecoder.wholeBytesAvailable() !== 0) {\n\n                endOfCaptions = true;\n\n                var countryCode = expGolombDecoder.readUByte();\n\n                if (countryCode === 181) {\n                  var providerCode = expGolombDecoder.readUShort();\n\n                  if (providerCode === 49) {\n                    var userStructure = expGolombDecoder.readUInt();\n\n                    if (userStructure === 0x47413934) {\n                      var userDataType = expGolombDecoder.readUByte();\n\n                      // Raw CEA-608 bytes wrapped in CEA-708 packet\n                      if (userDataType === 3) {\n                        var firstByte = expGolombDecoder.readUByte();\n                        var secondByte = expGolombDecoder.readUByte();\n\n                        var totalCCs = 31 & firstByte;\n                        var byteArray = [firstByte, secondByte];\n\n                        for (i = 0; i < totalCCs; i++) {\n                          // 3 bytes per CC\n                          byteArray.push(expGolombDecoder.readUByte());\n                          byteArray.push(expGolombDecoder.readUByte());\n                          byteArray.push(expGolombDecoder.readUByte());\n                        }\n\n                        _this._insertSampleInOrder(_this._txtTrack.samples, { type: 3, pts: pes.pts, bytes: byteArray });\n                      }\n                    }\n                  }\n                }\n              } else if (payloadSize < expGolombDecoder.wholeBytesAvailable()) {\n                for (i = 0; i < payloadSize; i++) {\n                  expGolombDecoder.readUByte();\n                }\n              }\n            }\n            break;\n          //SPS\n          case 7:\n            push = true;\n            if (debug) {\n              debugString += 'SPS ';\n            }\n            if (!track.sps || track.sps === track.savedSps) {\n              track.savedSps = undefined;\n              expGolombDecoder = new _expGolomb2.default(unit.data);\n              var config = expGolombDecoder.readSPS();\n              track.width = config.width;\n              track.height = config.height;\n              track.sps = [unit.data];\n              track.duration = _this._duration;\n              var codecarray = unit.data.subarray(1, 4);\n              var codecstring = 'avc1.';\n              for (i = 0; i < 3; i++) {\n                var h = codecarray[i].toString(16);\n                if (h.length < 2) {\n                  h = '0' + h;\n                }\n                codecstring += h;\n              }\n              track.codec = codecstring;\n            }\n            break;\n          //PPS\n          case 8:\n            push = true;\n            if (debug) {\n              debugString += 'PPS ';\n            }\n            if (!track.pps || track.pps === track.savedPps) {\n              track.savedPps = undefined;\n              track.pps = [unit.data];\n            }\n            break;\n          case 9:\n            push = false;\n            if (debug) {\n              debugString += 'AUD ';\n            }\n            break;\n          // Filler Data\n          case 12:\n            push = false;\n            break;\n          default:\n            push = false;\n            debugString += 'unknown NAL ' + unit.type + ' ';\n            break;\n        }\n        if (push) {\n          units2.push(unit);\n          length += unit.data.byteLength;\n        }\n      });\n      if (debug || debugString.length) {\n        _logger.logger.log(debugString);\n      }\n      //build sample from PES\n      // Annex B to MP4 conversion to be done\n      if (units2.length) {\n        // only push AVC sample if keyframe already found in this fragment OR\n        //    keyframe found in last fragment (track.sps) AND\n        //        samples already appended (we already found a keyframe in this fragment) OR fragment is contiguous\n        this.fragStats.framesCount++;\n        if (key === true || track.sps && (samples.length || this.contiguous)) {\n          avcSample = { units: { units: units2, length: length }, pts: pes.pts, dts: pes.dts, key: key };\n          if (key) {\n            this.fragStats.keyFrames++;\n          }\n          // logger.log(`avcSample ${units2.length} ${length} ${pes.dts} ${key}`);\n          samples.push(avcSample);\n          track.len += length;\n          track.nbNalu += units2.length;\n        } else {\n          this.fragStats.dropped++;\n        }\n        if (this.firstSample && !key) {\n          this.fragStats.notFirstKeyframe++;\n        }\n        this.firstSample = false;\n      }\n    }\n  }, {\n    key: '_insertSampleInOrder',\n    value: function _insertSampleInOrder(arr, data) {\n      var len = arr.length;\n      if (len > 0) {\n        if (data.pts >= arr[len - 1].pts) {\n          arr.push(data);\n        } else {\n          for (var pos = len - 1; pos >= 0; pos--) {\n            if (data.pts < arr[pos].pts) {\n              arr.splice(pos, 0, data);\n              break;\n            }\n          }\n        }\n      } else {\n        arr.push(data);\n      }\n    }\n  }, {\n    key: '_parseAVCNALu',\n    value: function _parseAVCNALu(array) {\n      var i = 0,\n          len = array.byteLength,\n          value,\n          overflow,\n          state = 0;\n      var units = [],\n          unit,\n          unitType,\n          lastUnitStart,\n          lastUnitType;\n      //logger.log('PES:' + Hex.hexDump(array));\n      while (i < len) {\n        value = array[i++];\n        // finding 3 or 4-byte start codes (00 00 01 OR 00 00 00 01)\n        switch (state) {\n          case 0:\n            if (value === 0) {\n              state = 1;\n            }\n            break;\n          case 1:\n            if (value === 0) {\n              state = 2;\n            } else {\n              state = 0;\n            }\n            break;\n          case 2:\n          case 3:\n            if (value === 0) {\n              state = 3;\n            } else if (value === 1 && i < len) {\n              unitType = array[i] & 0x1f;\n              //logger.log('find NALU @ offset:' + i + ',type:' + unitType);\n              if (lastUnitStart) {\n                unit = { data: array.subarray(lastUnitStart, i - state - 1), type: lastUnitType };\n                //logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);\n                units.push(unit);\n              } else {\n                // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.\n                overflow = i - state - 1;\n                if (overflow) {\n                  var track = this._avcTrack,\n                      samples = track.samples;\n                  //logger.log('first NALU found with overflow:' + overflow);\n                  if (samples.length) {\n                    var lastavcSample = samples[samples.length - 1],\n                        lastUnits = lastavcSample.units.units,\n                        lastUnit = lastUnits[lastUnits.length - 1],\n                        tmp = new Uint8Array(lastUnit.data.byteLength + overflow);\n                    tmp.set(lastUnit.data, 0);\n                    tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);\n                    lastUnit.data = tmp;\n                    lastavcSample.units.length += overflow;\n                    track.len += overflow;\n                  }\n                }\n              }\n              lastUnitStart = i;\n              lastUnitType = unitType;\n              state = 0;\n            } else {\n              state = 0;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n      if (lastUnitStart) {\n        unit = { data: array.subarray(lastUnitStart, len), type: lastUnitType };\n        units.push(unit);\n        //logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);\n      }\n      return units;\n    }\n\n    /**\n     * remove Emulation Prevention bytes from a RBSP\n     */\n\n  }, {\n    key: 'discardEPB',\n    value: function discardEPB(data) {\n      var length = data.byteLength,\n          EPBPositions = [],\n          i = 1,\n          newLength,\n          newData;\n\n      // Find all `Emulation Prevention Bytes`\n      while (i < length - 2) {\n        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n          EPBPositions.push(i + 2);\n          i += 2;\n        } else {\n          i++;\n        }\n      }\n\n      // If no Emulation Prevention Bytes were found just return the original\n      // array\n      if (EPBPositions.length === 0) {\n        return data;\n      }\n\n      // Create a new array to hold the NAL unit data\n      newLength = length - EPBPositions.length;\n      newData = new Uint8Array(newLength);\n      var sourceIndex = 0;\n\n      for (i = 0; i < newLength; sourceIndex++, i++) {\n        if (sourceIndex === EPBPositions[0]) {\n          // Skip this byte\n          sourceIndex++;\n          // Remove this position index\n          EPBPositions.shift();\n        }\n        newData[i] = data[sourceIndex];\n      }\n      return newData;\n    }\n  }, {\n    key: '_parseAACPES',\n    value: function _parseAACPES(pes) {\n      var track = this._aacTrack,\n          data = pes.data,\n          pts = pes.pts,\n          startOffset = 0,\n          duration = this._duration,\n          audioCodec = this.audioCodec,\n          aacOverFlow = this.aacOverFlow,\n          lastAacPTS = this.lastAacPTS,\n          config,\n          frameLength,\n          frameDuration,\n          frameIndex,\n          offset,\n          headerLength,\n          stamp,\n          len,\n          aacSample;\n      if (aacOverFlow) {\n        var tmp = new Uint8Array(aacOverFlow.byteLength + data.byteLength);\n        tmp.set(aacOverFlow, 0);\n        tmp.set(data, aacOverFlow.byteLength);\n        //logger.log(`AAC: append overflowing ${aacOverFlow.byteLength} bytes to beginning of new PES`);\n        data = tmp;\n      }\n      // look for ADTS header (0xFFFx)\n      for (offset = startOffset, len = data.length; offset < len - 1; offset++) {\n        if (data[offset] === 0xff && (data[offset + 1] & 0xf0) === 0xf0) {\n          break;\n        }\n      }\n      // if ADTS header does not start straight from the beginning of the PES payload, raise an error\n      if (offset) {\n        var reason, fatal;\n        if (offset < len - 1) {\n          reason = 'AAC PES did not start with ADTS header,offset:' + offset;\n          fatal = false;\n        } else {\n          reason = 'no ADTS header found in AAC PES';\n          fatal = true;\n        }\n        this.observer.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.FRAG_PARSING_ERROR, fatal: fatal, reason: reason });\n        if (fatal) {\n          return;\n        }\n      }\n      config = _adts2.default.getAudioConfig(this.observer, data, offset, audioCodec);\n      if (track.audiosamplerate !== config.samplerate || track.codec !== config.codec) {\n        track.config = config.config;\n        track.audiosamplerate = config.samplerate;\n        track.channelCount = config.channelCount;\n        track.codec = config.codec;\n        track.duration = duration;\n        _logger.logger.log('parsed codec:' + track.codec + ',rate:' + config.samplerate + ',nb channel:' + config.channelCount);\n      }\n      frameIndex = 0;\n      frameDuration = 1024 * 90000 / track.audiosamplerate;\n\n      // if last AAC frame is overflowing, we should ensure timestamps are contiguous:\n      // first sample PTS should be equal to last sample PTS + frameDuration\n      if (aacOverFlow && lastAacPTS) {\n        var newPTS = lastAacPTS + frameDuration;\n        if (Math.abs(newPTS - pts) > 1) {\n          _logger.logger.log('AAC: align PTS for overlapping frames by ' + Math.round((newPTS - pts) / 90));\n          pts = newPTS;\n        }\n      }\n\n      while (offset + 5 < len) {\n        // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header\n        headerLength = !!(data[offset + 1] & 0x01) ? 7 : 9;\n        // retrieve frame size\n        frameLength = (data[offset + 3] & 0x03) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 0xE0) >>> 5;\n        frameLength -= headerLength;\n        //stamp = pes.pts;\n\n        if (frameLength > 0 && offset + headerLength + frameLength <= len) {\n          stamp = pts + frameIndex * frameDuration;\n          //logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);\n          aacSample = { unit: data.subarray(offset + headerLength, offset + headerLength + frameLength), pts: stamp, dts: stamp };\n          track.samples.push(aacSample);\n          track.len += frameLength;\n          offset += frameLength + headerLength;\n          frameIndex++;\n          // look for ADTS header (0xFFFx)\n          for (; offset < len - 1; offset++) {\n            if (data[offset] === 0xff && (data[offset + 1] & 0xf0) === 0xf0) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n      if (offset < len) {\n        aacOverFlow = data.subarray(offset, len);\n        //logger.log(`AAC: overflow detected:${len-offset}`);\n      } else {\n        aacOverFlow = null;\n      }\n      this.aacOverFlow = aacOverFlow;\n      this.lastAacPTS = stamp;\n    }\n  }, {\n    key: '_parseMPEGPES',\n    value: function _parseMPEGPES(pes) {\n      var data = pes.data;\n      var pts = pes.pts;\n      var length = data.length;\n      var frameIndex = 0;\n      var offset = 0;\n      var parsed;\n\n      while (offset < length && (parsed = this._parseMpeg(data, offset, length, frameIndex++, pts)) > 0) {\n        offset += parsed;\n      }\n    }\n  }, {\n    key: '_onMpegFrame',\n    value: function _onMpegFrame(data, bitRate, sampleRate, channelCount, frameIndex, pts) {\n      var frameDuration = 1152 / sampleRate * 1000;\n      var stamp = pts + frameIndex * frameDuration;\n      var track = this._aacTrack;\n\n      track.config = [];\n      track.channelCount = channelCount;\n      track.audiosamplerate = sampleRate;\n      track.duration = this._duration;\n      track.samples.push({ unit: data, pts: stamp, dts: stamp });\n      track.len += data.length;\n    }\n  }, {\n    key: '_onMpegNoise',\n    value: function _onMpegNoise(data) {\n      _logger.logger.warn('mpeg audio has noise: ' + data.length + ' bytes');\n    }\n  }, {\n    key: '_parseMpeg',\n    value: function _parseMpeg(data, start, end, frameIndex, pts) {\n      var BitratesMap = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160];\n      var SamplingRateMap = [44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000];\n\n      if (start + 2 > end) {\n        return -1; // we need at least 2 bytes to detect sync pattern\n      }\n      if (data[start] === 0xFF || (data[start + 1] & 0xE0) === 0xE0) {\n        // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference\n        if (start + 24 > end) {\n          return -1;\n        }\n        var headerB = data[start + 1] >> 3 & 3;\n        var headerC = data[start + 1] >> 1 & 3;\n        var headerE = data[start + 2] >> 4 & 15;\n        var headerF = data[start + 2] >> 2 & 3;\n        var headerG = !!(data[start + 2] & 2);\n        if (headerB !== 1 && headerE !== 0 && headerE !== 15 && headerF !== 3) {\n          var columnInBitrates = headerB === 3 ? 3 - headerC : headerC === 3 ? 3 : 4;\n          var bitRate = BitratesMap[columnInBitrates * 14 + headerE - 1] * 1000;\n          var columnInSampleRates = headerB === 3 ? 0 : headerB === 2 ? 1 : 2;\n          var sampleRate = SamplingRateMap[columnInSampleRates * 3 + headerF];\n          var padding = headerG ? 1 : 0;\n          var channelCount = data[start + 3] >> 6 === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)\n          var frameLength = headerC === 3 ? (headerB === 3 ? 12 : 6) * bitRate / sampleRate + padding << 2 : (headerB === 3 ? 144 : 72) * bitRate / sampleRate + padding | 0;\n          if (start + frameLength > end) {\n            return -1;\n          }\n          if (this._onMpegFrame) {\n            this._onMpegFrame(data.subarray(start, start + frameLength), bitRate, sampleRate, channelCount, frameIndex, pts);\n          }\n          return frameLength;\n        }\n      }\n      // noise or ID3, trying to skip\n      var offset = start + 2;\n      while (offset < end) {\n        if (data[offset - 1] === 0xFF && (data[offset] & 0xE0) === 0xE0) {\n          // sync pattern is found\n          if (this._onMpegNoise) {\n            this._onMpegNoise(data.subarray(start, offset - 1));\n          }\n          return offset - start - 1;\n        }\n        offset++;\n      }\n      return -1;\n    }\n  }, {\n    key: '_parseID3PES',\n    value: function _parseID3PES(pes) {\n      this._id3Track.samples.push(pes);\n    }\n  }], [{\n    key: 'probe',\n    value: function probe(data) {\n      // a TS fragment should contain at least 3 TS packets, a PAT, a PMT, and one PID, each starting with 0x47\n      return data.length >= 3 * 188 && data[0] === 0x47 && data[188] === 0x47 && data[2 * 188] === 0x47;\n    }\n  }]);\n\n  return TSDemuxer;\n}();\n\nexports.default = TSDemuxer;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ErrorTypes = exports.ErrorTypes = {\n  // Identifier for a network error (loading error / timeout ...)\n  NETWORK_ERROR: 'networkError',\n  // Identifier for a media Error (video/parsing/mediasource error)\n  MEDIA_ERROR: 'mediaError',\n  // Identifier for all other errors\n  OTHER_ERROR: 'otherError'\n};\n\nvar ErrorDetails = exports.ErrorDetails = {\n  // Identifier for a manifest load error - data: { url : faulty URL, response : XHR response}\n  MANIFEST_LOAD_ERROR: 'manifestLoadError',\n  // Identifier for a manifest load timeout - data: { url : faulty URL, response : XHR response}\n  MANIFEST_LOAD_TIMEOUT: 'manifestLoadTimeOut',\n  // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_PARSING_ERROR: 'manifestParsingError',\n  // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_INCOMPATIBLE_CODECS_ERROR: 'manifestIncompatibleCodecsError',\n  // Identifier for playlist load error - data: { url : faulty URL, response : XHR response}\n  LEVEL_LOAD_ERROR: 'levelLoadError',\n  // Identifier for playlist load timeout - data: { url : faulty URL, response : XHR response}\n  LEVEL_LOAD_TIMEOUT: 'levelLoadTimeOut',\n  // Identifier for a level switch error - data: { level : faulty level Id, event : error description}\n  LEVEL_SWITCH_ERROR: 'levelSwitchError',\n  // Identifier for fragment load error - data: { frag : fragment object, response : XHR response}\n  FRAG_LOAD_ERROR: 'fragLoadError',\n  // Identifier for fragment loop loading error - data: { frag : fragment object}\n  FRAG_LOOP_LOADING_ERROR: 'fragLoopLoadingError',\n  // Identifier for fragment load timeout error - data: { frag : fragment object}\n  FRAG_LOAD_TIMEOUT: 'fragLoadTimeOut',\n  // Identifier for a fragment decryption error event - data: parsing error description\n  FRAG_DECRYPT_ERROR: 'fragDecryptError',\n  // Identifier for a fragment parsing error event - data: parsing error description\n  FRAG_PARSING_ERROR: 'fragParsingError',\n  // Identifier for decrypt key load error - data: { frag : fragment object, response : XHR response}\n  KEY_LOAD_ERROR: 'keyLoadError',\n  // Identifier for decrypt key load timeout error - data: { frag : fragment object}\n  KEY_LOAD_TIMEOUT: 'keyLoadTimeOut',\n  // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : {  err : exception , mimeType : mimeType }\n  BUFFER_ADD_CODEC_ERROR: 'bufferAddCodecError',\n  // Identifier for a buffer append error - data: append error description\n  BUFFER_APPEND_ERROR: 'bufferAppendError',\n  // Identifier for a buffer appending error event - data: appending error description\n  BUFFER_APPENDING_ERROR: 'bufferAppendingError',\n  // Identifier for a buffer stalled error event\n  BUFFER_STALLED_ERROR: 'bufferStalledError',\n  // Identifier for a buffer full event\n  BUFFER_FULL_ERROR: 'bufferFullError',\n  // Identifier for a buffer seek over hole event\n  BUFFER_SEEK_OVER_HOLE: 'bufferSeekOverHole',\n  // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)\n  BUFFER_NUDGE_ON_STALL: 'bufferNudgeOnStall',\n  // Identifier for an internal exception happening inside hls.js while handling an event\n  INTERNAL_EXCEPTION: 'internalException'\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nnll objects in the event handling chain should inherit from this class\nnn\nvar _logger = require('./utils/logger');\n\nvar _errors = require('./errors');\n\nvar _events = require('./events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EventHandler = function () {\n  function EventHandler(hls) {\n    _classCallCheck(this, EventHandler);\n\n    this.hls = hls;\n    this.onEvent = this.onEvent.bind(this);\n\n    for (var _len = arguments.length, events = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      events[_key - 1] = arguments[_key];\n    }\n\n    this.handledEvents = events;\n    this.useGenericHandler = true;\n\n    this.registerListeners();\n  }\n\n  _createClass(EventHandler, [{\n    key: 'destroy',\n    value: function destroy() {\n      this.unregisterListeners();\n    }\n  }, {\n    key: 'isEventHandler',\n    value: function isEventHandler() {\n      return _typeof(this.handledEvents) === 'object' && this.handledEvents.length && typeof this.onEvent === 'function';\n    }\n  }, {\n    key: 'registerListeners',\n    value: function registerListeners() {\n      if (this.isEventHandler()) {\n        this.handledEvents.forEach(function (event) {\n          if (event === 'hlsEventGeneric') {\n            throw new Error('Forbidden event name: ' + event);\n          }\n          this.hls.on(event, this.onEvent);\n        }.bind(this));\n      }\n    }\n  }, {\n    key: 'unregisterListeners',\n    value: function unregisterListeners() {\n      if (this.isEventHandler()) {\n        this.handledEvents.forEach(function (event) {\n          this.hls.off(event, this.onEvent);\n        }.bind(this));\n      }\n    }\n\n    /**\n     * arguments: event (string), data (any)\n     */\n\n  }, {\n    key: 'onEvent',\n    value: function onEvent(event, data) {\n      this.onEventGeneric(event, data);\n    }\n  }, {\n    key: 'onEventGeneric',\n    value: function onEventGeneric(event, data) {\n      var eventToFunction = function eventToFunction(event, data) {\n        var funcName = 'on' + event.replace('hls', '');\n        if (typeof this[funcName] !== 'function') {\n          throw new Error('Event ' + event + ' has no generic handler in this ' + this.constructor.name + ' class (tried ' + funcName + ')');\n        }\n        return this[funcName].bind(this, data);\n      };\n      try {\n        eventToFunction.call(this, event, data).call();\n      } catch (err) {\n        _logger.logger.error('internal error happened while processing ' + event + ':' + err.message);\n        this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.OTHER_ERROR, details: _errors.ErrorDetails.INTERNAL_EXCEPTION, fatal: false, event: event, err: err });\n      }\n    }\n  }]);\n\n  return EventHandler;\n}();\n\nexports.default = EventHandler;","'use strict';\n\nmodule.exports = {\n  // fired by api when new player instance created - data: { instance }\n  PLAYER_CREATED: 'hlsPlayerCreated',\n  // fired by api when player instance gets destroyed - data: { instance }\n  PLAYER_DESTROYED: 'hlsPlayerDestroyed',\n  // fired before MediaSource is attaching to media element - data: { media }\n  MEDIA_ATTACHING: 'hlsMediaAttaching',\n  // fired when MediaSource has been succesfully attached to media element - data: { }\n  MEDIA_ATTACHED: 'hlsMediaAttached',\n  // fired before detaching MediaSource from media element - data: { }\n  MEDIA_DETACHING: 'hlsMediaDetaching',\n  // fired when MediaSource has been detached from media element - data: { }\n  MEDIA_DETACHED: 'hlsMediaDetached',\n  // fired when we buffer is going to be resetted\n  BUFFER_RESET: 'hlsBufferReset',\n  // fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}\n  BUFFER_CODECS: 'hlsBufferCodecs',\n  // fired when we append a segment to the buffer - data: { segment: segment object }\n  BUFFER_APPENDING: 'hlsBufferAppending',\n  // fired when the stream is finished and we want to notify the media buffer that there will be no more data\n  BUFFER_EOS: 'hlsBufferEos',\n  // fired when the media buffer should be flushed - data {startOffset, endOffset}\n  BUFFER_FLUSHING: 'hlsBufferFlushing',\n  // fired when the media has been flushed\n  BUFFER_FLUSHED: 'hlsBufferFlushed',\n  // fired to signal that a manifest loading starts - data: { url : manifestURL}\n  MANIFEST_LOADING: 'hlsManifestLoading',\n  // fired after manifest has been loaded - data: { levels : [available quality levels] , url : manifestURL, stats : { trequest, tfirst, tload, mtime}}\n  MANIFEST_LOADED: 'hlsManifestLoaded',\n  // fired after manifest has been parsed - data: { levels : [available quality levels] , firstLevel : index of first quality level appearing in Manifest}\n  MANIFEST_PARSED: 'hlsManifestParsed',\n  // fired when a level playlist loading starts - data: { url : level URL  level : id of level being loaded}\n  LEVEL_LOADING: 'hlsLevelLoading',\n  // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : { trequest, tfirst, tload, mtime} }\n  LEVEL_LOADED: 'hlsLevelLoaded',\n  // fired when a level's details have been updated based on previous details, after it has been loaded. - data: { details : levelDetails object, level : id of updated level }\n  LEVEL_UPDATED: 'hlsLevelUpdated',\n  // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }\n  LEVEL_PTS_UPDATED: 'hlsLevelPtsUpdated',\n  // fired when a level switch is requested - data: { level : id of new level }\n  LEVEL_SWITCH: 'hlsLevelSwitch',\n  // fired when a fragment loading starts - data: { frag : fragment object}\n  FRAG_LOADING: 'hlsFragLoading',\n  // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded}}\n  FRAG_LOAD_PROGRESS: 'hlsFragLoadProgress',\n  // Identifier for fragment load aborting for emergency switch down - data: {frag : fragment object}\n  FRAG_LOAD_EMERGENCY_ABORTED: 'hlsFragLoadEmergencyAborted',\n  // fired when a fragment chunk loading is completed - data: { frag : fragment object, payload : fragment payload}\n  FRAG_CHUNK_LOADED: 'hlsFragChunkLoaded',\n  // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : { trequest, tfirst, tload, length}}\n  FRAG_LOADED: 'hlsFragLoaded',\n  // fired when Init Segment has been extracted from fragment - data: { moov : moov MP4 box, codecs : codecs found while parsing fragment}\n  FRAG_PARSING_INIT_SEGMENT: 'hlsFragParsingInitSegment',\n  // fired when parsing sei text is completed - data: { samples : [ sei samples pes ] }\n  FRAG_PARSING_USERDATA: 'hlsFragParsingUserdata',\n  // fired when parsing id3 is completed - data: { samples : [ id3 samples pes ] }\n  FRAG_PARSING_METADATA: 'hlsFragParsingMetadata',\n  // fired when data have been extracted from fragment - data: { data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}\n  FRAG_PARSING_DATA: 'hlsFragParsingData',\n  // fired when fragment parsing is completed - data: undefined\n  FRAG_PARSED: 'hlsFragParsed',\n  // fired when there are skipped frames in the beginning of frag\n  FRAG_STATISTICS: 'hlsFragStatistics',\n  // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { frag : fragment object, stats : { trequest, tfirst, tload, tparsed, tbuffered, length} }\n  FRAG_BUFFERED: 'hlsFragBuffered',\n  // fired when fragment matching with current media position is changing - data : { frag : fragment object }\n  FRAG_CHANGED: 'hlsFragChanged',\n  // fired when fragment chunks passed to media buffer\n  FRAG_APPENDING: 'hlsFragAppending',\n  // fired when fragment appended to media buffer\n  FRAG_APPENDED: 'hlsFragAppended',\n  // Identifier for a FPS drop event - data: {curentDropped, currentDecoded, totalDroppedFrames}\n  FPS_DROP: 'hlsFpsDrop',\n  //triggered when FPS drop triggers auto level capping - data: {level, droppedlevel}\n  FPS_DROP_LEVEL_CAPPING: 'hlsFpsDropLevelCapping',\n  // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data}\n  ERROR: 'hlsError',\n  // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example\n  DESTROYING: 'hlsDestroying',\n  // fired when a decrypt key loading starts - data: { frag : fragment object}\n  KEY_LOADING: 'hlsKeyLoading',\n  // fired when a decrypt key loading is completed - data: { frag : fragment object, payload : key payload, stats : { trequest, tfirst, tload, length}}\n  KEY_LOADED: 'hlsKeyLoaded',\n  // fired upon stream controller state transitions - data: {previousState, nextState}\n  STREAM_STATE_TRANSITION: 'hlsStreamStateTransition',\n  DEMUXER_QUEUE_EMPTY: 'hlsDemuxerQueueEmpty',\n  // fired when playback is stalled on low/high buffer\n  BUF_STATISTICS: 'hlsBufStatistics'\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n *  AAC helper\n */\n\nvar AAC = function () {\n  function AAC() {\n    _classCallCheck(this, AAC);\n  }\n\n  _createClass(AAC, null, [{\n    key: \"getSilentFrame\",\n    value: function getSilentFrame(channelCount) {\n      if (channelCount === 1) {\n        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n      } else if (channelCount === 2) {\n        return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n      } else if (channelCount === 3) {\n        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n      } else if (channelCount === 4) {\n        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n      } else if (channelCount === 5) {\n        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n      } else if (channelCount === 6) {\n        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n      }\n      return null;\n    }\n  }]);\n\n  return AAC;\n}();\n\nexports.default = AAC;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Buffer Helper class, providing methods dealing buffer length retrieval\n*/\n\nvar BufferHelper = function () {\n  function BufferHelper() {\n    _classCallCheck(this, BufferHelper);\n  }\n\n  _createClass(BufferHelper, null, [{\n    key: \"isBuffered\",\n    value: function isBuffered(media, position) {\n      if (media) {\n        var buffered = media.buffered;\n        for (var i = 0; i < buffered.length; i++) {\n          if (position >= buffered.start(i) && position <= buffered.end(i)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"bufferInfo\",\n    value: function bufferInfo(media, pos, maxHoleDuration) {\n      if (media) {\n        var vbuffered = media.buffered,\n            buffered = [],\n            i;\n        for (i = 0; i < vbuffered.length; i++) {\n          buffered.push({ start: vbuffered.start(i), end: vbuffered.end(i) });\n        }\n        return this.bufferedInfo(buffered, pos, maxHoleDuration);\n      } else {\n        return { len: 0, start: 0, end: 0, nextStart: undefined };\n      }\n    }\n  }, {\n    key: \"bufferedInfo\",\n    value: function bufferedInfo(buffered, pos, maxHoleDuration) {\n      var buffered2 = [],\n\n      // bufferStart and bufferEnd are buffer boundaries around current video position\n      bufferLen,\n          bufferStart,\n          bufferEnd,\n          bufferStartNext,\n          i;\n      // sort on buffer.start/smaller end (IE does not always return sorted buffered range)\n      buffered.sort(function (a, b) {\n        var diff = a.start - b.start;\n        if (diff) {\n          return diff;\n        } else {\n          return b.end - a.end;\n        }\n      });\n      // there might be some small holes between buffer time range\n      // consider that holes smaller than maxHoleDuration are irrelevant and build another\n      // buffer time range representations that discards those holes\n      for (i = 0; i < buffered.length; i++) {\n        var buf2len = buffered2.length;\n        if (buf2len) {\n          var buf2end = buffered2[buf2len - 1].end;\n          // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)\n          if (buffered[i].start - buf2end < maxHoleDuration) {\n            // merge overlapping time ranges\n            // update lastRange.end only if smaller than item.end\n            // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)\n            // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])\n            if (buffered[i].end > buf2end) {\n              buffered2[buf2len - 1].end = buffered[i].end;\n            }\n          } else {\n            // big hole\n            buffered2.push(buffered[i]);\n          }\n        } else {\n          // first value\n          buffered2.push(buffered[i]);\n        }\n      }\n      for (i = 0, bufferLen = 0, bufferStart = bufferEnd = pos; i < buffered2.length; i++) {\n        var start = buffered2[i].start,\n            end = buffered2[i].end;\n        //logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));\n        if (pos + maxHoleDuration >= start && pos < end) {\n          // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length\n          bufferStart = start;\n          bufferEnd = end;\n          bufferLen = bufferEnd - pos;\n        } else if (pos + maxHoleDuration < start) {\n          bufferStartNext = start;\n          break;\n        }\n      }\n      return { len: bufferLen, start: bufferStart, end: bufferEnd, nextStart: bufferStartNext };\n    }\n  }]);\n\n  return BufferHelper;\n}();\n\nexports.default = BufferHelper;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nevel Helper class, providing methods dealing with playlist sliding and drift\nn\nvar _logger = require('../utils/logger');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LevelHelper = function () {\n  function LevelHelper() {\n    _classCallCheck(this, LevelHelper);\n  }\n\n  _createClass(LevelHelper, null, [{\n    key: 'isLive',\n    value: function isLive(level, levels) {\n      return !!(level !== undefined && levels && levels[level] && levels[level].details && levels[level].details.live);\n    }\n  }, {\n    key: 'canMerge',\n    value: function canMerge(oldDetails, newDetails) {\n      var _LevelHelper$probeDet = LevelHelper.probeDetails(oldDetails, newDetails),\n          start = _LevelHelper$probeDet.start,\n          end = _LevelHelper$probeDet.end;\n\n      return end >= start;\n    }\n  }, {\n    key: 'probeDetails',\n    value: function probeDetails(oldDetails, newDetails) {\n      function getTimes(details) {\n        var startTS = 0,\n            endTS = 0,\n            i = 0;\n        for (; i < details.fragments.length; i++) {\n          if (details.fragments[i].programDateTime) {\n            break;\n          }\n        }\n        if (i !== details.fragments.length) {\n          startTS = endTS = details.fragments[i].programDateTime.getTime();\n          for (var j = 0; j < details.fragments.length - 1; j++) {\n            if (j < i) {\n              startTS -= details.fragments[j].duration * 1000;\n            } else {\n              endTS += details.fragments[j].duration * 1000;\n            }\n          }\n          return { start: startTS, end: endTS };\n        }\n      }\n      var start = Math.max(oldDetails.startSN, newDetails.startSN) - newDetails.startSN;\n      var end = Math.min(oldDetails.endSN, newDetails.endSN) - newDetails.startSN;\n      var delta = newDetails.startSN - oldDetails.startSN;\n      if (end >= start) {\n        return { start: start, end: end, delta: delta };\n      }\n      var oldTimes = getTimes(oldDetails),\n          newTimes = getTimes(newDetails);\n      if (oldTimes && newTimes && oldTimes.start <= newTimes.start && oldTimes.end >= newTimes.start) {\n        start = delta = 0;\n        end = Math.min(newDetails.fragments.length, oldDetails.fragments.length) - 1;\n        var ts = oldTimes.start;\n        // 0.1 sec grace\n        while (newTimes.start - ts > 100) {\n          ts += oldDetails.fragments[delta++].duration * 1000;\n          end--;\n        }\n        return { start: start, end: end, delta: delta };\n      }\n      return { start: 1, end: 0, delta: 0 };\n    }\n  }, {\n    key: 'mergeDetails',\n    value: function mergeDetails(oldDetails, newDetails) {\n      var oldfragments = oldDetails.fragments,\n          newfragments = newDetails.fragments,\n          ccOffset = 0,\n          PTSFrag;\n\n      var _LevelHelper$probeDet2 = LevelHelper.probeDetails(oldDetails, newDetails),\n          start = _LevelHelper$probeDet2.start,\n          end = _LevelHelper$probeDet2.end,\n          delta = _LevelHelper$probeDet2.delta;\n\n      // check if old/new playlists have fragments in common\n\n\n      if (end < start) {\n        newDetails.PTSKnown = false;\n        return;\n      }\n      // loop through overlapping SN and update startPTS , cc, and duration if any found\n      for (var i = start; i <= end; i++) {\n        var oldFrag = oldfragments[delta + i],\n            newFrag = newfragments[i];\n        ccOffset = oldFrag.cc - newFrag.cc;\n        if (!isNaN(oldFrag.startPTS)) {\n          newFrag.start = newFrag.startPTS = oldFrag.startPTS;\n          newFrag.endPTS = oldFrag.endPTS;\n          newFrag.duration = oldFrag.duration;\n          newFrag.PTSDTSshift = oldFrag.PTSDTSshift;\n          newFrag.lastGop = oldFrag.lastGop;\n          PTSFrag = newFrag;\n        }\n        if (oldFrag.firstGop) {\n          newFrag.firstGop = oldFrag.firstGop;\n        }\n      }\n\n      if (ccOffset) {\n        _logger.logger.log('discontinuity sliding from playlist, take drift into account');\n        for (i = 0; i < newfragments.length; i++) {\n          newfragments[i].cc += ccOffset;\n        }\n      }\n\n      // if at least one fragment contains PTS info, recompute PTS information for all fragments\n      if (PTSFrag) {\n        LevelHelper.updateFragPTS(newDetails, PTSFrag.sn, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.PTSDTSshift || 0, PTSFrag.lastGop);\n      } else {\n        // ensure that delta is within oldfragments range\n        // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])\n        // in that case we also need to adjust start offset of all fragments\n        if (delta >= 0 && delta < oldfragments.length) {\n          // adjust start by sliding offset\n          var sliding = oldfragments[delta].start;\n          for (i = 0; i < newfragments.length; i++) {\n            newfragments[i].start += sliding;\n          }\n        }\n      }\n      // if we are here, it means we have fragments overlapping between\n      // old and new level. reliable PTS info is thus relying on old level\n      newDetails.PTSKnown = oldDetails.PTSKnown;\n      return;\n    }\n  }, {\n    key: 'updateFragPTS',\n    value: function updateFragPTS(details, sn, startPTS, endPTS, PTSDTSshift, lastGop) {\n      var fragIdx, fragments, frag, i;\n      // exit if sn out of range\n      if (sn < details.startSN || sn > details.endSN) {\n        return 0;\n      }\n      fragIdx = sn - details.startSN;\n      fragments = details.fragments;\n      frag = fragments[fragIdx];\n      if (!isNaN(frag.startPTS)) {\n        startPTS = Math.min(startPTS, frag.startPTS);\n        endPTS = Math.max(endPTS, frag.endPTS);\n      }\n\n      var drift = startPTS - frag.start;\n\n      frag.start = frag.startPTS = startPTS;\n      frag.endPTS = endPTS;\n      frag.duration = endPTS - startPTS;\n      frag.PTSDTSshift = PTSDTSshift || 0;\n      if (lastGop) {\n        frag.lastGop = lastGop;\n      }\n\n      // adjust fragment PTS/duration from seqnum-1 to frag 0\n      for (i = fragIdx; i > 0; i--) {\n        LevelHelper.updatePTS(fragments, i, i - 1);\n      }\n\n      // adjust fragment PTS/duration from seqnum to last frag\n      for (i = fragIdx; i < fragments.length - 1; i++) {\n        LevelHelper.updatePTS(fragments, i, i + 1);\n      }\n      details.PTSKnown = true;\n      //logger.log(`                                            frag start/end:${startPTS.toFixed(3)}/${endPTS.toFixed(3)}`);\n\n      return drift;\n    }\n  }, {\n    key: 'updatePTS',\n    value: function updatePTS(fragments, fromIdx, toIdx) {\n      var fragFrom = fragments[fromIdx],\n          fragTo = fragments[toIdx],\n          fragToPTS = fragTo.startPTS;\n      // if we know startPTS[toIdx]\n      if (!isNaN(fragToPTS)) {\n        // update fragment duration.\n        // it helps to fix drifts between playlist reported duration and fragment real duration\n        if (toIdx > fromIdx) {\n          fragFrom.duration = fragToPTS - fragFrom.start;\n          if (fragFrom.duration < 0) {\n            _logger.logger.warn('negative duration computed for frag ' + fragFrom.sn + ',level ' + fragFrom.level + ', there should be some duration drift between playlist and fragment!');\n          }\n        } else {\n          fragTo.duration = fragFrom.start - fragToPTS;\n          if (fragTo.duration < 0) {\n            _logger.logger.warn('negative duration computed for frag ' + fragTo.sn + ',level ' + fragTo.level + ', there should be some duration drift between playlist and fragment!');\n          }\n        }\n      } else {\n        // we dont know startPTS[toIdx]\n        if (toIdx > fromIdx) {\n          fragTo.start = fragFrom.start + fragFrom.duration;\n        } else {\n          fragTo.start = fragFrom.start - fragTo.duration;\n        }\n      }\n      if (toIdx > fromIdx) {\n        if (!fragTo.PTSDTSshift) {\n          fragTo.PTSDTSshift = fragFrom.PTSDTSshift || 0;\n        }\n        if (fragFrom.lastGop) {\n          fragTo.firstGop = fragFrom.lastGop;\n        }\n      }\n    }\n  }]);\n\n  return LevelHelper;\n}();\n\nexports.default = LevelHelper;","/**\n * HLS interface\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('./events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _errors = require('./errors');\n\nvar _playlistLoader = require('./loader/playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar _fragmentLoader = require('./loader/fragment-loader');\n\nvar _fragmentLoader2 = _interopRequireDefault(_fragmentLoader);\n\nvar _abrController = require('./controller/abr-controller');\n\nvar _abrController2 = _interopRequireDefault(_abrController);\n\nvar _bufferController = require('./controller/buffer-controller');\n\nvar _bufferController2 = _interopRequireDefault(_bufferController);\n\nvar _capLevelController = require('./controller/cap-level-controller');\n\nvar _capLevelController2 = _interopRequireDefault(_capLevelController);\n\nvar _streamController = require('./controller/stream-controller');\n\nvar _streamController2 = _interopRequireDefault(_streamController);\n\nvar _levelController = require('./controller/level-controller');\n\nvar _levelController2 = _interopRequireDefault(_levelController);\n\nvar _timelineController = require('./controller/timeline-controller');\n\nvar _timelineController2 = _interopRequireDefault(_timelineController);\n\nvar _fpsController = require('./controller/fps-controller');\n\nvar _fpsController2 = _interopRequireDefault(_fpsController);\n\nvar _logger = require('./utils/logger');\n\nvar _xhrLoader = require('./utils/xhr-loader');\n\nvar _xhrLoader2 = _interopRequireDefault(_xhrLoader);\n\nvar _events3 = require('events');\n\nvar _events4 = _interopRequireDefault(_events3);\n\nvar _keyLoader = require('./loader/key-loader');\n\nvar _keyLoader2 = _interopRequireDefault(_keyLoader);\n\nvar _cues = require('./utils/cues');\n\nvar _cues2 = _interopRequireDefault(_cues);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Hls = function () {\n  _createClass(Hls, null, [{\n    key: 'isSupported',\n    value: function isSupported() {\n      // Opera Mini for Android with enabled optimizations breaks m3u8 files\n      function isOperaMini() {\n        var checkOpera = /\\bOPR\\b\\/(\\d+)/i;\n        var checkChrome = / Chrome\\/(\\d+)(\\.\\d+)+.* Safari\\/\\d+(\\.\\d+)+/;\n        var opera,\n            ua = window.navigator && window.navigator.userAgent;\n        var res = checkChrome.exec(ua);\n        if (res) {\n          opera = checkOpera.exec(ua);\n          return ua.match(/Android/) && (opera ? opera[1] : undefined) < 25;\n        }\n        return false;\n      }\n      if (isOperaMini()) {\n        return false;\n      }\n\n      return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n    }\n  }, {\n    key: 'isIe',\n    value: function isIe() {\n      var res = void 0,\n          ua = typeof window !== 'undefined' && window.navigator && navigator.userAgent;\n      if (res = /[( ]MSIE ([6789]|10).\\d[);]/.exec(ua)) {\n        return { browser: 'ie', version: res[1] };\n      }\n      if (res = /[( ]Trident\\/\\d+(\\.\\d)+.*rv:(\\d\\d)(\\.\\d)+[);]/.exec(ua)) {\n        return { browser: 'ie', version: res[2] };\n      }\n    }\n  }, {\n    key: 'version',\n    get: function get() {\n      // replaced with browserify-versionify transform\n      return '0.6.1-135';\n    }\n  }, {\n    key: 'Events',\n    get: function get() {\n      return _events2.default;\n    }\n  }, {\n    key: 'ErrorTypes',\n    get: function get() {\n      return _errors.ErrorTypes;\n    }\n  }, {\n    key: 'ErrorDetails',\n    get: function get() {\n      return _errors.ErrorDetails;\n    }\n  }, {\n    key: 'DefaultConfig',\n    get: function get() {\n      if (!Hls.defaultConfig) {\n        Hls.defaultConfig = {\n          autoStartLoad: true,\n          debug: false,\n          capLevelOnFPSDrop: false,\n          capLevelToPlayerSize: false,\n          maxBufferLength: 40,\n          maxBufferSize: 60 * 1000 * 1000,\n          maxBufferHole: 0.5,\n          maxSeekHole: 2,\n          lowBufferWatchdogPeriod: 0,\n          highBufferWatchdogPeriod: 3,\n          nudgeOffset: 0.1,\n          nudgeMaxRetry: 5,\n          maxFragLookUpTolerance: 0.2,\n          liveSyncDurationCount: 3,\n          liveMaxLatencyDurationCount: Infinity,\n          liveSyncDuration: undefined,\n          liveMaxLatencyDuration: undefined,\n          maxMaxBufferLength: 40,\n          enableWorker: !Hls.isIe(),\n          enableSoftwareAES: true,\n          manifestLoadingTimeOut: 20000,\n          manifestLoadingMaxRetry: 4,\n          manifestLoadingRetryDelay: 1000,\n          levelLoadingTimeOut: 20000,\n          levelLoadingMaxRetry: 4,\n          levelLoadingRetryDelay: 1000,\n          fragLoadingTimeOut: 20000,\n          fragLoadingMaxRetry: 6,\n          fragLoadingRetryDelay: 1000,\n          fragLoadingLoopThreshold: 1000,\n          clearLevelDetailsOnSwitching: false,\n          startFragPrefetch: false,\n          fpsDroppedMonitoringPeriod: 5000,\n          fpsDroppedMonitoringThreshold: 0.2,\n          appendErrorMaxRetry: 3,\n          loader: _xhrLoader2.default,\n          fLoader: undefined,\n          pLoader: undefined,\n          abrController: _abrController2.default,\n          bufferController: _bufferController2.default,\n          capLevelController: _capLevelController2.default,\n          fpsController: _fpsController2.default,\n          streamController: _streamController2.default,\n          timelineController: _timelineController2.default,\n          cueHandler: _cues2.default,\n          enableCEA708Captions: true,\n          enableMP2TPassThrough: false,\n          stretchShortVideoTrack: false\n        };\n      }\n      return Hls.defaultConfig;\n    },\n    set: function set(defaultConfig) {\n      Hls.defaultConfig = defaultConfig;\n    }\n  }]);\n\n  function Hls() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Hls);\n\n    var defaultConfig = Hls.DefaultConfig;\n\n    if ((config.liveSyncDurationCount || config.liveMaxLatencyDurationCount) && (config.liveSyncDuration || config.liveMaxLatencyDuration)) {\n      throw new Error('Illegal hls.js config: don\\'t mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration');\n    }\n\n    for (var prop in defaultConfig) {\n      if (prop in config) {\n        continue;\n      }\n      config[prop] = defaultConfig[prop];\n    }\n\n    if (config.liveMaxLatencyDurationCount !== undefined && config.liveMaxLatencyDurationCount <= config.liveSyncDurationCount) {\n      throw new Error('Illegal hls.js config: \"liveMaxLatencyDurationCount\" must be gt \"liveSyncDurationCount\"');\n    }\n\n    if (config.liveMaxLatencyDuration !== undefined && (config.liveMaxLatencyDuration <= config.liveSyncDuration || config.liveSyncDuration === undefined)) {\n      throw new Error('Illegal hls.js config: \"liveMaxLatencyDuration\" must be gt \"liveSyncDuration\"');\n    }\n\n    (0, _logger.enableLogs)(config.debug, this);\n    this.config = config;\n    // observer setup\n    var observer = this.observer = new _events4.default();\n    observer.trigger = function trigger(event) {\n      for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        data[_key - 1] = arguments[_key];\n      }\n\n      observer.emit.apply(observer, [event, event].concat(data));\n    };\n\n    observer.off = function off(event) {\n      for (var _len2 = arguments.length, data = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        data[_key2 - 1] = arguments[_key2];\n      }\n\n      observer.removeListener.apply(observer, [event].concat(data));\n    };\n    this.on = observer.on.bind(observer);\n    this.off = observer.off.bind(observer);\n    this.trigger = observer.trigger.bind(observer);\n    this.playlistLoader = new _playlistLoader2.default(this);\n    this.fragmentLoader = new _fragmentLoader2.default(this);\n    this.levelController = new _levelController2.default(this);\n    this.abrController = new config.abrController(this);\n    this.bufferController = new config.bufferController(this);\n    this.capLevelController = new config.capLevelController(this);\n    this.fpsController = new config.fpsController(this);\n    this.streamController = new config.streamController(this);\n    this.timelineController = new config.timelineController(this);\n    this.keyLoader = new _keyLoader2.default(this);\n    Hls.api.players.push(this);\n    Hls.api.emit(_events2.default.PLAYER_CREATED, this);\n  }\n\n  _createClass(Hls, [{\n    key: 'destroy',\n    value: function destroy() {\n      _logger.logger.log('destroy');\n      this.trigger(_events2.default.DESTROYING);\n      this.detachMedia();\n      this.playlistLoader.destroy();\n      this.fragmentLoader.destroy();\n      this.levelController.destroy();\n      this.abrController.destroy();\n      this.bufferController.destroy();\n      this.capLevelController.destroy();\n      this.fpsController.destroy();\n      this.streamController.destroy();\n      this.timelineController.destroy();\n      this.keyLoader.destroy();\n      this.url = null;\n      this.observer.removeAllListeners();\n      var globalId = Hls.api.players.indexOf(this);\n      if (globalId < 0) {\n        return;\n      }\n      Hls.api.players.splice(globalId, 1);\n      Hls.api.emit(_events2.default.PLAYER_DESTROYED, this);\n    }\n  }, {\n    key: 'attachMedia',\n    value: function attachMedia(media) {\n      _logger.logger.log('attachMedia');\n      this.media = media;\n      this.trigger(_events2.default.MEDIA_ATTACHING, { media: media });\n    }\n  }, {\n    key: 'detachMedia',\n    value: function detachMedia() {\n      _logger.logger.log('detachMedia');\n      this.trigger(_events2.default.MEDIA_DETACHING);\n      this.media = null;\n    }\n  }, {\n    key: 'loadSource',\n    value: function loadSource(url) {\n      _logger.logger.log('loadSource:' + url);\n      this.url = url;\n      // when attaching to a source URL, trigger a playlist load\n      this.trigger(_events2.default.MANIFEST_LOADING, { url: url });\n    }\n  }, {\n    key: 'startLoad',\n    value: function startLoad() {\n      var startPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      _logger.logger.log('startLoad(' + startPosition + ')');\n      this.levelController.startLoad();\n      this.streamController.startLoad(startPosition);\n    }\n  }, {\n    key: 'stopLoad',\n    value: function stopLoad(stopDemuxer) {\n      _logger.logger.log('stopLoad');\n      this.levelController.stopLoad();\n      this.streamController.stopLoad(stopDemuxer);\n    }\n  }, {\n    key: 'clearLevelDetails',\n    value: function clearLevelDetails() {\n      _logger.logger.log('clearing level details');\n      this.levelController.clearLevelDetails();\n    }\n  }, {\n    key: 'swapAudioCodec',\n    value: function swapAudioCodec() {\n      _logger.logger.log('swapAudioCodec');\n      this.streamController.swapAudioCodec();\n    }\n  }, {\n    key: 'recoverMediaError',\n    value: function recoverMediaError() {\n      _logger.logger.log('recoverMediaError');\n      var media = this.media;\n      this.detachMedia();\n      this.attachMedia(media);\n    }\n\n    /** Return all quality levels **/\n\n  }, {\n    key: 'setLogs',\n    value: function setLogs(debug) {\n      (0, _logger.enableLogs)(debug, this);\n    }\n  }, {\n    key: 'levels',\n    get: function get() {\n      return this.levelController.levels;\n    }\n\n    /** Return current playback quality level **/\n\n  }, {\n    key: 'currentLevel',\n    get: function get() {\n      return this.streamController.currentLevel;\n    }\n\n    /* set quality level immediately (-1 for automatic level selection) */\n    ,\n    set: function set(newLevel) {\n      _logger.logger.log('set currentLevel:' + newLevel);\n      this.loadLevel = newLevel;\n      this.streamController.immediateLevelSwitch();\n    }\n\n    /** Return next playback quality level (quality level of next fragment) **/\n\n  }, {\n    key: 'nextLevel',\n    get: function get() {\n      return this.streamController.nextLevel;\n    }\n\n    /* set quality level for next fragment (-1 for automatic level selection) */\n    ,\n    set: function set(newLevel) {\n      _logger.logger.log('set nextLevel:' + newLevel);\n      this.levelController.manualLevel = newLevel;\n      this.streamController.nextLevelSwitch();\n    }\n\n    /** Return the quality level of current/last loaded fragment **/\n\n  }, {\n    key: 'loadLevel',\n    get: function get() {\n      return this.levelController.level;\n    }\n\n    /* set quality level for current/next loaded fragment (-1 for automatic level selection) */\n    ,\n    set: function set(newLevel) {\n      _logger.logger.log('set loadLevel:' + newLevel);\n      this.levelController.manualLevel = newLevel;\n    }\n\n    /** Return the quality level of next loaded fragment **/\n\n  }, {\n    key: 'nextLoadLevel',\n    get: function get() {\n      return this.levelController.nextLoadLevel;\n    }\n\n    /** set quality level of next loaded fragment **/\n    ,\n    set: function set(level) {\n      this.levelController.nextLoadLevel = level;\n    }\n\n    /** Return first level (index of first level referenced in manifest)\n    **/\n\n  }, {\n    key: 'firstLevel',\n    get: function get() {\n      return this.levelController.firstLevel;\n    }\n\n    /** set first level (index of first level referenced in manifest)\n    **/\n    ,\n    set: function set(newLevel) {\n      _logger.logger.log('set firstLevel:' + newLevel);\n      this.levelController.firstLevel = newLevel;\n    }\n\n    /** Return start level (level of first fragment that will be played back)\n        if not overrided by user, first level appearing in manifest will be used as start level\n        if -1 : automatic start level selection, playback will start from level matching download bandwidth (determined from download of first segment)\n    **/\n\n  }, {\n    key: 'startLevel',\n    get: function get() {\n      return this.levelController.startLevel;\n    }\n\n    /** set  start level (level of first fragment that will be played back)\n        if not overrided by user, first level appearing in manifest will be used as start level\n        if -1 : automatic start level selection, playback will start from level matching download bandwidth (determined from download of first segment)\n    **/\n    ,\n    set: function set(newLevel) {\n      _logger.logger.log('set startLevel:' + newLevel);\n      this.levelController.startLevel = newLevel;\n    }\n\n    /** Return the capping/max level value that could be used by automatic level selection algorithm **/\n\n  }, {\n    key: 'autoLevelCapping',\n    get: function get() {\n      return this.abrController.autoLevelCapping;\n    }\n\n    /** set the capping/max level value that could be used by automatic level selection algorithm **/\n    ,\n    set: function set(newLevel) {\n      _logger.logger.log('set autoLevelCapping:' + newLevel);\n      this.abrController.autoLevelCapping = newLevel;\n    }\n\n    /* check if we are in automatic level selection mode */\n\n  }, {\n    key: 'autoLevelEnabled',\n    get: function get() {\n      return this.levelController.manualLevel === -1;\n    }\n\n    /* return manual level */\n\n  }, {\n    key: 'manualLevel',\n    get: function get() {\n      return this.levelController.manualLevel;\n    }\n  }]);\n\n  return Hls;\n}();\n\nHls.api = new _events4.default();\nHls.api.players = [];\n\nexports.default = Hls;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _eventHandler = require('../event-handler');\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _errors = require('../errors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fragment Loader\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\nvar FragmentLoader = function (_EventHandler) {\n  _inherits(FragmentLoader, _EventHandler);\n\n  function FragmentLoader(hls) {\n    _classCallCheck(this, FragmentLoader);\n\n    return _possibleConstructorReturn(this, (FragmentLoader.__proto__ || Object.getPrototypeOf(FragmentLoader)).call(this, hls, _events2.default.FRAG_LOADING));\n  }\n\n  _createClass(FragmentLoader, [{\n    key: 'destroy',\n    value: function destroy() {\n      if (this.loader) {\n        this.loader.destroy();\n        this.loader = null;\n      }\n      this.firstChunk = true;\n      _eventHandler2.default.prototype.destroy.call(this);\n    }\n  }, {\n    key: 'onFragLoading',\n    value: function onFragLoading(data) {\n      var frag = data.frag;\n      this.frag = frag;\n      this.frag.loaded = 0;\n      this.firstChunk = true;\n      var config = this.hls.config;\n      frag.loader = this.loader = typeof config.fLoader !== 'undefined' ? new config.fLoader(config) : new config.loader(config);\n      this.loader.load(frag.url, 'arraybuffer', this.loadsuccess.bind(this), this.loaderror.bind(this), this.loadtimeout.bind(this), config.fragLoadingTimeOut, 1, 0, this.loadprogress.bind(this), frag, this.loadchunk.bind(this));\n    }\n  }, {\n    key: 'loadchunk',\n    value: function loadchunk(event, stats) {\n      var payload = event.currentTarget.response;\n      payload.first = this.firstChunk;\n      this.firstChunk = false;\n      this.hls.trigger(_events2.default.FRAG_CHUNK_LOADED, { payload: payload, frag: this.frag, stats: stats });\n    }\n  }, {\n    key: 'loadsuccess',\n    value: function loadsuccess(event, stats) {\n      var payload = event.currentTarget.response;\n      payload.final = true;\n      stats.length = payload.byteLength;\n      this.hls.trigger(_events2.default.FRAG_LOADED, { frag: this.frag, stats: stats });\n      // we cannot add new property to xhr response object in IE\n      this.loadchunk({ currentTarget: { response: payload } }, stats);\n      this.firstChunk = true;\n      // detach fragment loader on load success\n      this.frag.loader = undefined;\n    }\n  }, {\n    key: 'loaderror',\n    value: function loaderror(event) {\n      if (this.loader) {\n        this.loader.abort();\n      }\n      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: this.frag, response: event });\n    }\n  }, {\n    key: 'loadtimeout',\n    value: function loadtimeout() {\n      if (this.loader) {\n        this.loader.abort();\n      }\n      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.FRAG_LOAD_TIMEOUT, fatal: false, frag: this.frag });\n    }\n  }, {\n    key: 'loadprogress',\n    value: function loadprogress(stats) {\n      this.frag.loaded = stats.loaded;\n      this.hls.trigger(_events2.default.FRAG_LOAD_PROGRESS, { frag: this.frag, stats: stats });\n    }\n  }]);\n\n  return FragmentLoader;\n}(_eventHandler2.default);\n\nexports.default = FragmentLoader;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _eventHandler = require('../event-handler');\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _errors = require('../errors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Decrypt key Loader\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\nvar KeyLoader = function (_EventHandler) {\n  _inherits(KeyLoader, _EventHandler);\n\n  function KeyLoader(hls) {\n    _classCallCheck(this, KeyLoader);\n\n    var _this = _possibleConstructorReturn(this, (KeyLoader.__proto__ || Object.getPrototypeOf(KeyLoader)).call(this, hls, _events2.default.KEY_LOADING));\n\n    _this.decryptkey = null;\n    _this.decrypturl = null;\n    return _this;\n  }\n\n  _createClass(KeyLoader, [{\n    key: 'destroy',\n    value: function destroy() {\n      if (this.loader) {\n        this.loader.destroy();\n        this.loader = null;\n      }\n      _eventHandler2.default.prototype.destroy.call(this);\n    }\n  }, {\n    key: 'onKeyLoading',\n    value: function onKeyLoading(data) {\n      var frag = this.frag = data.frag,\n          decryptdata = frag.decryptdata,\n          uri = decryptdata.uri;\n      // if uri is different from previous one or if decrypt key not retrieved yet\n      if (uri !== this.decrypturl || this.decryptkey === null) {\n        var config = this.hls.config;\n        frag.loader = this.loader = new config.loader(config);\n        this.decrypturl = uri;\n        this.decryptkey = null;\n        frag.loader.load(uri, 'arraybuffer', this.loadsuccess.bind(this), this.loaderror.bind(this), this.loadtimeout.bind(this), config.fragLoadingTimeOut, config.fragLoadingMaxRetry, config.fragLoadingRetryDelay, this.loadprogress.bind(this), frag);\n      } else if (this.decryptkey) {\n        // we already loaded this key, return it\n        decryptdata.key = this.decryptkey;\n        this.hls.trigger(_events2.default.KEY_LOADED, { frag: frag });\n      }\n    }\n  }, {\n    key: 'loadsuccess',\n    value: function loadsuccess(event) {\n      var frag = this.frag;\n      this.decryptkey = frag.decryptdata.key = new Uint8Array(event.currentTarget.response);\n      // detach fragment loader on load success\n      frag.loader = undefined;\n      this.hls.trigger(_events2.default.KEY_LOADED, { frag: frag });\n    }\n  }, {\n    key: 'loaderror',\n    value: function loaderror(event) {\n      if (this.loader) {\n        this.loader.abort();\n      }\n      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.KEY_LOAD_ERROR, fatal: false, frag: this.frag, response: event.currentTarget });\n    }\n  }, {\n    key: 'loadtimeout',\n    value: function loadtimeout() {\n      if (this.loader) {\n        this.loader.abort();\n      }\n      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.KEY_LOAD_TIMEOUT, fatal: false, frag: this.frag });\n    }\n  }, {\n    key: 'loadprogress',\n    value: function loadprogress() {}\n  }]);\n\n  return KeyLoader;\n}(_eventHandler2.default);\n\nexports.default = KeyLoader;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _eventHandler = require('../event-handler');\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _errors = require('../errors');\n\nvar _url = require('../utils/url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _attrList = require('../utils/attr-list');\n\nvar _attrList2 = _interopRequireDefault(_attrList);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Playlist Loader\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n\n//import {logger} from '../utils/logger';\n\nvar PlaylistLoader = function (_EventHandler) {\n  _inherits(PlaylistLoader, _EventHandler);\n\n  function PlaylistLoader(hls) {\n    _classCallCheck(this, PlaylistLoader);\n\n    return _possibleConstructorReturn(this, (PlaylistLoader.__proto__ || Object.getPrototypeOf(PlaylistLoader)).call(this, hls, _events2.default.MANIFEST_LOADING, _events2.default.LEVEL_LOADING));\n  }\n\n  _createClass(PlaylistLoader, [{\n    key: 'destroy',\n    value: function destroy() {\n      if (this.loader) {\n        this.loader.destroy();\n        this.loader = null;\n      }\n      this.url = this.id = null;\n      _eventHandler2.default.prototype.destroy.call(this);\n    }\n  }, {\n    key: 'onManifestLoading',\n    value: function onManifestLoading(data) {\n      this.load(data.url, null);\n    }\n  }, {\n    key: 'onLevelLoading',\n    value: function onLevelLoading(data) {\n      this.load(data.url, data.level, data.id);\n    }\n  }, {\n    key: 'reloadCurrentRequests',\n    value: function reloadCurrentRequests() {\n      // we only reload manifest requests, level requests will be retried anyway\n      if (this.loading && this.loader && this.id === null) {\n        this.loader.abort();\n        this.loading = false;\n        this.load(this.url, this.id, this.id2);\n      }\n    }\n  }, {\n    key: 'load',\n    value: function load(url, id1, id2) {\n      var config = this.hls.config,\n          retry,\n          timeout,\n          retryDelay;\n\n      if (this.loading && this.loader) {\n        if (this.url === url && this.id === id1 && this.id2 === id2) {\n          // same request than last pending one, don't do anything\n          return;\n        } else {\n          // one playlist load request is pending, but with different params, abort it before loading new playlist\n          this.loader.abort();\n        }\n      }\n\n      this.url = url;\n      this.id = id1;\n      this.id2 = id2;\n      if (this.id === null) {\n        retry = config.manifestLoadingMaxRetry;\n        timeout = config.manifestLoadingTimeOut;\n        retryDelay = config.manifestLoadingRetryDelay;\n      } else {\n        retry = config.levelLoadingMaxRetry;\n        timeout = config.levelLoadingTimeOut;\n        retryDelay = config.levelLoadingRetryDelay;\n      }\n      this.loader = typeof config.pLoader !== 'undefined' ? new config.pLoader(config) : new config.loader(config);\n      this.loading = true;\n      this.loader.load(url, '', this.loadsuccess.bind(this), this.loaderror.bind(this), this.loadtimeout.bind(this), timeout, retry, retryDelay);\n    }\n  }, {\n    key: 'resolve',\n    value: function resolve(url, baseUrl) {\n      return _url2.default.buildAbsoluteURL(baseUrl, url);\n    }\n  }, {\n    key: 'parseMasterPlaylist',\n    value: function parseMasterPlaylist(string, baseurl) {\n      var levels = [],\n          result = void 0;\n\n      // https://regex101.com is your friend\n      var re = /#EXT-X-STREAM-INF:([^\\n\\r]*)[\\r\\n]+([^\\r\\n]+)/g;\n      while ((result = re.exec(string)) != null) {\n        var level = {};\n\n        var attrs = level.attrs = new _attrList2.default(result[1]);\n        level.url = this.resolve(result[2], baseurl);\n\n        var resolution = attrs.decimalResolution('RESOLUTION');\n        if (resolution) {\n          level.width = resolution.width;\n          level.height = resolution.height;\n        }\n        level.bitrate = attrs.decimalInteger('AVERAGE-BANDWIDTH') || attrs.decimalInteger('BANDWIDTH');\n        level.name = attrs.NAME;\n\n        var closedCaptions = attrs.enumeratedString('CLOSED-CAPTIONS');\n\n        if (closedCaptions) {\n          level.closedCaptions = closedCaptions;\n        }\n\n        var codecs = attrs.CODECS;\n        if (codecs) {\n          codecs = codecs.split(',');\n          for (var i = 0; i < codecs.length; i++) {\n            var codec = codecs[i];\n            if (codec.indexOf('avc1') !== -1) {\n              level.videoCodec = this.avc1toavcoti(codec);\n            } else {\n              level.audioCodec = codec;\n            }\n          }\n        }\n\n        levels.push(level);\n      }\n      return levels;\n    }\n\n    /**\n     * Utility method for parseLevelPlaylist to create an initialization vector for a given segment\n     * @returns {Uint8Array}\n     */\n\n  }, {\n    key: 'createInitializationVector',\n    value: function createInitializationVector(segmentNumber) {\n      var uint8View = new Uint8Array(16);\n\n      for (var i = 12; i < 16; i++) {\n        uint8View[i] = segmentNumber >> 8 * (15 - i) & 0xff;\n      }\n\n      return uint8View;\n    }\n\n    /**\n     * Utility method for parseLevelPlaylist to get a fragment's decryption data from the currently parsed encryption key data\n     * @param levelkey - a playlist's encryption info\n     * @param segmentNumber - the fragment's segment number\n     * @returns {*} - an object to be applied as a fragment's decryptdata\n     */\n\n  }, {\n    key: 'fragmentDecryptdataFromLevelkey',\n    value: function fragmentDecryptdataFromLevelkey(levelkey, segmentNumber) {\n      var decryptdata = levelkey;\n\n      if (levelkey && levelkey.method && levelkey.uri && !levelkey.iv) {\n        decryptdata = this.cloneObj(levelkey);\n        decryptdata.iv = this.createInitializationVector(segmentNumber);\n      }\n\n      return decryptdata;\n    }\n  }, {\n    key: 'avc1toavcoti',\n    value: function avc1toavcoti(codec) {\n      var result,\n          avcdata = codec.split('.');\n      if (avcdata.length > 2) {\n        result = avcdata.shift() + '.';\n        result += parseInt(avcdata.shift()).toString(16);\n        result += ('000' + parseInt(avcdata.shift()).toString(16)).substr(-4);\n      } else {\n        result = codec;\n      }\n      return result;\n    }\n  }, {\n    key: 'cloneObj',\n    value: function cloneObj(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    }\n  }, {\n    key: 'parseLevelPlaylist',\n    value: function parseLevelPlaylist(string, baseurl, id) {\n      var currentSN = 0,\n          fragdecryptdata,\n          totalduration = 0,\n          level = { url: baseurl, fragments: [], live: true, startSN: 0 },\n          levelkey = { method: null, key: null, iv: null, uri: null },\n          cc = 0,\n          programDateTime = null,\n          frag = null,\n          result,\n          regexp,\n          byteRangeEndOffset,\n          byteRangeStartOffset,\n          tagList = [];\n\n      regexp = /(?:#EXT-X-(MEDIA-SEQUENCE):(\\d+))|(?:#EXT-X-(TARGETDURATION):(\\d+))|(?:#EXT-X-(KEY):(.*)[\\r\\n]+([^#|\\r\\n]+)?)|(?:#EXT(INF):([\\d\\.]+)[^\\r\\n]*([\\r\\n]+[^#|\\r\\n]+)?)|(?:#EXT-X-(BYTERANGE):([\\d]+[@[\\d]*)]*[\\r\\n]+([^#|\\r\\n]+)?|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(PROGRAM-DATE-TIME):(.*))|(?:#EXT-X-(VERSION):(.*))|(?:#(.*):(.*))|(?:#(.*))/g;\n      while ((result = regexp.exec(string)) !== null) {\n        result.shift();\n        result = result.filter(function (n) {\n          return n !== undefined;\n        });\n        switch (result[0]) {\n          case 'MEDIA-SEQUENCE':\n            currentSN = level.startSN = parseInt(result[1]);\n            break;\n          case 'TARGETDURATION':\n            level.targetduration = parseFloat(result[1]);\n            break;\n          case 'VERSION':\n            break;\n          case 'EXTM3U':\n            break;\n          case 'ENDLIST':\n            level.live = false;\n            break;\n          case 'DIS':\n            cc++;\n            tagList.push(result.map(function (e) {\n              return (' ' + e).slice(1);\n            }));\n            break;\n          case 'BYTERANGE':\n            var params = result[1].split('@');\n            if (params.length === 1) {\n              byteRangeStartOffset = byteRangeEndOffset;\n            } else {\n              byteRangeStartOffset = parseInt(params[1]);\n            }\n            byteRangeEndOffset = parseInt(params[0]) + byteRangeStartOffset;\n            if (frag && !frag.url) {\n              frag.byteRangeStartOffset = byteRangeStartOffset;\n              frag.byteRangeEndOffset = byteRangeEndOffset;\n              frag.url = this.resolve(result[2], baseurl);\n              tagList.push(result.map(function (e) {\n                return (' ' + e).slice(1);\n              }));\n            }\n            break;\n          case 'INF':\n            var duration = parseFloat(result[1]);\n            if (!isNaN(duration)) {\n              var sn = currentSN++;\n              fragdecryptdata = this.fragmentDecryptdataFromLevelkey(levelkey, sn);\n              var url = result[2] ? this.resolve(result[2], baseurl) : null;\n              tagList.push(result.map(function (e) {\n                return (' ' + e).slice(1);\n              }));\n              frag = { url: url, duration: duration, start: totalduration, sn: sn, level: id, cc: cc, byteRangeStartOffset: byteRangeStartOffset, byteRangeEndOffset: byteRangeEndOffset, decryptdata: fragdecryptdata, programDateTime: programDateTime, tagList: tagList, PTSDTSshift: 0 };\n              level.fragments.push(frag);\n              totalduration += duration;\n              byteRangeStartOffset = null;\n              programDateTime = null;\n              tagList = [];\n            }\n            break;\n          case 'KEY':\n            // https://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-3.4.4\n            var decryptparams = result[1];\n            var keyAttrs = new _attrList2.default(decryptparams);\n            var decryptmethod = keyAttrs.enumeratedString('METHOD'),\n                decrypturi = keyAttrs.URI,\n                decryptiv = keyAttrs.hexadecimalInteger('IV');\n            if (decryptmethod) {\n              levelkey = { method: null, key: null, iv: null, uri: null };\n              if (decrypturi && decryptmethod === 'AES-128') {\n                levelkey.method = decryptmethod;\n                // URI to get the key\n                levelkey.uri = this.resolve(decrypturi, baseurl);\n                levelkey.key = null;\n                // Initialization Vector (IV)\n                levelkey.iv = decryptiv;\n              }\n            }\n\n            //issue #425, applying url and decrypt data in instances where EXT-KEY immediately follow EXT-INF\n            if (frag && !frag.url && result.length >= 3) {\n              frag.url = this.resolve(result[2], baseurl);\n\n              //we have not moved onto another segment, we are still parsing one\n              fragdecryptdata = this.fragmentDecryptdataFromLevelkey(levelkey, currentSN - 1);\n              frag.decryptdata = fragdecryptdata;\n              tagList.push(result.map(function (e) {\n                return (' ' + e).slice(1);\n              }));\n            }\n            break;\n          case 'PROGRAM-DATE-TIME':\n            programDateTime = new Date(Date.parse(result[1]));\n            tagList.push(result.map(function (e) {\n              return (' ' + e).slice(1);\n            }));\n            break;\n          default:\n            tagList.push(result.map(function (e) {\n              return (' ' + e).slice(1);\n            }));\n            break;\n        }\n      }\n      //logger.log('found ' + level.fragments.length + ' fragments');\n      if (frag && !frag.url) {\n        level.fragments.pop();\n        totalduration -= frag.duration;\n      }\n      level.totalduration = totalduration;\n      level.averagetargetduration = totalduration / level.fragments.length;\n      level.endSN = currentSN - 1;\n      return level;\n    }\n  }, {\n    key: 'loadsuccess',\n    value: function loadsuccess(event, stats) {\n      var target = event.currentTarget,\n          string = target.responseText,\n          url = target.responseURL,\n          id = this.id,\n          id2 = this.id2,\n          hls = this.hls,\n          levels;\n\n      this.loading = false;\n      // responseURL not supported on some browsers (it is used to detect URL redirection)\n      // data-uri mode also not supported (but no need to detect redirection)\n      if (url === undefined || url.indexOf('data:') === 0) {\n        // fallback to initial URL\n        url = this.url;\n      }\n      stats.tload = performance.now();\n      stats.mtime = new Date(target.getResponseHeader('Last-Modified'));\n      if (string.indexOf('#EXTM3U') === 0) {\n        if (string.indexOf('#EXTINF:') > 0) {\n          // 1 level playlist\n          // if first request, fire manifest loaded event, level will be reloaded afterwards\n          // (this is to have a uniform logic for 1 level/multilevel playlists)\n          if (this.id === null) {\n            hls.trigger(_events2.default.MANIFEST_LOADED, { levels: [{ url: url }], url: url, stats: stats });\n          } else {\n            var levelDetails = this.parseLevelPlaylist(string, url, id);\n            stats.tparsed = performance.now();\n            hls.trigger(_events2.default.LEVEL_LOADED, { details: levelDetails, level: id, id: id2, stats: stats });\n          }\n        } else {\n          levels = this.parseMasterPlaylist(string, url);\n          // multi level playlist, parse level info\n          if (levels.length) {\n            hls.trigger(_events2.default.MANIFEST_LOADED, { levels: levels, url: url, stats: stats });\n          } else {\n            hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.MANIFEST_PARSING_ERROR, fatal: true, url: url, reason: 'no level found in manifest' });\n          }\n        }\n      } else {\n        hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.MANIFEST_PARSING_ERROR, fatal: true, url: url, reason: 'no EXTM3U delimiter' });\n      }\n    }\n  }, {\n    key: 'loaderror',\n    value: function loaderror(event) {\n      var details, fatal;\n      if (this.id === null) {\n        details = _errors.ErrorDetails.MANIFEST_LOAD_ERROR;\n        fatal = true;\n      } else {\n        details = _errors.ErrorDetails.LEVEL_LOAD_ERROR;\n        fatal = false;\n      }\n      if (this.loader) {\n        this.loader.abort();\n      }\n      this.loading = false;\n      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: details, fatal: fatal, url: this.url, loader: this.loader, response: event.currentTarget, level: this.id, id: this.id2 });\n    }\n  }, {\n    key: 'loadtimeout',\n    value: function loadtimeout() {\n      var details, fatal;\n      if (this.id === null) {\n        details = _errors.ErrorDetails.MANIFEST_LOAD_TIMEOUT;\n        fatal = true;\n      } else {\n        details = _errors.ErrorDetails.LEVEL_LOAD_TIMEOUT;\n        fatal = false;\n      }\n      if (this.loader) {\n        this.loader.abort();\n      }\n      this.loading = false;\n      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: details, fatal: fatal, url: this.url, loader: this.loader, level: this.id, id: this.id2 });\n    }\n  }]);\n\n  return PlaylistLoader;\n}(_eventHandler2.default);\n\nexports.default = PlaylistLoader;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Generate MP4 Box\n*/\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n//import Hex from '../utils/hex';\n\nvar MP4 = function () {\n  function MP4() {\n    _classCallCheck(this, MP4);\n  }\n\n  _createClass(MP4, null, [{\n    key: 'init',\n    value: function init() {\n      MP4.types = {\n        avc1: [], // codingname\n        avcC: [],\n        btrt: [],\n        dinf: [],\n        dref: [],\n        esds: [],\n        ftyp: [],\n        hdlr: [],\n        mdat: [],\n        mdhd: [],\n        mdia: [],\n        mfhd: [],\n        minf: [],\n        moof: [],\n        moov: [],\n        mp4a: [],\n        '.mp3': [],\n        mvex: [],\n        mvhd: [],\n        sdtp: [],\n        stbl: [],\n        stco: [],\n        stsc: [],\n        stsd: [],\n        stsz: [],\n        stts: [],\n        tfdt: [],\n        tfhd: [],\n        traf: [],\n        trak: [],\n        trun: [],\n        trex: [],\n        tkhd: [],\n        vmhd: [],\n        smhd: []\n      };\n\n      var i;\n      for (i in MP4.types) {\n        if (MP4.types.hasOwnProperty(i)) {\n          MP4.types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n        }\n      }\n\n      var videoHdlr = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n      ]);\n\n      var audioHdlr = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n      ]);\n\n      MP4.HDLR_TYPES = {\n        'video': videoHdlr,\n        'audio': audioHdlr\n      };\n\n      var dref = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // entry_count\n      0x00, 0x00, 0x00, 0x0c, // entry_size\n      0x75, 0x72, 0x6c, 0x20, // 'url' type\n      0x00, // version 0\n      0x00, 0x00, 0x01 // entry_flags\n      ]);\n\n      var stco = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00 // entry_count\n      ]);\n\n      MP4.STTS = MP4.STSC = MP4.STCO = stco;\n\n      MP4.STSZ = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // sample_size\n      0x00, 0x00, 0x00, 0x00]);\n      MP4.VMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x01, // flags\n      0x00, 0x00, // graphicsmode\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n      ]);\n      MP4.SMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, // balance\n      0x00, 0x00 // reserved\n      ]);\n\n      MP4.STSD = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01]); // entry_count\n\n      var majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\n      var avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\n      var minorVersion = new Uint8Array([0, 0, 0, 1]);\n\n      MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);\n      MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\n    }\n  }, {\n    key: 'box',\n    value: function box(type) {\n      var payload = Array.prototype.slice.call(arguments, 1),\n          size = 8,\n          i = payload.length,\n          len = i,\n          result;\n      // calculate the total size we need to allocate\n      while (i--) {\n        size += payload[i].byteLength;\n      }\n      result = new Uint8Array(size);\n      result[0] = size >> 24 & 0xff;\n      result[1] = size >> 16 & 0xff;\n      result[2] = size >> 8 & 0xff;\n      result[3] = size & 0xff;\n      result.set(type, 4);\n      // copy the payload into the result\n      for (i = 0, size = 8; i < len; i++) {\n        // copy payload[i] array @ offset size\n        result.set(payload[i], size);\n        size += payload[i].byteLength;\n      }\n      return result;\n    }\n  }, {\n    key: 'hdlr',\n    value: function hdlr(type) {\n      return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\n    }\n  }, {\n    key: 'mdat',\n    value: function mdat(data) {\n      return MP4.box(MP4.types.mdat, data);\n    }\n  }, {\n    key: 'mdhd',\n    value: function mdhd(timescale, duration) {\n      duration *= timescale;\n      return MP4.box(MP4.types.mdhd, new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x02, // creation_time\n      0x00, 0x00, 0x00, 0x03, // modification_time\n      timescale >> 24 & 0xFF, timescale >> 16 & 0xFF, timescale >> 8 & 0xFF, timescale & 0xFF, // timescale\n      duration >> 24, duration >> 16 & 0xFF, duration >> 8 & 0xFF, duration & 0xFF, // duration\n      0x55, 0xc4, // 'und' language (undetermined)\n      0x00, 0x00]));\n    }\n  }, {\n    key: 'mdia',\n    value: function mdia(track) {\n      return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));\n    }\n  }, {\n    key: 'mfhd',\n    value: function mfhd(sequenceNumber) {\n      return MP4.box(MP4.types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags\n      sequenceNumber >> 24, sequenceNumber >> 16 & 0xFF, sequenceNumber >> 8 & 0xFF, sequenceNumber & 0xFF]));\n    }\n  }, {\n    key: 'minf',\n    value: function minf(track) {\n      if (track.type === 'audio') {\n        return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));\n      } else {\n        return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));\n      }\n    }\n  }, {\n    key: 'moof',\n    value: function moof(sn, baseMediaDecodeTime, track) {\n      return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));\n    }\n    /**\n     * @param tracks... (optional) {array} the tracks associated with this movie\n     */\n\n  }, {\n    key: 'moov',\n    value: function moov(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = MP4.trak(tracks[i]);\n      }\n\n      return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));\n    }\n  }, {\n    key: 'mvex',\n    value: function mvex(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = MP4.trex(tracks[i]);\n      }\n      return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));\n    }\n  }, {\n    key: 'mvhd',\n    value: function mvhd(timescale, duration) {\n      duration *= timescale;\n      var bytes = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      timescale >> 24 & 0xFF, timescale >> 16 & 0xFF, timescale >> 8 & 0xFF, timescale & 0xFF, // timescale\n      duration >> 24 & 0xFF, duration >> 16 & 0xFF, duration >> 8 & 0xFF, duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n      ]);\n      return MP4.box(MP4.types.mvhd, bytes);\n    }\n  }, {\n    key: 'sdtp',\n    value: function sdtp(track) {\n      var samples = track.samples || [],\n          bytes = new Uint8Array(4 + samples.length),\n          flags,\n          i;\n      // leave the full box header (4 bytes) all zero\n      // write the sample table\n      for (i = 0; i < samples.length; i++) {\n        flags = samples[i].flags;\n        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n      }\n\n      return MP4.box(MP4.types.sdtp, bytes);\n    }\n  }, {\n    key: 'stbl',\n    value: function stbl(track) {\n      return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));\n    }\n  }, {\n    key: 'avc1',\n    value: function avc1(track) {\n      var sps = [],\n          pps = [],\n          i,\n          data,\n          len;\n      // assemble the SPSs\n\n      for (i = 0; i < track.sps.length; i++) {\n        data = track.sps[i];\n        len = data.byteLength;\n        sps.push(len >>> 8 & 0xFF);\n        sps.push(len & 0xFF);\n        sps = sps.concat(Array.prototype.slice.call(data)); // SPS\n      }\n\n      // assemble the PPSs\n      for (i = 0; i < track.pps.length; i++) {\n        data = track.pps[i];\n        len = data.byteLength;\n        pps.push(len >>> 8 & 0xFF);\n        pps.push(len & 0xFF);\n        pps = pps.concat(Array.prototype.slice.call(data));\n      }\n\n      var avcc = MP4.box(MP4.types.avcC, new Uint8Array([0x01, // version\n      sps[3], // profile\n      sps[4], // profile compat\n      sps[5], // level\n      0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n      0xE0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets\n      ].concat(sps).concat([track.pps.length // numOfPictureParameterSets\n      ]).concat(pps))),\n          // \"PPS\"\n      width = track.width,\n          height = track.height;\n      //console.log('avcc:' + Hex.hexDump(avcc));\n      return MP4.box(MP4.types.avc1, new Uint8Array([0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n      width >> 8 & 0xFF, width & 0xff, // width\n      height >> 8 & 0xFF, height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x12, 0x64, 0x61, 0x69, 0x6C, //dailymotion/hls.js\n      0x79, 0x6D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x68, 0x6C, 0x73, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11]), // pre_defined = -1\n      avcc, MP4.box(MP4.types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n      0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n      0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate\n      );\n    }\n  }, {\n    key: 'esds',\n    value: function esds(track) {\n      var configlen = track.config.length;\n      return new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n\n      0x03, // descriptor_type\n      0x17 + configlen, // length\n      0x00, 0x01, //es_id\n      0x00, // stream_priority\n\n      0x04, // descriptor_type\n      0x0f + configlen, // length\n      0x40, //codec : mpeg4_audio\n      0x15, // stream_type\n      0x00, 0x00, 0x00, // buffer_size\n      0x00, 0x00, 0x00, 0x00, // maxBitrate\n      0x00, 0x00, 0x00, 0x00, // avgBitrate\n\n      0x05 // descriptor_type\n      ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor\n    }\n  }, {\n    key: 'mp4a',\n    value: function mp4a(track) {\n      var audiosamplerate = track.audiosamplerate;\n      return MP4.box(MP4.types.mp4a, new Uint8Array([0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, track.channelCount, // channelcount\n      0x00, 0x10, // sampleSize:16bits\n      0x00, 0x00, 0x00, 0x00, // reserved2\n      audiosamplerate >> 8 & 0xFF, audiosamplerate & 0xff, //\n      0x00, 0x00]), MP4.box(MP4.types.esds, MP4.esds(track)));\n    }\n  }, {\n    key: 'mp3',\n    value: function mp3(track) {\n      var audiosamplerate = track.audiosamplerate;\n      return MP4.box(MP4.types['.mp3'], new Uint8Array([0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, track.channelCount, // channelcount\n      0x00, 0x10, // sampleSize:16bits\n      0x00, 0x00, 0x00, 0x00, // reserved2\n      audiosamplerate >> 8 & 0xFF, audiosamplerate & 0xff, //\n      0x00, 0x00]));\n    }\n  }, {\n    key: 'stsd',\n    value: function stsd(track) {\n      if (track.type === 'audio') {\n        if (!track.isAAC && track.codec === 'mp3') {\n          return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));\n        }\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\n      } else {\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\n      }\n    }\n  }, {\n    key: 'tkhd',\n    value: function tkhd(track) {\n      var id = track.id,\n          duration = track.duration * track.timescale,\n          width = track.width,\n          height = track.height;\n      return MP4.box(MP4.types.tkhd, new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x07, // flags\n      0x00, 0x00, 0x00, 0x00, // creation_time\n      0x00, 0x00, 0x00, 0x00, // modification_time\n      id >> 24 & 0xFF, id >> 16 & 0xFF, id >> 8 & 0xFF, id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x00, // reserved\n      duration >> 24, duration >> 16 & 0xFF, duration >> 8 & 0xFF, duration & 0xFF, // duration\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, // layer\n      0x00, 0x00, // alternate_group\n      0x00, 0x00, // non-audio track volume\n      0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      width >> 8 & 0xFF, width & 0xFF, 0x00, 0x00, // width\n      height >> 8 & 0xFF, height & 0xFF, 0x00, 0x00 // height\n      ]));\n    }\n  }, {\n    key: 'traf',\n    value: function traf(track, baseMediaDecodeTime) {\n      var sampleDependencyTable = MP4.sdtp(track),\n          id = track.id;\n      var upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));\n      var lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n      return MP4.box(MP4.types.traf, MP4.box(MP4.types.tfhd, new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      id >> 24, id >> 16 & 0XFF, id >> 8 & 0XFF, id & 0xFF])), MP4.box(MP4.types.tfdt, new Uint8Array([0x01, // version 1\n      0x00, 0x00, 0x00, // flags\n      upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF])), MP4.trun(track, sampleDependencyTable.length + 16 + // tfhd\n      20 + // tfdt\n      8 + // traf header\n      16 + // mfhd\n      8 + // moof header\n      8), // mdat header\n      sampleDependencyTable);\n    }\n\n    /**\n     * Generate a track box.\n     * @param track {object} a track definition\n     * @return {Uint8Array} the track box\n     */\n\n  }, {\n    key: 'trak',\n    value: function trak(track) {\n      track.duration = track.duration || 0xffffffff;\n      return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\n    }\n  }, {\n    key: 'trex',\n    value: function trex(track) {\n      var id = track.id;\n      return MP4.box(MP4.types.trex, new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      id >> 24, id >> 16 & 0XFF, id >> 8 & 0XFF, id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x01, 0x00, 0x01 // default_sample_flags\n      ]));\n    }\n  }, {\n    key: 'trun',\n    value: function trun(track, offset) {\n      var samples = track.samples || [],\n          len = samples.length,\n          arraylen = 12 + 16 * len,\n          array = new Uint8Array(arraylen),\n          i,\n          sample,\n          duration,\n          size,\n          flags,\n          cts;\n      offset += 8 + arraylen;\n      array.set([0x00, // version 0\n      0x00, 0x0f, 0x01, // flags\n      len >>> 24 & 0xFF, len >>> 16 & 0xFF, len >>> 8 & 0xFF, len & 0xFF, // sample_count\n      offset >>> 24 & 0xFF, offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF // data_offset\n      ], 0);\n      for (i = 0; i < len; i++) {\n        sample = samples[i];\n        duration = sample.duration;\n        size = sample.size;\n        flags = sample.flags;\n        cts = sample.cts;\n        array.set([duration >>> 24 & 0xFF, duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, // sample_duration\n        size >>> 24 & 0xFF, size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, // sample_size\n        flags.isLeading << 2 | flags.dependsOn, flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync, flags.degradPrio & 0xF0 << 8, flags.degradPrio & 0x0F, // sample_flags\n        cts >>> 24 & 0xFF, cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF // sample_composition_time_offset\n        ], 12 + 16 * i);\n      }\n      return MP4.box(MP4.types.trun, array);\n    }\n  }, {\n    key: 'initSegment',\n    value: function initSegment(tracks) {\n      if (!MP4.types) {\n        MP4.init();\n      }\n      var movie = MP4.moov(tracks),\n          result;\n      result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);\n      result.set(MP4.FTYP);\n      result.set(movie, MP4.FTYP.byteLength);\n      return result;\n    }\n  }]);\n\n  return MP4;\n}();\n\nexports.default = MP4;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nfMP4 remuxer\nn\nvar _aac = require('../helper/aac');\n\nvar _aac2 = _interopRequireDefault(_aac);\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = require('../utils/logger');\n\nvar _mp4Generator = require('../remux/mp4-generator');\n\nvar _mp4Generator2 = _interopRequireDefault(_mp4Generator);\n\nvar _errors = require('../errors');\n\nrequire('../utils/polyfill');\n\nvar _browser = require('../utils/browser');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MP4Remuxer = function () {\n  function MP4Remuxer(observer, config, typeSupported) {\n    _classCallCheck(this, MP4Remuxer);\n\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.ISGenerated = false;\n    this.PES2MP4SCALEFACTOR = 4;\n    this.PES_TIMESCALE = 90000;\n    this.MP4_TIMESCALE = this.PES_TIMESCALE / this.PES2MP4SCALEFACTOR;\n  }\n\n  _createClass(MP4Remuxer, [{\n    key: 'destroy',\n    value: function destroy() {}\n  }, {\n    key: 'insertDiscontinuity',\n    value: function insertDiscontinuity() {\n      this._initPTS = this._initDTS = undefined;\n    }\n  }, {\n    key: 'switchLevel',\n    value: function switchLevel() {\n      this.ISGenerated = false;\n      this.nextAacPts = this.nextAvcDts = undefined;\n    }\n  }, {\n    key: 'remux',\n    value: function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurate, data, flush, stats) {\n      // dummy\n      data = null;\n\n      // generate Init Segment if needed\n      if (!this.ISGenerated) {\n        this.generateIS(audioTrack, videoTrack, timeOffset);\n      }\n\n      if (this.ISGenerated) {\n        // Purposefully remuxing audio before video, so that remuxVideo can use nextAacPts, which is\n        // calculated in remuxAudio.\n        //logger.log('nb AAC samples:' + audioTrack.samples.length);\n        if (audioTrack.samples.length) {\n          var audioData = this.remuxAudio(audioTrack, timeOffset, contiguous, accurate, stats);\n          //logger.log('nb AVC samples:' + videoTrack.samples.length);\n          if (videoTrack.samples.length) {\n            var audioTrackLength = void 0,\n                audioStartPTS = void 0;\n            if (audioData) {\n              audioStartPTS = audioData.startPTS;\n              audioTrackLength = audioData.endPTS - audioStartPTS;\n            }\n            this.remuxVideo(videoTrack, timeOffset, contiguous, audioTrackLength, audioStartPTS, flush, stats);\n          } else if (!contiguous) {\n            this.nextAvcDts = undefined;\n          }\n        } else {\n          var videoData = void 0;\n          //logger.log('nb AVC samples:' + videoTrack.samples.length);\n          if (videoTrack.samples.length) {\n            videoData = this.remuxVideo(videoTrack, timeOffset, contiguous, undefined, undefined, flush, stats);\n          }\n          if (videoData && audioTrack.codec) {\n            this.remuxEmptyAudio(audioTrack, timeOffset, contiguous, videoData, stats);\n          }\n        }\n      }\n      //logger.log('nb ID3 samples:' + audioTrack.samples.length);\n      if (id3Track.samples.length) {\n        this.remuxID3(id3Track, timeOffset);\n      }\n      //logger.log('nb ID3 samples:' + audioTrack.samples.length);\n      if (textTrack.samples.length) {\n        this.remuxText(textTrack, timeOffset);\n      }\n    }\n  }, {\n    key: 'generateIS',\n    value: function generateIS(audioTrack, videoTrack, timeOffset) {\n      var observer = this.observer,\n          audioSamples = audioTrack.samples,\n          videoSamples = videoTrack.samples,\n          pesTimeScale = this.PES_TIMESCALE,\n          tracks = {},\n          data = { tracks: tracks, unique: false },\n          computePTSDTS = this._initPTS === undefined,\n          initPTS,\n          initDTS;\n\n      if (computePTSDTS) {\n        initPTS = initDTS = Infinity;\n      }\n      if (audioTrack.config && audioSamples.length) {\n        audioTrack.timescale = audioTrack.audiosamplerate;\n        // MP4 duration (track duration in seconds multiplied by timescale) is coded on 32 bits\n        // we know that each AAC sample contains 1024 frames....\n        // in order to avoid overflowing the 32 bit counter for large duration, we use smaller timescale (timescale/gcd)\n        // we just need to ensure that AAC sample duration will still be an integer (will be 1024/gcd)\n        if (audioTrack.timescale * audioTrack.duration > Math.pow(2, 32)) {\n          var greatestCommonDivisor = function greatestCommonDivisor(a, b) {\n            if (!b) {\n              return a;\n            }\n            return greatestCommonDivisor(b, a % b);\n          };\n          audioTrack.timescale = audioTrack.audiosamplerate / greatestCommonDivisor(audioTrack.audiosamplerate, audioTrack.isAAC ? 1024 : 1152);\n        }\n        _logger.logger.log('audio mp4 timescale :' + audioTrack.timescale);\n        var container = 'audio/mp4';\n        if (!audioTrack.isAAC) {\n          if (this.typeSupported.mpeg) {\n            // Chrome and Safari\n            container = 'audio/mpeg';\n            audioTrack.codec = '';\n          } else if (this.typeSupported.mp3 === true) {\n            // Firefox\n            audioTrack.codec = 'mp3';\n          }\n        }\n        tracks.audio = {\n          container: container,\n          codec: audioTrack.codec,\n          initSegment: !audioTrack.isAAC && this.typeSupported.mpeg ? new Uint8Array() : _mp4Generator2.default.initSegment([audioTrack]),\n          metadata: {\n            channelCount: audioTrack.channelCount\n          }\n        };\n        if (computePTSDTS) {\n          // remember first PTS of this demuxing context. for audio, PTS = DTS\n          initPTS = initDTS = audioSamples[0].pts - pesTimeScale * timeOffset;\n        }\n      }\n\n      if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\n        videoTrack.timescale = this.MP4_TIMESCALE;\n        tracks.video = {\n          container: 'video/mp4',\n          codec: videoTrack.codec,\n          initSegment: _mp4Generator2.default.initSegment([videoTrack]),\n          metadata: {\n            width: videoTrack.width,\n            height: videoTrack.height\n          }\n        };\n        if (computePTSDTS) {\n          initPTS = Math.min(initPTS, videoSamples[0].pts - pesTimeScale * timeOffset);\n          initDTS = Math.min(initDTS, videoSamples[0].dts - pesTimeScale * timeOffset);\n        }\n      }\n\n      if (Object.keys(tracks).length) {\n        observer.trigger(_events2.default.FRAG_PARSING_INIT_SEGMENT, data);\n        this.ISGenerated = true;\n        if (computePTSDTS) {\n          this._initPTS = initPTS;\n          this._initDTS = initDTS;\n        }\n      } else {\n        observer.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: 'no audio/video samples found' });\n      }\n    }\n  }, {\n    key: 'remuxVideo',\n    value: function remuxVideo(track, timeOffset, contiguous, audioTrackLength, audioStartPTS, flush, stats) {\n      var offset = 8,\n          pesTimeScale = this.PES_TIMESCALE,\n          pes2mp4ScaleFactor = this.PES2MP4SCALEFACTOR,\n          mp4SampleDuration,\n          mdat,\n          moof,\n          firstPTS,\n          firstDTS,\n          nextDTS,\n          lastPTS,\n          lastDTS,\n          inputSamples = track.samples,\n          outputSamples = [];\n\n      // handle broken streams with PTS < DTS, tolerance up 200ms (18000 in 90kHz timescale)\n      var PTSDTSshift = inputSamples.reduce(function (prev, curr) {\n        return Math.max(Math.min(prev, curr.pts - curr.dts), -18000);\n      }, 0);\n      if (PTSDTSshift < 0) {\n        _logger.logger.warn('PTS < DTS detected in video samples, shifting DTS by ' + Math.round(PTSDTSshift / 90) + ' ms to overcome this issue');\n        for (var i = 0; i < inputSamples.length; i++) {\n          inputSamples[i].dts += PTSDTSshift;\n        }\n      }\n\n      contiguous |= inputSamples.length && this.nextAvcDts && Math.abs(timeOffset - this.nextAvcDts / pesTimeScale) < 0.1;\n\n      // PTS is coded on 33bits, and can loop from -2^32 to 2^32\n      // PTSNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value\n      // if parsed fragment is contiguous with last one, let's use last DTS value as reference\n      // if not contiguous, let's use target timeOffset\n      var nextAvcDts = contiguous ? this.nextAvcDts : timeOffset * pesTimeScale;\n      // compute first DTS and last DTS, normalize them against reference value\n      var sample = inputSamples[0];\n      firstDTS = Math.max(this._PTSNormalize(sample.dts - this._initDTS, nextAvcDts), 0);\n      firstPTS = Math.max(this._PTSNormalize(sample.pts - this._initDTS, nextAvcDts), 0);\n\n      // check timestamp continuity (to remove inter-fragment gap/hole)\n      var delta = Math.round((firstDTS - nextAvcDts) / 90);\n      if (contiguous && delta) {\n        _logger.logger.log('AVC:' + Math.abs(delta) + ' ms ' + (delta > 0 ? 'hole' : 'overlapping') + ' between fragments detected');\n        // remove hole/gap : set DTS to next expected DTS\n        firstDTS = nextAvcDts;\n        inputSamples[0].dts = firstDTS + this._initDTS;\n        // offset PTS as well, ensure that PTS is smaller or equal than new DTS\n        firstPTS = Math.max(firstPTS - delta * 90, nextAvcDts);\n        inputSamples[0].pts = firstPTS + this._initDTS;\n        _logger.logger.log('Video/PTS/DTS adjusted: ' + firstPTS + '/' + firstDTS + ',delta:' + delta);\n        stats.videoGap = stats.videoGap || [];\n        stats.videoGap.push(delta);\n      }\n      nextDTS = firstDTS;\n\n      // compute lastPTS/lastDTS\n      sample = inputSamples[inputSamples.length - 1];\n      lastDTS = Math.max(this._PTSNormalize(sample.dts - this._initDTS, nextAvcDts), 0);\n      lastPTS = Math.max(this._PTSNormalize(sample.pts - this._initDTS, nextAvcDts), 0);\n      lastPTS = Math.max(lastPTS, lastDTS);\n\n      // on Safari let's signal the same sample duration for all samples\n      // sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS\n      // set this constant duration as being the avg delta between consecutive DTS.\n      if (_browser2.default.isSafari()) {\n        mp4SampleDuration = Math.round((lastDTS - firstDTS) / (pes2mp4ScaleFactor * (inputSamples.length - 1)));\n      }\n\n      // normalize all PTS/DTS now ...\n      for (var _i = 0; _i < inputSamples.length; _i++) {\n        var _sample = inputSamples[_i];\n        if (_browser2.default.isSafari()) {\n          // sample DTS is computed using a constant decoding offset (mp4SampleDuration) between samples\n          _sample.dts = firstDTS + _i * pes2mp4ScaleFactor * mp4SampleDuration;\n        } else {\n          // ensure sample monotonic DTS\n          _sample.dts = Math.max(this._PTSNormalize(_sample.dts - this._initDTS, nextAvcDts), firstDTS);\n          // ensure dts is a multiple of scale factor to avoid rounding issues\n          _sample.dts = Math.round(_sample.dts / pes2mp4ScaleFactor) * pes2mp4ScaleFactor;\n        }\n        // we normalize PTS against nextAvcDts, we also substract initDTS (some streams don't start @ PTS O)\n        // and we ensure that computed value is greater or equal than sample DTS\n        _sample.pts = Math.max(this._PTSNormalize(_sample.pts - this._initDTS, nextAvcDts), _sample.dts);\n        // ensure pts is a multiple of scale factor to avoid rounding issues\n        _sample.pts = Math.round(_sample.pts / pes2mp4ScaleFactor) * pes2mp4ScaleFactor;\n      }\n\n      /* concatenate the video data and construct the mdat in place\n        (need 8 more bytes to fill length and mpdat type) */\n      mdat = new Uint8Array(track.len + 4 * track.nbNalu + 8);\n      var view = new DataView(mdat.buffer);\n      view.setUint32(0, mdat.byteLength);\n      mdat.set(_mp4Generator2.default.types.mdat, 4);\n\n      stats.videoDurAvg = stats.videoDurStd = 0;\n      stats.cttsError = 0;\n\n      for (var _i2 = 0; _i2 < inputSamples.length; _i2++) {\n        var avcSample = inputSamples[_i2],\n            mp4SampleLength = 0,\n            compositionTimeOffset = void 0;\n        // convert NALU bitstream to MP4 format (prepend NALU with size field)\n        while (avcSample.units.units.length) {\n          var unit = avcSample.units.units.shift();\n          view.setUint32(offset, unit.data.byteLength);\n          offset += 4;\n          mdat.set(unit.data, offset);\n          offset += unit.data.byteLength;\n          mp4SampleLength += 4 + unit.data.byteLength;\n        }\n\n        if (!_browser2.default.isSafari()) {\n          // expected sample duration is the Decoding Timestamp diff of consecutive samples\n          if (_i2 < inputSamples.length - 1) {\n            mp4SampleDuration = inputSamples[_i2 + 1].dts - avcSample.dts;\n          } else {\n            var config = this.config,\n                lastFrameDuration = avcSample.dts - inputSamples[_i2 > 0 ? _i2 - 1 : _i2].dts;\n            if (config.stretchShortVideoTrack) {\n              // In some cases, a segment's audio track duration may exceed the video track duration.\n              // Since we've already remuxed audio, and we know how long the audio track is, we look to\n              // see if the delta to the next segment is longer than the minimum of maxBufferHole and\n              // maxSeekHole. If so, playback would potentially get stuck, so we artificially inflate\n              // the duration of the last frame to minimize any potential gap between segments.\n              var maxBufferHole = config.maxBufferHole,\n                  maxSeekHole = config.maxSeekHole,\n                  gapTolerance = Math.floor(Math.min(maxBufferHole, maxSeekHole) * pesTimeScale),\n                  deltaToFrameEnd = (audioTrackLength ? firstPTS + audioTrackLength * pesTimeScale : this.nextAacPts) - avcSample.pts;\n              if (deltaToFrameEnd > gapTolerance) {\n                // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video\n                // frame overlap. maxBufferHole/maxSeekHole should be >> lastFrameDuration anyway.\n                mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;\n                if (mp4SampleDuration < 0) {\n                  mp4SampleDuration = lastFrameDuration;\n                }\n                _logger.logger.log('It is approximately ' + deltaToFrameEnd / 90 + ' ms to the next segment; using duration ' + mp4SampleDuration / 90 + ' ms for the last video frame.');\n              } else {\n                mp4SampleDuration = lastFrameDuration;\n              }\n            } else {\n              mp4SampleDuration = lastFrameDuration;\n            }\n          }\n          mp4SampleDuration /= pes2mp4ScaleFactor;\n          compositionTimeOffset = Math.round((avcSample.pts - avcSample.dts) / pes2mp4ScaleFactor);\n        } else {\n          compositionTimeOffset = Math.max(0, mp4SampleDuration * Math.round((avcSample.pts - avcSample.dts) / (pes2mp4ScaleFactor * mp4SampleDuration)));\n        }\n\n        //console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${avcSample.pts}/${avcSample.dts}/${this._initDTS}/${ptsnorm}/${dtsnorm}/${(avcSample.pts/4294967296).toFixed(3)}');\n        outputSamples.push({\n          size: mp4SampleLength,\n          // constant duration\n          duration: mp4SampleDuration,\n          cts: compositionTimeOffset,\n          flags: {\n            isLeading: 0,\n            isDependedOn: 0,\n            hasRedundancy: 0,\n            degradPrio: 0,\n            dependsOn: avcSample.key ? 2 : 1,\n            isNonSync: avcSample.key ? 0 : 1\n          }\n        });\n\n        stats.videoDurAvg += mp4SampleDuration / inputSamples.length;\n        stats.videoDurStd += mp4SampleDuration * mp4SampleDuration / inputSamples.length;\n        stats.cttsError += compositionTimeOffset - Math.floor(compositionTimeOffset / mp4SampleDuration) * mp4SampleDuration;\n      }\n\n      stats.videoDurStd = Math.sqrt(stats.videoDurStd - stats.videoDurAvg * stats.videoDurAvg);\n\n      // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)\n      this.nextAvcDts = lastDTS + mp4SampleDuration * pes2mp4ScaleFactor;\n      track.len = 0;\n      track.nbNalu = 0;\n      if (outputSamples.length && navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n        var flags = outputSamples[0].flags;\n        // chrome workaround, mark first sample as being a Random Access Point to avoid sourcebuffer append issue\n        // https://code.google.com/p/chromium/issues/detail?id=229412\n        flags.dependsOn = 2;\n        flags.isNonSync = 0;\n      }\n      track.samples = outputSamples;\n      moof = _mp4Generator2.default.moof(track.sequenceNumber++, firstDTS / pes2mp4ScaleFactor, track);\n      track.samples = [];\n      var data = {\n        data1: moof,\n        data2: mdat,\n        startPTS: firstPTS / pesTimeScale,\n        endPTS: (lastPTS + pes2mp4ScaleFactor * mp4SampleDuration) / pesTimeScale,\n        startDTS: firstDTS / pesTimeScale,\n        endDTS: this.nextAvcDts / pesTimeScale,\n        type: 'video',\n        flush: flush,\n        nb: outputSamples.length,\n        dropped: stats.dropped\n      };\n      // delta PTS between audio and video\n      data.deltaPTS = Math.abs(data.startPTS - audioStartPTS);\n      this.observer.trigger(_events2.default.FRAG_PARSING_DATA, data);\n      return data;\n    }\n  }, {\n    key: 'remuxAudio',\n    value: function remuxAudio(track, timeOffset, contiguous, accurate, stats) {\n      var pesTimeScale = this.PES_TIMESCALE,\n          mp4timeScale = track.timescale,\n          pes2mp4ScaleFactor = pesTimeScale / mp4timeScale,\n          mp4SampleDuration = track.isAAC ? 1024 : 1152,\n          expectedSampleDuration = track.timescale * mp4SampleDuration / track.audiosamplerate,\n          rawMPEG = !track.isAAC && this.typeSupported.mpeg;\n      var view,\n          offset = rawMPEG ? 0 : 8,\n          aacSample,\n          mp4Sample,\n          unit,\n          mdat,\n          moof,\n          firstPTS,\n          firstDTS,\n          lastDTS,\n          pts,\n          dts,\n          ptsnorm,\n          dtsnorm,\n          samples = [],\n          samples0 = track.samples,\n          fillFrame,\n          newStamp;\n\n      // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),\n      // for sake of clarity:\n      // consecutive fragments are frags with less than 100ms gaps between new time offset and next expected PTS\n      // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n      // this helps ensuring audio continuity\n      // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame\n\n      contiguous |= samples0.length && this.nextAacPts && Math.abs(timeOffset - this.nextAacPts / pesTimeScale) < 0.1;\n      var nextAacPts = contiguous && this.nextAacPts !== undefined ? this.nextAacPts : timeOffset * pesTimeScale;\n\n      // If the audio track is missing samples, the frames seem to get \"left-shifted\" within the\n      // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.\n      // In an effort to prevent this from happening, we inject frames here where there are gaps.\n      // When possible, we inject a silent frame; when that's not possible, we duplicate the last\n      // frame.\n      var pesFrameDuration = expectedSampleDuration * pes2mp4ScaleFactor;\n      var nextPtsNorm = nextAacPts;\n\n      for (var i = 0; i < samples0.length; i++) {\n        samples0[i].ptsNorm = this._PTSNormalize(samples0[i].pts - this._initDTS, nextAacPts);\n      }\n      samples0.sort(function (a, b) {\n        return a.ptsNorm - b.ptsNorm;\n      });\n\n      // only inject/drop audio frames in case time offset is accurate\n      if (accurate && track.isAAC) {\n        for (var _i3 = 0; _i3 < samples0.length;) {\n          // First, let's see how far off this frame is from where we expect it to be\n          var sample = samples0[_i3],\n              ptsNorm = sample.ptsNorm,\n              delta = ptsNorm - nextPtsNorm;\n\n          if (Math.abs(delta) > pesFrameDuration / 2) {\n            stats.audioGap = stats.audioGap || [];\n            stats.audioGap.push(delta / 90);\n          }\n\n          // If we're overlapping by more than a duration, drop this sample\n          if (delta < -pesFrameDuration) {\n            _logger.logger.log('Dropping frame due to ' + Math.abs(delta / 90) + ' ms overlap.');\n            samples0.splice(_i3, 1);\n            track.len -= sample.unit.length;\n            // Don't touch nextPtsNorm or i\n          }\n          // Otherwise, if we're more than a frame away from where we should be, insert missing frames\n          else if (delta > pesFrameDuration) {\n              var missing = Math.round(delta / pesFrameDuration);\n              _logger.logger.log('Injecting ' + missing + ' frame' + (missing > 1 ? 's' : '') + ' of missing audio due to ' + Math.round(delta / 90) + ' ms gap.');\n              for (var j = 0; j < missing; j++) {\n                newStamp = nextPtsNorm + this._initDTS;\n                newStamp = Math.max(newStamp, this._initDTS);\n                fillFrame = _aac2.default.getSilentFrame(track.channelCount);\n                if (!fillFrame) {\n                  _logger.logger.log('Unable to get silent frame for given audio codec; duplicating last frame instead.');\n                  fillFrame = sample.unit.slice(0);\n                }\n                samples0.splice(_i3, 0, { unit: fillFrame, pts: newStamp, dts: newStamp });\n                track.len += fillFrame.length;\n                nextPtsNorm += pesFrameDuration;\n                _i3 += 1;\n              }\n\n              // Adjust sample to next expected pts\n              sample.pts = sample.dts = nextPtsNorm + this._initDTS;\n              nextPtsNorm += pesFrameDuration;\n              _i3 += 1;\n            }\n            // Otherwise, we're within half a frame duration, so just adjust pts\n            else {\n                nextPtsNorm += pesFrameDuration;\n                if (_i3 === 0) {\n                  sample.pts = sample.dts = this._initDTS + nextAacPts;\n                } else {\n                  sample.pts = sample.dts = samples0[_i3 - 1].pts + pesFrameDuration;\n                }\n                _i3 += 1;\n              }\n        }\n      }\n\n      while (samples0.length) {\n        aacSample = samples0.shift();\n        unit = aacSample.unit;\n        pts = aacSample.pts - this._initDTS;\n        dts = aacSample.dts - this._initDTS;\n        //logger.log(`Audio/PTS:${Math.round(pts/90)}`);\n        // if not first sample\n        if (lastDTS !== undefined) {\n          ptsnorm = this._PTSNormalize(pts, lastDTS);\n          dtsnorm = this._PTSNormalize(dts, lastDTS);\n          mp4Sample.duration = Math.round((dtsnorm - lastDTS) / pes2mp4ScaleFactor);\n        } else {\n          ptsnorm = this._PTSNormalize(pts, nextAacPts);\n          dtsnorm = this._PTSNormalize(dts, nextAacPts);\n          var _delta = Math.round(1000 * (ptsnorm - nextAacPts) / pesTimeScale),\n              numMissingFrames = 0;\n          // log delta\n          if (contiguous && _delta && track.isAAC) {\n            if (_delta > 0) {\n              numMissingFrames = Math.round((ptsnorm - nextAacPts) / pesFrameDuration);\n              _logger.logger.log(_delta + ' ms hole between AAC samples detected,filling it');\n              if (numMissingFrames > 0) {\n                fillFrame = _aac2.default.getSilentFrame(track.channelCount);\n                if (!fillFrame) {\n                  fillFrame = unit.slice(0);\n                }\n                track.len += numMissingFrames * fillFrame.length;\n              }\n              // if we have frame overlap, overlapping for more than half a frame duraion\n            } else if (_delta < -12) {\n              // drop overlapping audio frames... browser will deal with it\n              _logger.logger.log(-_delta + ' ms overlapping between AAC samples detected, drop frame');\n              track.len -= unit.byteLength;\n              continue;\n            }\n            // set PTS/DTS to expected PTS/DTS\n            ptsnorm = dtsnorm = nextAacPts;\n          }\n          // remember first PTS of our aacSamples, ensure value is positive\n          firstPTS = Math.max(0, ptsnorm);\n          firstDTS = Math.max(0, dtsnorm);\n          if (track.len <= 0) {\n            return;\n          }\n          /* concatenate the audio data and construct the mdat in place\n            (need 8 more bytes to fill length and mdat type) */\n          if (rawMPEG) {\n            mdat = new Uint8Array(track.len);\n          } else {\n            mdat = new Uint8Array(track.len + 8);\n            view = new DataView(mdat.buffer);\n            view.setUint32(0, mdat.byteLength);\n            mdat.set(_mp4Generator2.default.types.mdat, 4);\n          }\n          for (var _i4 = 0; _i4 < numMissingFrames; _i4++) {\n            newStamp = ptsnorm - (numMissingFrames - _i4) * pesFrameDuration;\n            fillFrame = _aac2.default.getSilentFrame(track.channelCount);\n            if (!fillFrame) {\n              _logger.logger.log('Unable to get silent frame for given audio codec; duplicating this frame instead.');\n              fillFrame = unit.slice(0);\n            }\n            mdat.set(fillFrame, offset);\n            offset += fillFrame.byteLength;\n            mp4Sample = {\n              size: fillFrame.byteLength,\n              cts: 0,\n              duration: mp4SampleDuration,\n              flags: {\n                isLeading: 0,\n                isDependedOn: 0,\n                hasRedundancy: 0,\n                degradPrio: 0,\n                dependsOn: 1\n              }\n            };\n            samples.push(mp4Sample);\n          }\n        }\n\n        mdat.set(unit, offset);\n        offset += unit.byteLength;\n        //console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${aacSample.pts}/${aacSample.dts}/${this._initDTS}/${ptsnorm}/${dtsnorm}/${(aacSample.pts/4294967296).toFixed(3)}');\n        mp4Sample = {\n          size: unit.byteLength,\n          cts: 0,\n          duration: 0,\n          flags: {\n            isLeading: 0,\n            isDependedOn: 0,\n            hasRedundancy: 0,\n            degradPrio: 0,\n            dependsOn: 1\n          }\n        };\n        samples.push(mp4Sample);\n        lastDTS = dtsnorm;\n      }\n      var lastSampleDuration = 0;\n      var nbSamples = samples.length;\n      //set last sample duration as being identical to previous sample\n      if (nbSamples >= 2) {\n        lastSampleDuration = samples[nbSamples - 2].duration;\n        mp4Sample.duration = lastSampleDuration;\n      }\n      if (nbSamples) {\n        stats.audioDurAvg = stats.audioDurStd = 0;\n        for (var _i5 = 0; _i5 < nbSamples; _i5++) {\n          stats.audioDurAvg += samples[_i5].duration;\n          stats.audioDurStd += samples[_i5].duration * samples[_i5].duration;\n        }\n        stats.audioDurStd = Math.sqrt(Math.abs(stats.audioDurStd - stats.audioDurAvg * stats.audioDurAvg / nbSamples) / nbSamples);\n        stats.audioDurAvg /= nbSamples;\n        // next aac sample PTS should be equal to last sample PTS + duration\n        this.nextAacPts = ptsnorm + pes2mp4ScaleFactor * lastSampleDuration;\n        //logger.log('Audio/PTS/PTSend:' + aacSample.pts.toFixed(0) + '/' + this.nextAacDts.toFixed(0));\n        track.len = 0;\n        track.samples = samples;\n        if (rawMPEG) {\n          moof = new Uint8Array();\n        } else {\n          moof = _mp4Generator2.default.moof(track.sequenceNumber++, firstDTS / pes2mp4ScaleFactor, track);\n        }\n        track.samples = [];\n        var audioData = {\n          data1: moof,\n          data2: mdat,\n          startPTS: firstPTS / pesTimeScale,\n          endPTS: this.nextAacPts / pesTimeScale,\n          startDTS: firstDTS / pesTimeScale,\n          endDTS: (dtsnorm + pes2mp4ScaleFactor * lastSampleDuration) / pesTimeScale,\n          type: 'audio',\n          nb: nbSamples\n        };\n        this.observer.trigger(_events2.default.FRAG_PARSING_DATA, audioData);\n        return audioData;\n      }\n      return null;\n    }\n  }, {\n    key: 'remuxEmptyAudio',\n    value: function remuxEmptyAudio(track, timeOffset, contiguous, videoData, stats) {\n      var pesTimeScale = this.PES_TIMESCALE,\n          mp4timeScale = track.timescale ? track.timescale : track.audiosamplerate,\n          pes2mp4ScaleFactor = pesTimeScale / mp4timeScale,\n          startDTS = (contiguous ? this.nextAacPts : videoData.startDTS * pesTimeScale) + this._initDTS,\n          endDTS = videoData.endDTS * pesTimeScale + this._initDTS,\n\n\n      // one sample's duration value\n      sampleDuration = 1024,\n          frameDuration = pes2mp4ScaleFactor * sampleDuration,\n\n\n      // samples count of this segment's duration\n      nbSamples = Math.ceil((endDTS - startDTS) / frameDuration),\n\n\n      // silent frame\n      silentFrame = _aac2.default.getSilentFrame(track.channelCount);\n\n      // Can't remux if we can't generate a silent frame...\n      if (!silentFrame) {\n        stats.noSilentFrame = (stats.noSilentFrame | 0) + 1;\n        _logger.logger.trace('Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!');\n        return;\n      }\n\n      var samples = [];\n      for (var i = 0; i < nbSamples; i++) {\n        var stamp = startDTS + i * frameDuration;\n        samples.push({ unit: silentFrame.slice(0), pts: stamp, dts: stamp });\n        track.len += silentFrame.length;\n      }\n      track.samples = samples;\n\n      this.remuxAudio(track, timeOffset, contiguous, undefined, stats);\n    }\n  }, {\n    key: 'remuxID3',\n    value: function remuxID3(track, timeOffset) {\n      var length = track.samples.length,\n          sample;\n      // consume samples\n      if (length) {\n        for (var index = 0; index < length; index++) {\n          sample = track.samples[index];\n          // setting id3 pts, dts to relative time\n          // using this._initPTS and this._initDTS to calculate relative time\n          sample.pts = (sample.pts - this._initPTS) / this.PES_TIMESCALE;\n          sample.dts = (sample.dts - this._initDTS) / this.PES_TIMESCALE;\n        }\n        this.observer.trigger(_events2.default.FRAG_PARSING_METADATA, {\n          samples: track.samples\n        });\n      }\n\n      track.samples = [];\n      timeOffset = timeOffset;\n    }\n  }, {\n    key: 'remuxText',\n    value: function remuxText(track, timeOffset) {\n      track.samples.sort(function (a, b) {\n        return a.pts - b.pts;\n      });\n\n      var length = track.samples.length,\n          sample;\n      // consume samples\n      if (length) {\n        for (var index = 0; index < length; index++) {\n          sample = track.samples[index];\n          // setting text pts, dts to relative time\n          // using this._initPTS and this._initDTS to calculate relative time\n          sample.pts = (sample.pts - this._initPTS) / this.PES_TIMESCALE;\n        }\n        this.observer.trigger(_events2.default.FRAG_PARSING_USERDATA, {\n          samples: track.samples\n        });\n      }\n\n      track.samples = [];\n      timeOffset = timeOffset;\n    }\n  }, {\n    key: '_PTSNormalize',\n    value: function _PTSNormalize(value, reference) {\n      var offset;\n      if (reference === undefined) {\n        return value;\n      }\n      if (reference < value) {\n        // - 2^33\n        offset = -8589934592;\n      } else {\n        // + 2^33\n        offset = 8589934592;\n      }\n      /* PTS is 33bit (from 0 to 2^33 -1)\n        if diff between value and reference is bigger than half of the amplitude (2^32) then it means that\n        PTS looping occured. fill the gap */\n      while (Math.abs(value - reference) > 4294967296) {\n        value += offset;\n      }\n      return value;\n    }\n  }, {\n    key: 'passthrough',\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return MP4Remuxer;\n}();\n\nexports.default = MP4Remuxer;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\npassthrough remuxer\nn\n\nvar _events = require('../events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PassThroughRemuxer = function () {\n  function PassThroughRemuxer(observer) {\n    _classCallCheck(this, PassThroughRemuxer);\n\n    this.observer = observer;\n    this.ISGenerated = false;\n  }\n\n  _createClass(PassThroughRemuxer, [{\n    key: 'destroy',\n    value: function destroy() {}\n  }, {\n    key: 'insertDiscontinuity',\n    value: function insertDiscontinuity() {}\n  }, {\n    key: 'switchLevel',\n    value: function switchLevel() {\n      this.ISGenerated = false;\n    }\n  }, {\n    key: 'remux',\n    value: function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, rawData) {\n      var observer = this.observer;\n      // generate Init Segment if needed\n      if (!this.ISGenerated) {\n        var tracks = {},\n            data = { tracks: tracks, unique: true },\n            track = videoTrack,\n            codec = track.codec;\n\n        if (codec) {\n          data.tracks.video = {\n            container: track.container,\n            codec: codec,\n            metadata: {\n              width: track.width,\n              height: track.height\n            }\n          };\n        }\n\n        track = audioTrack;\n        codec = track.codec;\n        if (codec) {\n          data.tracks.audio = {\n            container: track.container,\n            codec: codec,\n            metadata: {\n              channelCount: track.channelCount\n            }\n          };\n        }\n        this.ISGenerated = true;\n        observer.trigger(_events2.default.FRAG_PARSING_INIT_SEGMENT, data);\n      }\n      observer.trigger(_events2.default.FRAG_PARSING_DATA, {\n        data1: rawData,\n        startPTS: timeOffset,\n        startDTS: timeOffset,\n        type: 'audiovideo',\n        nb: 1,\n        dropped: 0,\n        deltaPTS: 0\n      });\n    }\n  }, {\n    key: 'passthrough',\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return PassThroughRemuxer;\n}();\n\nexports.default = PassThroughRemuxer;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js\nvar AttrList = function () {\n  function AttrList(attrs) {\n    _classCallCheck(this, AttrList);\n\n    if (typeof attrs === 'string') {\n      attrs = AttrList.parseAttrList(attrs);\n    }\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        this[attr] = attrs[attr];\n      }\n    }\n  }\n\n  _createClass(AttrList, [{\n    key: 'decimalInteger',\n    value: function decimalInteger(attrName) {\n      var intValue = parseInt(this[attrName], 10);\n      if (intValue > Number.MAX_SAFE_INTEGER) {\n        return Infinity;\n      }\n      return intValue;\n    }\n  }, {\n    key: 'hexadecimalInteger',\n    value: function hexadecimalInteger(attrName) {\n      if (this[attrName]) {\n        var stringValue = (this[attrName] || '0x').slice(2);\n        stringValue = (stringValue.length & 1 ? '0' : '') + stringValue;\n\n        var value = new Uint8Array(stringValue.length / 2);\n        for (var i = 0; i < stringValue.length / 2; i++) {\n          value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);\n        }\n        return value;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: 'hexadecimalIntegerAsNumber',\n    value: function hexadecimalIntegerAsNumber(attrName) {\n      var intValue = parseInt(this[attrName], 16);\n      if (intValue > Number.MAX_SAFE_INTEGER) {\n        return Infinity;\n      }\n      return intValue;\n    }\n  }, {\n    key: 'decimalFloatingPoint',\n    value: function decimalFloatingPoint(attrName) {\n      return parseFloat(this[attrName]);\n    }\n  }, {\n    key: 'enumeratedString',\n    value: function enumeratedString(attrName) {\n      return this[attrName];\n    }\n  }, {\n    key: 'decimalResolution',\n    value: function decimalResolution(attrName) {\n      var res = /^(\\d+)x(\\d+)$/.exec(this[attrName]);\n      if (res === null) {\n        return undefined;\n      }\n      return {\n        width: parseInt(res[1], 10),\n        height: parseInt(res[2], 10)\n      };\n    }\n  }], [{\n    key: 'parseAttrList',\n    value: function parseAttrList(input) {\n      var re = /\\s*(.+?)\\s*=((?:\\\".*?\\\")|.*?)(?:,|$)/g;\n      var match,\n          attrs = {};\n      while ((match = re.exec(input)) !== null) {\n        var value = match[2],\n            quote = '\"';\n\n        if (value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) {\n          value = value.slice(1, -1);\n        }\n        attrs[match[1]] = value;\n      }\n      return attrs;\n    }\n  }]);\n\n  return AttrList;\n}();\n\nexports.default = AttrList;","\"use strict\";\n\nvar BinarySearch = {\n    /**\n     * Searches for an item in an array which matches a certain condition.\n     * This requires the condition to only match one item in the array,\n     * and for the array to be ordered.\n     *\n     * @param {Array} list The array to search.\n     * @param {Function} comparisonFunction\n     *      Called and provided a candidate item as the first argument.\n     *      Should return:\n     *          > -1 if the item should be located at a lower index than the provided item.\n     *          > 1 if the item should be located at a higher index than the provided item.\n     *          > 0 if the item is the item you're looking for.\n     *\n     * @return {*} The object if it is found or null otherwise.\n     */\n    search: function search(list, comparisonFunction) {\n        var minIndex = 0;\n        var maxIndex = list.length - 1;\n        var currentIndex = null;\n        var currentElement = null;\n\n        while (minIndex <= maxIndex) {\n            currentIndex = (minIndex + maxIndex) / 2 | 0;\n            currentElement = list[currentIndex];\n\n            var comparisonResult = comparisonFunction(currentElement);\n            if (comparisonResult > 0) {\n                minIndex = currentIndex + 1;\n            } else if (comparisonResult < 0) {\n                maxIndex = currentIndex - 1;\n            } else {\n                return currentElement;\n            }\n        }\n\n        return null;\n    }\n};\n\nmodule.exports = BinarySearch;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar browser = {\n  isSafari: function isSafari() {\n    var vendor = navigator.vendor,\n        userAgent = navigator.userAgent;\n    return vendor && vendor.indexOf('Apple') > -1 && userAgent && !userAgent.match('CriOS');\n  }\n};\nexports.default = browser;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n *\n * This code was ported from the dash.js project at:\n *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js\n *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2\n *\n * The original copyright appears below:\n *\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2015-2016, DASH Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  1. Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  2. Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes\n */\n\nvar specialCea608CharsCodes = {\n    0x2a: 0xe1, // lowercase a, acute accent\n    0x5c: 0xe9, // lowercase e, acute accent\n    0x5e: 0xed, // lowercase i, acute accent\n    0x5f: 0xf3, // lowercase o, acute accent\n    0x60: 0xfa, // lowercase u, acute accent\n    0x7b: 0xe7, // lowercase c with cedilla\n    0x7c: 0xf7, // division symbol\n    0x7d: 0xd1, // uppercase N tilde\n    0x7e: 0xf1, // lowercase n tilde\n    0x7f: 0x2588, // Full block\n    // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n    // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F\n    // THIS MEANS THAT \\x50 MUST BE ADDED TO THE VALUES\n    0x80: 0xae, // Registered symbol (R)\n    0x81: 0xb0, // degree sign\n    0x82: 0xbd, // 1/2 symbol\n    0x83: 0xbf, // Inverted (open) question mark\n    0x84: 0x2122, // Trademark symbol (TM)\n    0x85: 0xa2, // Cents symbol\n    0x86: 0xa3, // Pounds sterling\n    0x87: 0x266a, // Music 8'th note\n    0x88: 0xe0, // lowercase a, grave accent\n    0x89: 0x20, // transparent space (regular)\n    0x8a: 0xe8, // lowercase e, grave accent\n    0x8b: 0xe2, // lowercase a, circumflex accent\n    0x8c: 0xea, // lowercase e, circumflex accent\n    0x8d: 0xee, // lowercase i, circumflex accent\n    0x8e: 0xf4, // lowercase o, circumflex accent\n    0x8f: 0xfb, // lowercase u, circumflex accent\n    // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n    // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F\n    0x90: 0xc1, // capital letter A with acute\n    0x91: 0xc9, // capital letter E with acute\n    0x92: 0xd3, // capital letter O with acute\n    0x93: 0xda, // capital letter U with acute\n    0x94: 0xdc, // capital letter U with diaresis\n    0x95: 0xfc, // lowercase letter U with diaeresis\n    0x96: 0x2018, // opening single quote\n    0x97: 0xa1, // inverted exclamation mark\n    0x98: 0x2a, // asterisk\n    0x99: 0x2019, // closing single quote\n    0x9a: 0x2501, // box drawings heavy horizontal\n    0x9b: 0xa9, // copyright sign\n    0x9c: 0x2120, // Service mark\n    0x9d: 0x2022, // (round) bullet\n    0x9e: 0x201c, // Left double quotation mark\n    0x9f: 0x201d, // Right double quotation mark\n    0xa0: 0xc0, // uppercase A, grave accent\n    0xa1: 0xc2, // uppercase A, circumflex\n    0xa2: 0xc7, // uppercase C with cedilla\n    0xa3: 0xc8, // uppercase E, grave accent\n    0xa4: 0xca, // uppercase E, circumflex\n    0xa5: 0xcb, // capital letter E with diaresis\n    0xa6: 0xeb, // lowercase letter e with diaresis\n    0xa7: 0xce, // uppercase I, circumflex\n    0xa8: 0xcf, // uppercase I, with diaresis\n    0xa9: 0xef, // lowercase i, with diaresis\n    0xaa: 0xd4, // uppercase O, circumflex\n    0xab: 0xd9, // uppercase U, grave accent\n    0xac: 0xf9, // lowercase u, grave accent\n    0xad: 0xdb, // uppercase U, circumflex\n    0xae: 0xab, // left-pointing double angle quotation mark\n    0xaf: 0xbb, // right-pointing double angle quotation mark\n    // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n    // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F\n    0xb0: 0xc3, // Uppercase A, tilde\n    0xb1: 0xe3, // Lowercase a, tilde\n    0xb2: 0xcd, // Uppercase I, acute accent\n    0xb3: 0xcc, // Uppercase I, grave accent\n    0xb4: 0xec, // Lowercase i, grave accent\n    0xb5: 0xd2, // Uppercase O, grave accent\n    0xb6: 0xf2, // Lowercase o, grave accent\n    0xb7: 0xd5, // Uppercase O, tilde\n    0xb8: 0xf5, // Lowercase o, tilde\n    0xb9: 0x7b, // Open curly brace\n    0xba: 0x7d, // Closing curly brace\n    0xbb: 0x5c, // Backslash\n    0xbc: 0x5e, // Caret\n    0xbd: 0x5f, // Underscore\n    0xbe: 0x7c, // Pipe (vertical line)\n    0xbf: 0x223c, // Tilde operator\n    0xc0: 0xc4, // Uppercase A, umlaut\n    0xc1: 0xe4, // Lowercase A, umlaut\n    0xc2: 0xd6, // Uppercase O, umlaut\n    0xc3: 0xf6, // Lowercase o, umlaut\n    0xc4: 0xdf, // Esszett (sharp S)\n    0xc5: 0xa5, // Yen symbol\n    0xc6: 0xa4, // Generic currency sign\n    0xc7: 0x2503, // Box drawings heavy vertical\n    0xc8: 0xc5, // Uppercase A, ring\n    0xc9: 0xe5, // Lowercase A, ring\n    0xca: 0xd8, // Uppercase O, stroke\n    0xcb: 0xf8, // Lowercase o, strok\n    0xcc: 0x250f, // Box drawings heavy down and right\n    0xcd: 0x2513, // Box drawings heavy down and left\n    0xce: 0x2517, // Box drawings heavy up and right\n    0xcf: 0x251b // Box drawings heavy up and left\n};\n\n/**\n * Utils\n */\nvar getCharForByte = function getCharForByte(byte) {\n    var charCode = byte;\n    if (specialCea608CharsCodes.hasOwnProperty(byte)) {\n        charCode = specialCea608CharsCodes[byte];\n    }\n    return String.fromCharCode(charCode);\n};\n\nvar NR_ROWS = 15,\n    NR_COLS = 32;\n// Tables to look up row from PAC data\nvar rowsLowCh1 = { 0x11: 1, 0x12: 3, 0x15: 5, 0x16: 7, 0x17: 9, 0x10: 11, 0x13: 12, 0x14: 14 };\nvar rowsHighCh1 = { 0x11: 2, 0x12: 4, 0x15: 6, 0x16: 8, 0x17: 10, 0x13: 13, 0x14: 15 };\nvar rowsLowCh2 = { 0x19: 1, 0x1A: 3, 0x1D: 5, 0x1E: 7, 0x1F: 9, 0x18: 11, 0x1B: 12, 0x1C: 14 };\nvar rowsHighCh2 = { 0x19: 2, 0x1A: 4, 0x1D: 6, 0x1E: 8, 0x1F: 10, 0x1B: 13, 0x1C: 15 };\n\nvar backgroundColors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'black', 'transparent'];\n\n/**\n * Simple logger class to be able to write with time-stamps and filter on level.\n */\nvar logger = {\n    verboseFilter: { 'DATA': 3, 'DEBUG': 3, 'INFO': 2, 'WARNING': 2, 'TEXT': 1, 'ERROR': 0 },\n    time: null,\n    verboseLevel: 0, // Only write errors\n    setTime: function setTime(newTime) {\n        this.time = newTime;\n    },\n    log: function log(severity, msg) {\n        var minLevel = this.verboseFilter[severity];\n        if (this.verboseLevel >= minLevel) {\n            console.log(this.time + ' [' + severity + '] ' + msg);\n        }\n    }\n};\n\nvar numArrayToHexArray = function numArrayToHexArray(numArray) {\n    var hexArray = [];\n    for (var j = 0; j < numArray.length; j++) {\n        hexArray.push(numArray[j].toString(16));\n    }\n    return hexArray;\n};\n\nvar PenState = function () {\n    function PenState(foreground, underline, italics, background, flash) {\n        _classCallCheck(this, PenState);\n\n        this.foreground = foreground || 'white';\n        this.underline = underline || false;\n        this.italics = italics || false;\n        this.background = background || 'black';\n        this.flash = flash || false;\n    }\n\n    _createClass(PenState, [{\n        key: 'reset',\n        value: function reset() {\n            this.foreground = 'white';\n            this.underline = false;\n            this.italics = false;\n            this.background = 'black';\n            this.flash = false;\n        }\n    }, {\n        key: 'setStyles',\n        value: function setStyles(styles) {\n            var attribs = ['foreground', 'underline', 'italics', 'background', 'flash'];\n            for (var i = 0; i < attribs.length; i++) {\n                var style = attribs[i];\n                if (styles.hasOwnProperty(style)) {\n                    this[style] = styles[style];\n                }\n            }\n        }\n    }, {\n        key: 'isDefault',\n        value: function isDefault() {\n            return this.foreground === 'white' && !this.underline && !this.italics && this.background === 'black' && !this.flash;\n        }\n    }, {\n        key: 'equals',\n        value: function equals(other) {\n            return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;\n        }\n    }, {\n        key: 'copy',\n        value: function copy(newPenState) {\n            this.foreground = newPenState.foreground;\n            this.underline = newPenState.underline;\n            this.italics = newPenState.italics;\n            this.background = newPenState.background;\n            this.flash = newPenState.flash;\n        }\n    }, {\n        key: 'toString',\n        value: function toString() {\n            return 'color=' + this.foreground + ', underline=' + this.underline + ', italics=' + this.italics + ', background=' + this.background + ', flash=' + this.flash;\n        }\n    }]);\n\n    return PenState;\n}();\n\n/**\n * Unicode character with styling and background.\n * @constructor\n */\n\n\nvar StyledUnicodeChar = function () {\n    function StyledUnicodeChar(uchar, foreground, underline, italics, background, flash) {\n        _classCallCheck(this, StyledUnicodeChar);\n\n        this.uchar = uchar || ' '; // unicode character\n        this.penState = new PenState(foreground, underline, italics, background, flash);\n    }\n\n    _createClass(StyledUnicodeChar, [{\n        key: 'reset',\n        value: function reset() {\n            this.uchar = ' ';\n            this.penState.reset();\n        }\n    }, {\n        key: 'setChar',\n        value: function setChar(uchar, newPenState) {\n            this.uchar = uchar;\n            this.penState.copy(newPenState);\n        }\n    }, {\n        key: 'setPenState',\n        value: function setPenState(newPenState) {\n            this.penState.copy(newPenState);\n        }\n    }, {\n        key: 'equals',\n        value: function equals(other) {\n            return this.uchar === other.uchar && this.penState.equals(other.penState);\n        }\n    }, {\n        key: 'copy',\n        value: function copy(newChar) {\n            this.uchar = newChar.uchar;\n            this.penState.copy(newChar.penState);\n        }\n    }, {\n        key: 'isEmpty',\n        value: function isEmpty() {\n            return this.uchar === ' ' && this.penState.isDefault();\n        }\n    }]);\n\n    return StyledUnicodeChar;\n}();\n\n/**\n * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.\n * @constructor\n */\n\n\nvar Row = function () {\n    function Row() {\n        _classCallCheck(this, Row);\n\n        this.chars = [];\n        for (var i = 0; i < NR_COLS; i++) {\n            this.chars.push(new StyledUnicodeChar());\n        }\n        this.pos = 0;\n        this.currPenState = new PenState();\n    }\n\n    _createClass(Row, [{\n        key: 'equals',\n        value: function equals(other) {\n            var equal = true;\n            for (var i = 0; i < NR_COLS; i++) {\n                if (!this.chars[i].equals(other.chars[i])) {\n                    equal = false;\n                    break;\n                }\n            }\n            return equal;\n        }\n    }, {\n        key: 'copy',\n        value: function copy(other) {\n            for (var i = 0; i < NR_COLS; i++) {\n                this.chars[i].copy(other.chars[i]);\n            }\n        }\n    }, {\n        key: 'isEmpty',\n        value: function isEmpty() {\n            var empty = true;\n            for (var i = 0; i < NR_COLS; i++) {\n                if (!this.chars[i].isEmpty()) {\n                    empty = false;\n                    break;\n                }\n            }\n            return empty;\n        }\n\n        /**\n         *  Set the cursor to a valid column.\n         */\n\n    }, {\n        key: 'setCursor',\n        value: function setCursor(absPos) {\n            if (this.pos !== absPos) {\n                this.pos = absPos;\n            }\n            if (this.pos < 0) {\n                logger.log('ERROR', 'Negative cursor position ' + this.pos);\n                this.pos = 0;\n            } else if (this.pos > NR_COLS) {\n                logger.log('ERROR', 'Too large cursor position ' + this.pos);\n                this.pos = NR_COLS;\n            }\n        }\n\n        /**\n         * Move the cursor relative to current position.\n         */\n\n    }, {\n        key: 'moveCursor',\n        value: function moveCursor(relPos) {\n            var newPos = this.pos + relPos;\n            if (relPos > 1) {\n                for (var i = this.pos + 1; i < newPos + 1; i++) {\n                    this.chars[i].setPenState(this.currPenState);\n                }\n            }\n            this.setCursor(newPos);\n        }\n\n        /**\n         * Backspace, move one step back and clear character.\n         */\n\n    }, {\n        key: 'backSpace',\n        value: function backSpace() {\n            this.moveCursor(-1);\n            this.chars[this.pos].setChar(' ', this.currPenState);\n        }\n    }, {\n        key: 'insertChar',\n        value: function insertChar(byte) {\n            if (byte >= 0x90) {\n                //Extended char\n                this.backSpace();\n            }\n            var char = getCharForByte(byte);\n            if (this.pos >= NR_COLS) {\n                logger.log('ERROR', 'Cannot insert ' + byte.toString(16) + ' (' + char + ') at position ' + this.pos + '. Skipping it!');\n                return;\n            }\n            this.chars[this.pos].setChar(char, this.currPenState);\n            this.moveCursor(1);\n        }\n    }, {\n        key: 'clearFromPos',\n        value: function clearFromPos(startPos) {\n            var i;\n            for (i = startPos; i < NR_COLS; i++) {\n                this.chars[i].reset();\n            }\n        }\n    }, {\n        key: 'clear',\n        value: function clear() {\n            this.clearFromPos(0);\n            this.pos = 0;\n            this.currPenState.reset();\n        }\n    }, {\n        key: 'clearToEndOfRow',\n        value: function clearToEndOfRow() {\n            this.clearFromPos(this.pos);\n        }\n    }, {\n        key: 'getTextString',\n        value: function getTextString() {\n            var chars = [];\n            var empty = true;\n            for (var i = 0; i < NR_COLS; i++) {\n                var char = this.chars[i].uchar;\n                if (char !== ' ') {\n                    empty = false;\n                }\n                chars.push(char);\n            }\n            if (empty) {\n                return '';\n            } else {\n                return chars.join('');\n            }\n        }\n    }, {\n        key: 'setPenStyles',\n        value: function setPenStyles(styles) {\n            this.currPenState.setStyles(styles);\n            var currChar = this.chars[this.pos];\n            currChar.setPenState(this.currPenState);\n        }\n    }]);\n\n    return Row;\n}();\n\n/**\n * Keep a CEA-608 screen of 32x15 styled characters\n * @constructor\n*/\n\n\nvar CaptionScreen = function () {\n    function CaptionScreen() {\n        _classCallCheck(this, CaptionScreen);\n\n        this.rows = [];\n        for (var i = 0; i < NR_ROWS; i++) {\n            this.rows.push(new Row()); // Note that we use zero-based numbering (0-14)\n        }\n        this.currRow = NR_ROWS - 1;\n        this.nrRollUpRows = null;\n        this.reset();\n    }\n\n    _createClass(CaptionScreen, [{\n        key: 'reset',\n        value: function reset() {\n            for (var i = 0; i < NR_ROWS; i++) {\n                this.rows[i].clear();\n            }\n            this.currRow = NR_ROWS - 1;\n        }\n    }, {\n        key: 'equals',\n        value: function equals(other) {\n            var equal = true;\n            for (var i = 0; i < NR_ROWS; i++) {\n                if (!this.rows[i].equals(other.rows[i])) {\n                    equal = false;\n                    break;\n                }\n            }\n            return equal;\n        }\n    }, {\n        key: 'copy',\n        value: function copy(other) {\n            for (var i = 0; i < NR_ROWS; i++) {\n                this.rows[i].copy(other.rows[i]);\n            }\n        }\n    }, {\n        key: 'isEmpty',\n        value: function isEmpty() {\n            var empty = true;\n            for (var i = 0; i < NR_ROWS; i++) {\n                if (!this.rows[i].isEmpty()) {\n                    empty = false;\n                    break;\n                }\n            }\n            return empty;\n        }\n    }, {\n        key: 'backSpace',\n        value: function backSpace() {\n            var row = this.rows[this.currRow];\n            row.backSpace();\n        }\n    }, {\n        key: 'clearToEndOfRow',\n        value: function clearToEndOfRow() {\n            var row = this.rows[this.currRow];\n            row.clearToEndOfRow();\n        }\n\n        /**\n         * Insert a character (without styling) in the current row.\n         */\n\n    }, {\n        key: 'insertChar',\n        value: function insertChar(char) {\n            var row = this.rows[this.currRow];\n            row.insertChar(char);\n        }\n    }, {\n        key: 'setPen',\n        value: function setPen(styles) {\n            var row = this.rows[this.currRow];\n            row.setPenStyles(styles);\n        }\n    }, {\n        key: 'moveCursor',\n        value: function moveCursor(relPos) {\n            var row = this.rows[this.currRow];\n            row.moveCursor(relPos);\n        }\n    }, {\n        key: 'setCursor',\n        value: function setCursor(absPos) {\n            logger.log('INFO', 'setCursor: ' + absPos);\n            var row = this.rows[this.currRow];\n            row.setCursor(absPos);\n        }\n    }, {\n        key: 'setPAC',\n        value: function setPAC(pacData) {\n            logger.log('INFO', 'pacData = ' + JSON.stringify(pacData));\n            var newRow = pacData.row - 1;\n            if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {\n                newRow = this.nrRollUpRows - 1;\n            }\n            this.currRow = newRow;\n            var row = this.rows[this.currRow];\n            if (pacData.indent !== null) {\n                var indent = pacData.indent;\n                var prevPos = Math.max(indent - 1, 0);\n                row.setCursor(pacData.indent);\n                pacData.color = row.chars[prevPos].penState.foreground;\n            }\n            var styles = { foreground: pacData.color, underline: pacData.underline, italics: pacData.italics, background: 'black', flash: false };\n            this.setPen(styles);\n        }\n\n        /**\n         * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).\n         */\n\n    }, {\n        key: 'setBkgData',\n        value: function setBkgData(bkgData) {\n\n            logger.log('INFO', 'bkgData = ' + JSON.stringify(bkgData));\n            this.backSpace();\n            this.setPen(bkgData);\n            this.insertChar(0x20); //Space\n        }\n    }, {\n        key: 'setRollUpRows',\n        value: function setRollUpRows(nrRows) {\n            this.nrRollUpRows = nrRows;\n        }\n    }, {\n        key: 'rollUp',\n        value: function rollUp() {\n            if (this.nrRollUpRows === null) {\n                logger.log('DEBUG', 'roll_up but nrRollUpRows not set yet');\n                return; //Not properly setup\n            }\n            logger.log('TEXT', this.getDisplayText());\n            var topRowIndex = this.currRow + 1 - this.nrRollUpRows;\n            var topRow = this.rows.splice(topRowIndex, 1)[0];\n            topRow.clear();\n            this.rows.splice(this.currRow, 0, topRow);\n            logger.log('INFO', 'Rolling up');\n            //logger.log('TEXT', this.get_display_text())\n        }\n\n        /**\n         * Get all non-empty rows with as unicode text.\n         */\n\n    }, {\n        key: 'getDisplayText',\n        value: function getDisplayText(asOneRow) {\n            asOneRow = asOneRow || false;\n            var displayText = [];\n            var text = '';\n            var rowNr = -1;\n            for (var i = 0; i < NR_ROWS; i++) {\n                var rowText = this.rows[i].getTextString();\n                if (rowText) {\n                    rowNr = i + 1;\n                    if (asOneRow) {\n                        displayText.push('Row ' + rowNr + ': \\'' + rowText + '\\'');\n                    } else {\n                        displayText.push(rowText.trim());\n                    }\n                }\n            }\n            if (displayText.length > 0) {\n                if (asOneRow) {\n                    text = '[' + displayText.join(' | ') + ']';\n                } else {\n                    text = displayText.join('\\n');\n                }\n            }\n            return text;\n        }\n    }, {\n        key: 'getTextAndFormat',\n        value: function getTextAndFormat() {\n            return this.rows;\n        }\n    }]);\n\n    return CaptionScreen;\n}();\n\n//var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];\n\nvar Cea608Channel = function () {\n    function Cea608Channel(channelNumber, outputFilter) {\n        _classCallCheck(this, Cea608Channel);\n\n        this.chNr = channelNumber;\n        this.outputFilter = outputFilter;\n        this.mode = null;\n        this.verbose = 0;\n        this.displayedMemory = new CaptionScreen();\n        this.nonDisplayedMemory = new CaptionScreen();\n        this.lastOutputScreen = new CaptionScreen();\n        this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];\n        this.writeScreen = this.displayedMemory;\n        this.mode = null;\n        this.cueStartTime = null; // Keeps track of where a cue started.\n    }\n\n    _createClass(Cea608Channel, [{\n        key: 'reset',\n        value: function reset() {\n            this.mode = null;\n            this.displayedMemory.reset();\n            this.nonDisplayedMemory.reset();\n            this.lastOutputScreen.reset();\n            this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];\n            this.writeScreen = this.displayedMemory;\n            this.mode = null;\n            this.cueStartTime = null;\n            this.lastCueEndTime = null;\n        }\n    }, {\n        key: 'getHandler',\n        value: function getHandler() {\n            return this.outputFilter;\n        }\n    }, {\n        key: 'setHandler',\n        value: function setHandler(newHandler) {\n            this.outputFilter = newHandler;\n        }\n    }, {\n        key: 'setPAC',\n        value: function setPAC(pacData) {\n            this.writeScreen.setPAC(pacData);\n        }\n    }, {\n        key: 'setBkgData',\n        value: function setBkgData(bkgData) {\n            this.writeScreen.setBkgData(bkgData);\n        }\n    }, {\n        key: 'setMode',\n        value: function setMode(newMode) {\n            if (newMode === this.mode) {\n                return;\n            }\n            this.mode = newMode;\n            logger.log('INFO', 'MODE=' + newMode);\n            if (this.mode === 'MODE_POP-ON') {\n                this.writeScreen = this.nonDisplayedMemory;\n            } else {\n                this.writeScreen = this.displayedMemory;\n                this.writeScreen.reset();\n            }\n            if (this.mode !== 'MODE_ROLL-UP') {\n                this.displayedMemory.nrRollUpRows = null;\n                this.nonDisplayedMemory.nrRollUpRows = null;\n            }\n            this.mode = newMode;\n        }\n    }, {\n        key: 'insertChars',\n        value: function insertChars(chars) {\n            for (var i = 0; i < chars.length; i++) {\n                this.writeScreen.insertChar(chars[i]);\n            }\n            var screen = this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP';\n            logger.log('INFO', screen + ': ' + this.writeScreen.getDisplayText(true));\n            if (this.mode === 'MODE_PAINT-ON' || this.mode === 'MODE_ROLL-UP') {\n                logger.log('TEXT', 'DISPLAYED: ' + this.displayedMemory.getDisplayText(true));\n                this.outputDataUpdate();\n            }\n        }\n    }, {\n        key: 'ccRCL',\n        value: function ccRCL() {\n            // Resume Caption Loading (switch mode to Pop On)\n            logger.log('INFO', 'RCL - Resume Caption Loading');\n            this.setMode('MODE_POP-ON');\n        }\n    }, {\n        key: 'ccBS',\n        value: function ccBS() {\n            // BackSpace\n            logger.log('INFO', 'BS - BackSpace');\n            if (this.mode === 'MODE_TEXT') {\n                return;\n            }\n            this.writeScreen.backSpace();\n            if (this.writeScreen === this.displayedMemory) {\n                this.outputDataUpdate();\n            }\n        }\n    }, {\n        key: 'ccAOF',\n        value: function ccAOF() {\n            // Reserved (formerly Alarm Off)\n            return;\n        }\n    }, {\n        key: 'ccAON',\n        value: function ccAON() {\n            // Reserved (formerly Alarm On)\n            return;\n        }\n    }, {\n        key: 'ccDER',\n        value: function ccDER() {\n            // Delete to End of Row\n            logger.log('INFO', 'DER- Delete to End of Row');\n            this.writeScreen.clearToEndOfRow();\n            this.outputDataUpdate();\n        }\n    }, {\n        key: 'ccRU',\n        value: function ccRU(nrRows) {\n            //Roll-Up Captions-2,3,or 4 Rows\n            logger.log('INFO', 'RU(' + nrRows + ') - Roll Up');\n            this.writeScreen = this.displayedMemory;\n            this.setMode('MODE_ROLL-UP');\n            this.writeScreen.setRollUpRows(nrRows);\n        }\n    }, {\n        key: 'ccFON',\n        value: function ccFON() {\n            //Flash On\n            logger.log('INFO', 'FON - Flash On');\n            this.writeScreen.setPen({ flash: true });\n        }\n    }, {\n        key: 'ccRDC',\n        value: function ccRDC() {\n            // Resume Direct Captioning (switch mode to PaintOn)\n            logger.log('INFO', 'RDC - Resume Direct Captioning');\n            this.setMode('MODE_PAINT-ON');\n        }\n    }, {\n        key: 'ccTR',\n        value: function ccTR() {\n            // Text Restart in text mode (not supported, however)\n            logger.log('INFO', 'TR');\n            this.setMode('MODE_TEXT');\n        }\n    }, {\n        key: 'ccRTD',\n        value: function ccRTD() {\n            // Resume Text Display in Text mode (not supported, however)\n            logger.log('INFO', 'RTD');\n            this.setMode('MODE_TEXT');\n        }\n    }, {\n        key: 'ccEDM',\n        value: function ccEDM() {\n            // Erase Displayed Memory\n            logger.log('INFO', 'EDM - Erase Displayed Memory');\n            this.displayedMemory.reset();\n            this.outputDataUpdate();\n        }\n    }, {\n        key: 'ccCR',\n        value: function ccCR() {\n            // Carriage Return\n            logger.log('CR - Carriage Return');\n            this.writeScreen.rollUp();\n            this.outputDataUpdate();\n        }\n    }, {\n        key: 'ccENM',\n        value: function ccENM() {\n            //Erase Non-Displayed Memory\n            logger.log('INFO', 'ENM - Erase Non-displayed Memory');\n            this.nonDisplayedMemory.reset();\n        }\n    }, {\n        key: 'ccEOC',\n        value: function ccEOC() {\n            //End of Caption (Flip Memories)\n            logger.log('INFO', 'EOC - End Of Caption');\n            if (this.mode === 'MODE_POP-ON') {\n                var tmp = this.displayedMemory;\n                this.displayedMemory = this.nonDisplayedMemory;\n                this.nonDisplayedMemory = tmp;\n                this.writeScreen = this.nonDisplayedMemory;\n                logger.log('TEXT', 'DISP: ' + this.displayedMemory.getDisplayText());\n            }\n            this.outputDataUpdate();\n        }\n    }, {\n        key: 'ccTO',\n        value: function ccTO(nrCols) {\n            // Tab Offset 1,2, or 3 columns\n            logger.log('INFO', 'TO(' + nrCols + ') - Tab Offset');\n            this.writeScreen.moveCursor(nrCols);\n        }\n    }, {\n        key: 'ccMIDROW',\n        value: function ccMIDROW(secondByte) {\n            // Parse MIDROW command\n            var styles = { flash: false };\n            styles.underline = secondByte % 2 === 1;\n            styles.italics = secondByte >= 0x2e;\n            if (!styles.italics) {\n                var colorIndex = Math.floor(secondByte / 2) - 0x10;\n                var colors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta'];\n                styles.foreground = colors[colorIndex];\n            } else {\n                styles.foreground = 'white';\n            }\n            logger.log('INFO', 'MIDROW: ' + JSON.stringify(styles));\n            this.writeScreen.setPen(styles);\n        }\n    }, {\n        key: 'outputDataUpdate',\n        value: function outputDataUpdate() {\n            var t = logger.time;\n            if (t === null) {\n                return;\n            }\n            if (this.outputFilter) {\n                if (this.outputFilter.updateData) {\n                    this.outputFilter.updateData(t, this.displayedMemory);\n                }\n                if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {\n                    // Start of a new cue\n                    this.cueStartTime = t;\n                } else {\n                    if (!this.displayedMemory.equals(this.lastOutputScreen)) {\n                        if (this.outputFilter.newCue) {\n                            this.outputFilter.newCue(this.cueStartTime, t, this.lastOutputScreen);\n                        }\n                        this.cueStartTime = this.displayedMemory.isEmpty() ? null : t;\n                    }\n                }\n                this.lastOutputScreen.copy(this.displayedMemory);\n            }\n        }\n    }, {\n        key: 'cueSplitAtTime',\n        value: function cueSplitAtTime(t) {\n            if (this.outputFilter) {\n                if (!this.displayedMemory.isEmpty()) {\n                    if (this.outputFilter.newCue) {\n                        this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);\n                    }\n                    this.cueStartTime = t;\n                }\n            }\n        }\n    }]);\n\n    return Cea608Channel;\n}();\n\nvar Cea608Parser = function () {\n    function Cea608Parser(field, out1, out2) {\n        _classCallCheck(this, Cea608Parser);\n\n        this.field = field || 1;\n        this.outputs = [out1, out2];\n        this.channels = [new Cea608Channel(1, out1), new Cea608Channel(2, out2)];\n        this.currChNr = -1; // Will be 1 or 2\n        this.lastCmdA = null; // First byte of last command\n        this.lastCmdB = null; // Second byte of last command\n        this.bufferedData = [];\n        this.startTime = null;\n        this.lastTime = null;\n        this.dataCounters = { 'padding': 0, 'char': 0, 'cmd': 0, 'other': 0 };\n    }\n\n    _createClass(Cea608Parser, [{\n        key: 'getHandler',\n        value: function getHandler(index) {\n            return this.channels[index].getHandler();\n        }\n    }, {\n        key: 'setHandler',\n        value: function setHandler(index, newHandler) {\n            this.channels[index].setHandler(newHandler);\n        }\n\n        /**\n         * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.\n         */\n\n    }, {\n        key: 'addData',\n        value: function addData(t, byteList) {\n            var cmdFound,\n                a,\n                b,\n                charsFound = false;\n\n            this.lastTime = t;\n            logger.setTime(t);\n\n            for (var i = 0; i < byteList.length; i += 2) {\n                a = byteList[i] & 0x7f;\n                b = byteList[i + 1] & 0x7f;\n                if (a === 0 && b === 0) {\n                    this.dataCounters.padding += 2;\n                    continue;\n                } else {\n                    logger.log('DATA', '[' + numArrayToHexArray([byteList[i], byteList[i + 1]]) + '] -> (' + numArrayToHexArray([a, b]) + ')');\n                }\n                cmdFound = this.parseCmd(a, b);\n                if (!cmdFound) {\n                    cmdFound = this.parseMidrow(a, b);\n                }\n                if (!cmdFound) {\n                    cmdFound = this.parsePAC(a, b);\n                }\n                if (!cmdFound) {\n                    cmdFound = this.parseBackgroundAttributes(a, b);\n                }\n                if (!cmdFound) {\n                    charsFound = this.parseChars(a, b);\n                    if (charsFound) {\n                        if (this.currChNr && this.currChNr >= 0) {\n                            var channel = this.channels[this.currChNr - 1];\n                            channel.insertChars(charsFound);\n                        } else {\n                            logger.log('WARNING', 'No channel found yet. TEXT-MODE?');\n                        }\n                    }\n                }\n                if (cmdFound) {\n                    this.dataCounters.cmd += 2;\n                } else if (charsFound) {\n                    this.dataCounters.char += 2;\n                } else {\n                    this.dataCounters.other += 2;\n                    logger.log('WARNING', 'Couldn\\'t parse cleaned data ' + numArrayToHexArray([a, b]) + ' orig: ' + numArrayToHexArray([byteList[i], byteList[i + 1]]));\n                }\n            }\n        }\n\n        /**\n         * Parse Command.\n         * @returns {Boolean} Tells if a command was found\n         */\n\n    }, {\n        key: 'parseCmd',\n        value: function parseCmd(a, b) {\n            var chNr = null;\n\n            var cond1 = (a === 0x14 || a === 0x1C) && 0x20 <= b && b <= 0x2F;\n            var cond2 = (a === 0x17 || a === 0x1F) && 0x21 <= b && b <= 0x23;\n            if (!(cond1 || cond2)) {\n                return false;\n            }\n\n            if (a === this.lastCmdA && b === this.lastCmdB) {\n                this.lastCmdA = null;\n                this.lastCmdB = null; // Repeated commands are dropped (once)\n                logger.log('DEBUG', 'Repeated command (' + numArrayToHexArray([a, b]) + ') is dropped');\n                return true;\n            }\n\n            if (a === 0x14 || a === 0x17) {\n                chNr = 1;\n            } else {\n                chNr = 2; // (a === 0x1C || a=== 0x1f)\n            }\n\n            var channel = this.channels[chNr - 1];\n\n            if (a === 0x14 || a === 0x1C) {\n                if (b === 0x20) {\n                    channel.ccRCL();\n                } else if (b === 0x21) {\n                    channel.ccBS();\n                } else if (b === 0x22) {\n                    channel.ccAOF();\n                } else if (b === 0x23) {\n                    channel.ccAON();\n                } else if (b === 0x24) {\n                    channel.ccDER();\n                } else if (b === 0x25) {\n                    channel.ccRU(2);\n                } else if (b === 0x26) {\n                    channel.ccRU(3);\n                } else if (b === 0x27) {\n                    channel.ccRU(4);\n                } else if (b === 0x28) {\n                    channel.ccFON();\n                } else if (b === 0x29) {\n                    channel.ccRDC();\n                } else if (b === 0x2A) {\n                    channel.ccTR();\n                } else if (b === 0x2B) {\n                    channel.ccRTD();\n                } else if (b === 0x2C) {\n                    channel.ccEDM();\n                } else if (b === 0x2D) {\n                    channel.ccCR();\n                } else if (b === 0x2E) {\n                    channel.ccENM();\n                } else if (b === 0x2F) {\n                    channel.ccEOC();\n                }\n            } else {\n                //a == 0x17 || a == 0x1F\n                channel.ccTO(b - 0x20);\n            }\n            this.lastCmdA = a;\n            this.lastCmdB = b;\n            this.currChNr = chNr;\n            return true;\n        }\n\n        /**\n         * Parse midrow styling command\n         * @returns {Boolean}\n         */\n\n    }, {\n        key: 'parseMidrow',\n        value: function parseMidrow(a, b) {\n            var chNr = null;\n\n            if ((a === 0x11 || a === 0x19) && 0x20 <= b && b <= 0x2f) {\n                if (a === 0x11) {\n                    chNr = 1;\n                } else {\n                    chNr = 2;\n                }\n                if (chNr !== this.currChNr) {\n                    logger.log('ERROR', 'Mismatch channel in midrow parsing');\n                    return false;\n                }\n                var channel = this.channels[chNr - 1];\n                channel.ccMIDROW(b);\n                logger.log('DEBUG', 'MIDROW (' + numArrayToHexArray([a, b]) + ')');\n                return true;\n            }\n            return false;\n        }\n        /**\n         * Parse Preable Access Codes (Table 53).\n         * @returns {Boolean} Tells if PAC found\n         */\n\n    }, {\n        key: 'parsePAC',\n        value: function parsePAC(a, b) {\n\n            var chNr = null;\n            var row = null;\n\n            var case1 = (0x11 <= a && a <= 0x17 || 0x19 <= a && a <= 0x1F) && 0x40 <= b && b <= 0x7F;\n            var case2 = (a === 0x10 || a === 0x18) && 0x40 <= b && b <= 0x5F;\n            if (!(case1 || case2)) {\n                return false;\n            }\n\n            if (a === this.lastCmdA && b === this.lastCmdB) {\n                this.lastCmdA = null;\n                this.lastCmdB = null;\n                return true; // Repeated commands are dropped (once)\n            }\n\n            chNr = a <= 0x17 ? 1 : 2;\n\n            if (0x40 <= b && b <= 0x5F) {\n                row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];\n            } else {\n                // 0x60 <= b <= 0x7F\n                row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];\n            }\n            var pacData = this.interpretPAC(row, b);\n            var channel = this.channels[chNr - 1];\n            channel.setPAC(pacData);\n            this.lastCmdA = a;\n            this.lastCmdB = b;\n            this.currChNr = chNr;\n            return true;\n        }\n\n        /**\n         * Interpret the second byte of the pac, and return the information.\n         * @returns {Object} pacData with style parameters.\n         */\n\n    }, {\n        key: 'interpretPAC',\n        value: function interpretPAC(row, byte) {\n            var pacIndex = byte;\n            var pacData = { color: null, italics: false, indent: null, underline: false, row: row };\n\n            if (byte > 0x5F) {\n                pacIndex = byte - 0x60;\n            } else {\n                pacIndex = byte - 0x40;\n            }\n            pacData.underline = (pacIndex & 1) === 1;\n            if (pacIndex <= 0xd) {\n                pacData.color = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'white'][Math.floor(pacIndex / 2)];\n            } else if (pacIndex <= 0xf) {\n                pacData.italics = true;\n                pacData.color = 'white';\n            } else {\n                pacData.indent = Math.floor((pacIndex - 0x10) / 2) * 4;\n            }\n            return pacData; // Note that row has zero offset. The spec uses 1.\n        }\n\n        /**\n         * Parse characters.\n         * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.\n         */\n\n    }, {\n        key: 'parseChars',\n        value: function parseChars(a, b) {\n\n            var channelNr = null,\n                charCodes = null,\n                charCode1 = null;\n\n            if (a >= 0x19) {\n                channelNr = 2;\n                charCode1 = a - 8;\n            } else {\n                channelNr = 1;\n                charCode1 = a;\n            }\n            if (0x11 <= charCode1 && charCode1 <= 0x13) {\n                // Special character\n                var oneCode = b;\n                if (charCode1 === 0x11) {\n                    oneCode = b + 0x50;\n                } else if (charCode1 === 0x12) {\n                    oneCode = b + 0x70;\n                } else {\n                    oneCode = b + 0x90;\n                }\n                logger.log('INFO', 'Special char \\'' + getCharForByte(oneCode) + '\\' in channel ' + channelNr);\n                charCodes = [oneCode];\n            } else if (0x20 <= a && a <= 0x7f) {\n                charCodes = b === 0 ? [a] : [a, b];\n            }\n            if (charCodes) {\n                var hexCodes = numArrayToHexArray(charCodes);\n                logger.log('DEBUG', 'Char codes =  ' + hexCodes.join(','));\n                this.lastCmdA = null;\n                this.lastCmdB = null;\n            }\n            return charCodes;\n        }\n\n        /**\n        * Parse extended background attributes as well as new foreground color black.\n        * @returns{Boolean} Tells if background attributes are found\n        */\n\n    }, {\n        key: 'parseBackgroundAttributes',\n        value: function parseBackgroundAttributes(a, b) {\n            var bkgData, index, chNr, channel;\n\n            var case1 = (a === 0x10 || a === 0x18) && 0x20 <= b && b <= 0x2f;\n            var case2 = (a === 0x17 || a === 0x1f) && 0x2d <= b && b <= 0x2f;\n            if (!(case1 || case2)) {\n                return false;\n            }\n            bkgData = {};\n            if (a === 0x10 || a === 0x18) {\n                index = Math.floor((b - 0x20) / 2);\n                bkgData.background = backgroundColors[index];\n                if (b % 2 === 1) {\n                    bkgData.background = bkgData.background + '_semi';\n                }\n            } else if (b === 0x2d) {\n                bkgData.background = 'transparent';\n            } else {\n                bkgData.foreground = 'black';\n                if (b === 0x2f) {\n                    bkgData.underline = true;\n                }\n            }\n            chNr = a < 0x18 ? 1 : 2;\n            channel = this.channels[chNr - 1];\n            channel.setBkgData(bkgData);\n            this.lastCmdA = null;\n            this.lastCmdB = null;\n            return true;\n        }\n\n        /**\n         * Reset state of parser and its channels.\n         */\n\n    }, {\n        key: 'reset',\n        value: function reset() {\n            for (var i = 0; i < this.channels.length; i++) {\n                if (this.channels[i]) {\n                    this.channels[i].reset();\n                }\n            }\n            this.lastCmdA = null;\n            this.lastCmdB = null;\n        }\n\n        /**\n         * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.\n         */\n\n    }, {\n        key: 'cueSplitAtTime',\n        value: function cueSplitAtTime(t) {\n            for (var i = 0; i < this.channels.length; i++) {\n                if (this.channels[i]) {\n                    this.channels[i].cueSplitAtTime(t);\n                }\n            }\n        }\n    }]);\n\n    return Cea608Parser;\n}();\n\nexports.default = Cea608Parser;","'use strict';\n\nvar Cues = {\n\n  newCue: function newCue(track, startTime, endTime, captionScreen) {\n    var row;\n    var cue;\n    var indenting;\n    var indent;\n    var text;\n    var VTTCue = window.VTTCue || window.TextTrackCue;\n\n    for (var r = 0; r < captionScreen.rows.length; r++) {\n      row = captionScreen.rows[r];\n      indenting = true;\n      indent = 0;\n      text = '';\n\n      if (!row.isEmpty()) {\n        for (var c = 0; c < row.chars.length; c++) {\n          if (row.chars[c].uchar.match(/\\s/) && indenting) {\n            indent++;\n          } else {\n            text += row.chars[c].uchar;\n            indenting = false;\n          }\n        }\n        cue = new VTTCue(startTime, endTime, text.trim());\n\n        if (indent >= 16) {\n          indent--;\n        } else {\n          indent++;\n        }\n\n        // VTTCue.line get's flakey when using controls, so let's now include line 13&14\n        // also, drop line 1 since it's to close to the top\n        if (navigator.userAgent.match(/Firefox\\//)) {\n          cue.line = r + 1;\n        } else {\n          cue.line = r > 7 ? r - 2 : r + 1;\n        }\n        cue.align = 'left';\n        // Clamp the position between 0 and 100 - if out of these bounds, Firefox throws an exception and captions break\n        cue.position = Math.max(0, Math.min(100, 100 * (indent / 32) + (navigator.userAgent.match(/Firefox\\//) ? 50 : 0)));\n        track.addCue(cue);\n      }\n    }\n  }\n\n};\n\nmodule.exports = Cues;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction noop() {}\n\nvar fakeLogger = {\n  trace: noop,\n  debug: noop,\n  log: noop,\n  warn: noop,\n  info: noop,\n  error: noop\n};\n\nvar exportedLogger = fakeLogger,\n    hls = void 0;\n\n//let lastCallTime;\n// function formatMsgWithTimeInfo(type, msg) {\n//   const now = Date.now();\n//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';\n//   lastCallTime = now;\n//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';\n//   return msg;\n// }\n\nfunction formatMsg(type, msg) {\n  msg = '[' + type + '] > ' + msg;\n  return msg;\n}\n\nfunction consolePrintFn(type) {\n  var func = window.console[type];\n  if (func) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (args[0]) {\n        args[0] = formatMsg(type, args[0]);\n      }\n      func.apply(window.console, args);\n    };\n  }\n  return noop;\n}\n\nfunction checkRepeatWrapper(func) {\n  var lastMsg;\n  return function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (args.join(' ') === lastMsg) {\n      return;\n    }\n    lastMsg = args.join(' ');\n    func.apply(null, args);\n  };\n}\n\nfunction exportLoggerFunctions(debugConfig) {\n  for (var _len3 = arguments.length, functions = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    functions[_key3 - 1] = arguments[_key3];\n  }\n\n  functions.forEach(function (type) {\n    exportedLogger[type] = checkRepeatWrapper(function () {\n      var logFn = hls && hls.holaLog && hls.holaLog[type] || debugConfig[type] || consolePrintFn(type);\n      logFn.apply(null, arguments);\n    });\n  });\n}\n\nvar enableLogs = exports.enableLogs = function enableLogs(debugConfig, hlsObject) {\n  if (debugConfig === true || (typeof debugConfig === 'undefined' ? 'undefined' : _typeof(debugConfig)) === 'object') {\n    hls = hlsObject;\n    exportLoggerFunctions(debugConfig,\n    // Remove out from list here to hard-disable a log-level\n    //'trace',\n    'debug', 'log', 'info', 'warn', 'error');\n    // Some browsers don't allow to use bind on console object anyway\n    // fallback to default if needed\n    try {\n      exportedLogger.log();\n    } catch (e) {\n      exportedLogger = fakeLogger;\n    }\n  } else {\n    exportedLogger = fakeLogger;\n  }\n};\n\nvar logger = exports.logger = exportedLogger;","\"use strict\";\n\nif (!ArrayBuffer.prototype.slice) {\n  ArrayBuffer.prototype.slice = function (start, end) {\n    var that = new Uint8Array(this);\n    if (end === undefined) {\n      end = that.length;\n    }\n    var result = new ArrayBuffer(end - start);\n    var resultArray = new Uint8Array(result);\n    for (var i = 0; i < resultArray.length; i++) {\n      resultArray[i] = that[i + start];\n    }\n    return result;\n  };\n}\nif (!Object.assign) {\n  Object.assign = function (obj) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      if (!source) {\n        continue;\n      }\n      for (var prop in source) {\n        if (source.hasOwnProperty(prop)) {\n          obj[prop] = source[prop];\n        }\n      }\n    }\n    return obj;\n  };\n}","'use strict';\n\nvar URLHelper = {\n  // build an absolute URL from a relative one using the provided baseURL\n  // if relativeURL is an absolute URL it will be returned as is.\n  buildAbsoluteURL: function buildAbsoluteURL(baseURL, relativeURL) {\n    // remove any remaining space and CRLF\n    relativeURL = relativeURL.trim();\n    if (/^[a-z]+:/i.test(relativeURL)) {\n      // complete url, not relative\n      return (' ' + relativeURL).slice(1);\n    }\n\n    var relativeURLQuery = null;\n    var relativeURLHash = null;\n\n    var relativeURLHashSplit = /^([^#]*)(.*)$/.exec(relativeURL);\n    if (relativeURLHashSplit) {\n      relativeURLHash = relativeURLHashSplit[2];\n      relativeURL = relativeURLHashSplit[1];\n    }\n    var relativeURLQuerySplit = /^([^\\?]*)(.*)$/.exec(relativeURL);\n    if (relativeURLQuerySplit) {\n      relativeURLQuery = relativeURLQuerySplit[2];\n      relativeURL = relativeURLQuerySplit[1];\n    }\n\n    var baseURLHashSplit = /^([^#]*)(.*)$/.exec(baseURL);\n    if (baseURLHashSplit) {\n      baseURL = baseURLHashSplit[1];\n    }\n    var baseURLQuerySplit = /^([^\\?]*)(.*)$/.exec(baseURL);\n    if (baseURLQuerySplit) {\n      baseURL = baseURLQuerySplit[1];\n    }\n\n    var baseURLDomainSplit = /^(([a-z]+:)?\\/\\/[a-z0-9\\.\\-_~]+(:[0-9]+)?)?(\\/.*)$/i.exec(baseURL);\n    if (!baseURLDomainSplit) {\n      throw new Error('Error trying to parse base URL.');\n    }\n    // e.g. 'http:', 'https:', ''\n    var baseURLProtocol = baseURLDomainSplit[2] || '';\n    // e.g. 'http://example.com', '//example.com', ''\n    var baseURLProtocolDomain = baseURLDomainSplit[1] || '';\n    // e.g. '/a/b/c/playlist.m3u8'\n    var baseURLPath = baseURLDomainSplit[4];\n\n    var builtURL = null;\n    if (/^\\/\\//.test(relativeURL)) {\n      // relative url starts wth '//' so copy protocol (which may be '' if baseUrl didn't provide one)\n      builtURL = baseURLProtocol + '//' + URLHelper.buildAbsolutePath('', relativeURL.substring(2));\n    } else if (/^\\//.test(relativeURL)) {\n      // relative url starts with '/' so start from root of domain\n      builtURL = baseURLProtocolDomain + '/' + URLHelper.buildAbsolutePath('', relativeURL.substring(1));\n    } else {\n      builtURL = URLHelper.buildAbsolutePath(baseURLProtocolDomain + baseURLPath, relativeURL);\n    }\n\n    // put the query and hash parts back\n    if (relativeURLQuery) {\n      builtURL += relativeURLQuery;\n    }\n    if (relativeURLHash) {\n      builtURL += relativeURLHash;\n    }\n    return builtURL;\n  },\n\n  // build an absolute path using the provided basePath\n  // adapted from https://developer.mozilla.org/en-US/docs/Web/API/document/cookie#Using_relative_URLs_in_the_path_parameter\n  // this does not handle the case where relativePath is \"/\" or \"//\". These cases should be handled outside this.\n  buildAbsolutePath: function buildAbsolutePath(basePath, relativePath) {\n    var sRelPath = relativePath;\n    var nUpLn,\n        sDir = '',\n        sPath = basePath.replace(/[^\\/]*$/, sRelPath.replace(/(\\/|^)(?:\\.?\\/+)+/g, '$1'));\n    for (var nEnd, nStart = 0; nEnd = sPath.indexOf('/../', nStart), nEnd > -1; nStart = nEnd + nUpLn) {\n      nUpLn = /^\\/(?:\\.\\.\\/)*/.exec(sPath.slice(nEnd))[0].length;\n      sDir = (sDir + sPath.substring(nStart, nEnd)).replace(new RegExp('(?:\\\\\\/+[^\\\\\\/]*){0,' + (nUpLn - 1) / 3 + '}$'), '/');\n    }\n    return sDir + sPath.substr(nStart);\n  }\n};\n\nmodule.exports = URLHelper;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * XHR based logger\nn\nvar _logger = require('../utils/logger');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar XhrLoader = function () {\n  function XhrLoader(config) {\n    _classCallCheck(this, XhrLoader);\n\n    if (config && config.xhrSetup) {\n      this.xhrSetup = config.xhrSetup;\n    }\n  }\n\n  _createClass(XhrLoader, [{\n    key: 'destroy',\n    value: function destroy() {\n      this.abort();\n      this.loader = null;\n    }\n  }, {\n    key: 'abort',\n    value: function abort() {\n      var loader = this.loader,\n          timeoutHandle = this.timeoutHandle,\n          retryHandle = this.retryHandle;\n      if (loader && loader.readyState !== 4) {\n        this.stats.aborted = true;\n        loader.abort();\n      }\n      if (timeoutHandle) {\n        window.clearTimeout(timeoutHandle);\n      }\n      if (retryHandle) {\n        window.clearTimeout(retryHandle);\n      }\n    }\n  }, {\n    key: 'load',\n    value: function load(url, responseType, onSuccess, onError, onTimeout, timeout, maxRetry, retryDelay) {\n      var onProgress = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n      var frag = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;\n\n      this.url = url;\n      if (frag && !isNaN(frag.byteRangeStartOffset) && !isNaN(frag.byteRangeEndOffset)) {\n        this.byteRange = frag.byteRangeStartOffset + '-' + (frag.byteRangeEndOffset - 1);\n      }\n      this.responseType = responseType;\n      this.onSuccess = onSuccess;\n      this.onProgress = onProgress;\n      this.onTimeout = onTimeout;\n      this.onError = onError;\n      this.stats = { trequest: performance.now(), retry: 0 };\n      this.timeout = timeout;\n      this.maxRetry = maxRetry;\n      this.retryDelay = retryDelay;\n      this.loadInternal();\n    }\n  }, {\n    key: 'loadInternal',\n    value: function loadInternal() {\n      var xhr;\n\n      if (typeof XDomainRequest !== 'undefined') {\n        xhr = this.loader = new XDomainRequest();\n      } else {\n        xhr = this.loader = new XMLHttpRequest();\n      }\n\n      xhr.onloadend = this.loadend.bind(this);\n      xhr.onprogress = this.loadprogress.bind(this);\n\n      var url = this.url;\n      if (location.protocol === 'https:' && /^http:\\/\\//.test(url)) {\n        url = url.replace(/^http:\\/\\//, 'https://');\n      }\n      xhr.open('GET', url, true);\n      if (this.byteRange) {\n        xhr.setRequestHeader('Range', 'bytes=' + this.byteRange);\n      }\n      xhr.responseType = this.responseType;\n      this.stats.tfirst = null;\n      this.stats.loaded = 0;\n      if (this.xhrSetup) {\n        this.xhrSetup(xhr, url);\n      }\n      this.timeoutHandle = window.setTimeout(this.loadtimeout.bind(this), this.timeout);\n      xhr.send();\n    }\n  }, {\n    key: 'loadend',\n    value: function loadend(event) {\n      var xhr = event.currentTarget,\n          status = xhr.status,\n          stats = this.stats;\n      // don't proceed if xhr has been aborted\n      if (!stats.aborted) {\n        // http status between 200 to 299 are all successful\n        if (status >= 200 && status < 300) {\n          window.clearTimeout(this.timeoutHandle);\n          stats.tload = performance.now();\n          this.onSuccess(event, stats);\n        } else {\n          // error ...\n          if (stats.retry < this.maxRetry) {\n            _logger.logger.warn(status + ' while loading ' + this.url + ', retrying in ' + this.retryDelay + '...');\n            this.destroy();\n            this.retryHandle = window.setTimeout(this.loadInternal.bind(this), this.retryDelay);\n            // exponential backoff\n            this.retryDelay = Math.min(2 * this.retryDelay, 64000);\n            stats.retry++;\n          } else {\n            window.clearTimeout(this.timeoutHandle);\n            _logger.logger.error(status + ' while loading ' + this.url);\n            this.onError(event);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'loadtimeout',\n    value: function loadtimeout(event) {\n      _logger.logger.warn('timeout while loading ' + this.url);\n      this.onTimeout(event, this.stats);\n    }\n  }, {\n    key: 'loadprogress',\n    value: function loadprogress(event) {\n      var stats = this.stats;\n      if (stats.tfirst === null) {\n        stats.tfirst = performance.now();\n      }\n      stats.loaded = event.loaded;\n      if (event.lengthComputable) {\n        stats.total = event.total;\n      }\n      if (this.onProgress) {\n        this.onProgress(stats);\n      }\n    }\n  }]);\n\n  return XhrLoader;\n}();\n\nexports.default = XhrLoader;","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","var bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn, options) {\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n\n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        var exp = cache[key].exports;\n        // Using babel as a transpiler to use esmodule, the export will always\n        // be an object with the default export as a property of it. To ensure\n        // the existing api and babel esmodule exports are both supported we\n        // check for both\n        if (exp === fn || exp && exp.default === fn) {\n            wkey = key;\n            break;\n        }\n    }\n\n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            Function(['require','module','exports'], '(' + fn + ')(self)'),\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n\n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        Function(['require'], (\n            // try to call default if defined to also support babel esmodule\n            // exports\n            'var f = require(' + stringify(wkey) + ');' +\n            '(f.default ? f.default : f)(self);'\n        )),\n        scache\n    ];\n\n    var workerSources = {};\n    resolveSources(skey);\n\n    function resolveSources(key) {\n        workerSources[key] = true;\n\n        for (var depPath in sources[key][1]) {\n            var depKey = sources[key][1][depPath];\n            if (!workerSources[depKey]) {\n                resolveSources(depKey);\n            }\n        }\n    }\n\n    var src = '(' + bundleFn + ')({'\n        + Object.keys(workerSources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n\n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\n    var blob = new Blob([src], { type: 'text/javascript' });\n    if (options && options.bare) { return blob; }\n    var workerUrl = URL.createObjectURL(blob);\n    var worker = new Worker(workerUrl);\n    worker.objectURL = workerUrl;\n    return worker;\n};\n"]}